
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d64  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003eec  08003eec  00004eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003efc  08003efc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003efc  08003efc  00004efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f04  08003f04  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f04  08003f04  00004f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f08  08003f08  00004f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000400  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b528  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225d  00000000  00000000  00010564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  000127c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d3  00000000  00000000  00013100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217d3  00000000  00000000  000137d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf54  00000000  00000000  00034fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9155  00000000  00000000  00040efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a04f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002514  00000000  00000000  0010a094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0010c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ed4 	.word	0x08003ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ed4 	.word	0x08003ed4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
#define SRAM_END              (0x20030000UL) // F407: 192KB SRAM
#define EMPTY_WORD            (0xFFFFFFFFUL)


void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <MX_GPIO_Init+0x60>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <MX_GPIO_Init+0x60>)
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_GPIO_Init+0x60>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0308 	and.w	r3, r3, #8
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  // PD12..PD15 as push-pull outputs (Discovery LEDs)
  GPIO_InitStruct.Pin   = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000524:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000528:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4619      	mov	r1, r3
 800053a:	4807      	ldr	r0, [pc, #28]	@ (8000558 <MX_GPIO_Init+0x64>)
 800053c:	f000 fb9c 	bl	8000c78 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <MX_GPIO_Init+0x64>)
 8000548:	f000 fd32 	bl	8000fb0 <HAL_GPIO_WritePin>
}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40023800 	.word	0x40023800
 8000558:	40020c00 	.word	0x40020c00

0800055c <delay_ms>:




static void delay_ms(uint32_t ms) {
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    // crude blocking delay; adjust for your SysClk if needed
    for (uint32_t i = 0; i < (ms * 12000U); ++i) { __NOP(); }
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e003      	b.n	8000572 <delay_ms+0x16>
 800056a:	bf00      	nop
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	3301      	adds	r3, #1
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8000578:	fb02 f303 	mul.w	r3, r2, r3
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	429a      	cmp	r2, r3
 8000580:	d3f3      	bcc.n	800056a <delay_ms+0xe>
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <boot_led_toggle>:

static void boot_led_toggle(void)  { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); } // red
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
 8000594:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <boot_led_toggle+0x14>)
 800059a:	f000 fd22 	bl	8000fe2 <HAL_GPIO_TogglePin>
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020c00 	.word	0x40020c00

080005a8 <app_led_toggle>:
static void app_led_toggle(void)   { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); } // green
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <app_led_toggle+0x14>)
 80005b2:	f000 fd16 	bl	8000fe2 <HAL_GPIO_TogglePin>
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020c00 	.word	0x40020c00

080005c0 <leds_off>:

// optional: turn off all used LEDs before jump
static void leds_off(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80005ca:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <leds_off+0x14>)
 80005cc:	f000 fcf0 	bl	8000fb0 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <application_is_valid>:

static uint8_t application_is_valid(uint32_t app_base) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    uint32_t sp = *((uint32_t*)app_base);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
    uint32_t reset = *(((uint32_t*)app_base) + 1U);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3304      	adds	r3, #4
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60bb      	str	r3, [r7, #8]

    if (sp == EMPTY_WORD || reset == EMPTY_WORD) return 0;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d003      	beq.n	80005fe <application_is_valid+0x26>
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d101      	bne.n	8000602 <application_is_valid+0x2a>
 80005fe:	2300      	movs	r3, #0
 8000600:	e012      	b.n	8000628 <application_is_valid+0x50>
    if (sp < SRAM_START || sp > (SRAM_END - 1U)) return 0; // SP must point into SRAM
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000608:	d303      	bcc.n	8000612 <application_is_valid+0x3a>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <application_is_valid+0x5c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d901      	bls.n	8000616 <application_is_valid+0x3e>
 8000612:	2300      	movs	r3, #0
 8000614:	e008      	b.n	8000628 <application_is_valid+0x50>
    if ((reset & 0xFF000000U) != 0x08000000U) return 0;    // reset handler typically in flash
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800061c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000620:	d001      	beq.n	8000626 <application_is_valid+0x4e>
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <application_is_valid+0x50>
    return 1;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	2002ffff 	.word	0x2002ffff

08000638 <jump_to_application>:

static void jump_to_application(uint32_t app_base) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    uint32_t app_sp    = *((uint32_t*)app_base);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	61bb      	str	r3, [r7, #24]
    uint32_t app_entry = *(((uint32_t*)app_base) + 1U);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3304      	adds	r3, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	617b      	str	r3, [r7, #20]
    func_ptr app_reset = (func_ptr)app_entry;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000652:	b672      	cpsid	i
}
 8000654:	bf00      	nop

    __disable_irq();

    // stop SysTick
    SysTick->CTRL = 0;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <jump_to_application+0x8c>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <jump_to_application+0x8c>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0;
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <jump_to_application+0x8c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]

    // disable all NVIC interrupts
    for (uint32_t i = 0; i < 8; ++i) {
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
 800066c:	e010      	b.n	8000690 <jump_to_application+0x58>
        NVIC->ICER[i] = 0xFFFFFFFFUL;
 800066e:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <jump_to_application+0x90>)
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	3320      	adds	r3, #32
 8000674:	f04f 31ff 	mov.w	r1, #4294967295
 8000678:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        NVIC->ICPR[i] = 0xFFFFFFFFUL;
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <jump_to_application+0x90>)
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3360      	adds	r3, #96	@ 0x60
 8000682:	f04f 31ff 	mov.w	r1, #4294967295
 8000686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < 8; ++i) {
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3301      	adds	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	2b07      	cmp	r3, #7
 8000694:	d9eb      	bls.n	800066e <jump_to_application+0x36>
    }

    HAL_RCC_DeInit();
 8000696:	f002 fec9 	bl	800342c <HAL_RCC_DeInit>
    HAL_DeInit();
 800069a:	f000 f981 	bl	80009a0 <HAL_DeInit>

    leds_off();
 800069e:	f7ff ff8f 	bl	80005c0 <leds_off>

    // relocate vector table to the application's vector table
    SCB->VTOR = app_base;
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <jump_to_application+0x94>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6093      	str	r3, [r2, #8]
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f383 8808 	msr	MSP, r3
}
 80006b2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80006b4:	b662      	cpsie	i
}
 80006b6:	bf00      	nop
    // set MSP to application's stack pointer
    __set_MSP(app_sp);

    __enable_irq();

    app_reset(); // never returns
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	4798      	blx	r3
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	e000e010 	.word	0xe000e010
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <main>:

int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
    HAL_Init();
 80006d6:	f000 f941 	bl	800095c <HAL_Init>
    SystemClock_Config();
 80006da:	f000 f831 	bl	8000740 <SystemClock_Config>
    MX_GPIO_Init();     // make sure GPIOD clock + pins are configured
 80006de:	f7ff ff09 	bl	80004f4 <MX_GPIO_Init>

    // bootloader indication: slow blink on PD14
    for (int i = 0; i < 6; ++i) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	e007      	b.n	80006f8 <main+0x28>
        boot_led_toggle();
 80006e8:	f7ff ff52 	bl	8000590 <boot_led_toggle>
        delay_ms(250);
 80006ec:	20fa      	movs	r0, #250	@ 0xfa
 80006ee:	f7ff ff35 	bl	800055c <delay_ms>
    for (int i = 0; i < 6; ++i) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	ddf4      	ble.n	80006e8 <main+0x18>
    }

    if (application_is_valid(APPLICATION_ADDRESS)) {
 80006fe:	480f      	ldr	r0, [pc, #60]	@ (800073c <main+0x6c>)
 8000700:	f7ff ff6a 	bl	80005d8 <application_is_valid>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d010      	beq.n	800072c <main+0x5c>
        // quick “handoff” indication (blink PD12 twice)
        for (int i = 0; i < 2; ++i) { app_led_toggle(); delay_ms(80); }
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	e007      	b.n	8000720 <main+0x50>
 8000710:	f7ff ff4a 	bl	80005a8 <app_led_toggle>
 8000714:	2050      	movs	r0, #80	@ 0x50
 8000716:	f7ff ff21 	bl	800055c <delay_ms>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	ddf4      	ble.n	8000710 <main+0x40>
        jump_to_application(APPLICATION_ADDRESS);
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <main+0x6c>)
 8000728:	f7ff ff86 	bl	8000638 <jump_to_application>
    }

    // if no valid app, stay in bootloader with slow blink
    while (1) {
        boot_led_toggle(); // PD14
 800072c:	f7ff ff30 	bl	8000590 <boot_led_toggle>
        delay_ms(500);
 8000730:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000734:	f7ff ff12 	bl	800055c <delay_ms>
        boot_led_toggle(); // PD14
 8000738:	bf00      	nop
 800073a:	e7f7      	b.n	800072c <main+0x5c>
 800073c:	08008000 	.word	0x08008000

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	@ 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fb94 	bl	8003e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b28      	ldr	r3, [pc, #160]	@ (800080c <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	4a27      	ldr	r2, [pc, #156]	@ (800080c <SystemClock_Config+0xcc>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	@ 0x40
 8000774:	4b25      	ldr	r3, [pc, #148]	@ (800080c <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <SystemClock_Config+0xd0>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007be:	2307      	movs	r3, #7
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f9cc 	bl	8002b64 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007d2:	f000 f81f 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2105      	movs	r1, #5
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fc2d 	bl	8003054 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000800:	f000 f808 	bl	8000814 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	@ 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <Error_Handler>:
  * @param None
  * @retval None
  */

void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6453      	str	r3, [r2, #68]	@ 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085e:	2007      	movs	r0, #7
 8000860:	f000 f9d6 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <NMI_Handler+0x4>

08000878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <MemManage_Handler+0x4>

08000888 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <UsageFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 f8d1 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <OTG_FS_IRQHandler+0x10>)
 80008d6:	f000 fb9e 	bl	8001016 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000002c 	.word	0x2000002c

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f003 faa9 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fec9 	bl	80006d0 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800094c:	08003f0c 	.word	0x08003f0c
  ldr r2, =_sbss
 8000950:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000954:	2000040c 	.word	0x2000040c

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f943 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f83e 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff ff46 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_DeInit+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <HAL_DeInit+0x50>)
 80009a8:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <HAL_DeInit+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_DeInit+0x4c>)
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_DeInit+0x54>)
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_DeInit+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_DeInit+0x4c>)
 80009be:	4a0e      	ldr	r2, [pc, #56]	@ (80009f8 <HAL_DeInit+0x58>)
 80009c0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_DeInit+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_DeInit+0x4c>)
 80009ca:	22c1      	movs	r2, #193	@ 0xc1
 80009cc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <HAL_DeInit+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_DeInit+0x4c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80009da:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <HAL_DeInit+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80009e0:	f000 f80c 	bl	80009fc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	f6fec9ff 	.word	0xf6fec9ff
 80009f4:	04777933 	.word	0x04777933
 80009f8:	226011ff 	.word	0x226011ff

080009fc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f917 	bl	8000c5e <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f8ed 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000028 	.word	0x20000028

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000028 	.word	0x20000028

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	@ (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	@ (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	@ 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	@ 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff47 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff5c 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e16b      	b.n	8000f6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f040 815a 	bne.w	8000f66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d130      	bne.n	8000d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d00:	2201      	movs	r2, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d017      	beq.n	8000d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d123      	bne.n	8000dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	69b9      	ldr	r1, [r7, #24]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0203 	and.w	r2, r3, #3
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80b4 	beq.w	8000f66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b60      	ldr	r3, [pc, #384]	@ (8000f84 <HAL_GPIO_Init+0x30c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a5f      	ldr	r2, [pc, #380]	@ (8000f84 <HAL_GPIO_Init+0x30c>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000f84 <HAL_GPIO_Init+0x30c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8000f88 <HAL_GPIO_Init+0x310>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a52      	ldr	r2, [pc, #328]	@ (8000f8c <HAL_GPIO_Init+0x314>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d02b      	beq.n	8000e9e <HAL_GPIO_Init+0x226>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a51      	ldr	r2, [pc, #324]	@ (8000f90 <HAL_GPIO_Init+0x318>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d025      	beq.n	8000e9a <HAL_GPIO_Init+0x222>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a50      	ldr	r2, [pc, #320]	@ (8000f94 <HAL_GPIO_Init+0x31c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01f      	beq.n	8000e96 <HAL_GPIO_Init+0x21e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4f      	ldr	r2, [pc, #316]	@ (8000f98 <HAL_GPIO_Init+0x320>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d019      	beq.n	8000e92 <HAL_GPIO_Init+0x21a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4e      	ldr	r2, [pc, #312]	@ (8000f9c <HAL_GPIO_Init+0x324>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d013      	beq.n	8000e8e <HAL_GPIO_Init+0x216>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <HAL_GPIO_Init+0x328>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <HAL_GPIO_Init+0x212>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa4 <HAL_GPIO_Init+0x32c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x20e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa8 <HAL_GPIO_Init+0x330>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_Init+0x20a>
 8000e7e:	2307      	movs	r3, #7
 8000e80:	e00e      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e82:	2308      	movs	r3, #8
 8000e84:	e00c      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e86:	2306      	movs	r3, #6
 8000e88:	e00a      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	e008      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e8e:	2304      	movs	r3, #4
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x228>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb0:	4935      	ldr	r1, [pc, #212]	@ (8000f88 <HAL_GPIO_Init+0x310>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a32      	ldr	r2, [pc, #200]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a27      	ldr	r2, [pc, #156]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f12:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f36:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f60:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <HAL_GPIO_Init+0x334>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	f67f ae90 	bls.w	8000c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	40021c00 	.word	0x40021c00
 8000fac:	40013c00 	.word	0x40013c00

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ff4:	887a      	ldrh	r2, [r7, #2]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	041a      	lsls	r2, r3, #16
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	400b      	ands	r3, r1
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fbd9 	bl	80037e4 <USB_GetMode>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 80fb 	bne.w	8001230 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fb9c 	bl	800377c <USB_ReadInterrupts>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80f1 	beq.w	800122e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fb93 	bl	800377c <USB_ReadInterrupts>
 8001056:	4603      	mov	r3, r0
 8001058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001060:	d104      	bne.n	800106c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800106a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fb83 	bl	800377c <USB_ReadInterrupts>
 8001076:	4603      	mov	r3, r0
 8001078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001080:	d104      	bne.n	800108c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800108a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fb73 	bl	800377c <USB_ReadInterrupts>
 8001096:	4603      	mov	r3, r0
 8001098:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800109c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80010a0:	d104      	bne.n	80010ac <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010aa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fb63 	bl	800377c <USB_ReadInterrupts>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d103      	bne.n	80010c8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2202      	movs	r2, #2
 80010c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fb55 	bl	800377c <USB_ReadInterrupts>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010dc:	d120      	bne.n	8001120 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010e6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d113      	bne.n	8001120 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80010f8:	2110      	movs	r1, #16
 80010fa:	6938      	ldr	r0, [r7, #16]
 80010fc:	f002 fa86 	bl	800360c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001100:	6938      	ldr	r0, [r7, #16]
 8001102:	f002 fab5 	bl	8003670 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7a5b      	ldrb	r3, [r3, #9]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d105      	bne.n	800111a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fb73 	bl	8003800 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 fe2f 	bl	8003d7e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fb29 	bl	800377c <USB_ReadInterrupts>
 800112a:	4603      	mov	r3, r0
 800112c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001134:	d102      	bne.n	800113c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f001 fca1 	bl	8002a7e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fb1b 	bl	800377c <USB_ReadInterrupts>
 8001146:	4603      	mov	r3, r0
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b08      	cmp	r3, #8
 800114e:	d106      	bne.n	800115e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f002 fdf8 	bl	8003d46 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2208      	movs	r2, #8
 800115c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fb0a 	bl	800377c <USB_ReadInterrupts>
 8001168:	4603      	mov	r3, r0
 800116a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001172:	d139      	bne.n	80011e8 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fb7e 	bl	800387a <USB_HC_ReadInterrupt>
 800117e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e025      	b.n	80011d2 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d018      	beq.n	80011cc <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	015a      	lsls	r2, r3, #5
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011b0:	d106      	bne.n	80011c0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f859 	bl	8001270 <HCD_HC_IN_IRQHandler>
 80011be:	e005      	b.n	80011cc <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 febb 	bl	8001f42 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	461a      	mov	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4293      	cmp	r3, r2
 80011dc:	d3d3      	bcc.n	8001186 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fac5 	bl	800377c <USB_ReadInterrupts>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d101      	bne.n	8001200 <HAL_HCD_IRQHandler+0x1ea>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_HCD_IRQHandler+0x1ec>
 8001200:	2300      	movs	r3, #0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d014      	beq.n	8001230 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0210 	bic.w	r2, r2, #16
 8001214:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fb52 	bl	80028c0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0210 	orr.w	r2, r2, #16
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	e000      	b.n	8001230 <HAL_HCD_IRQHandler+0x21a>
      return;
 800122e:	bf00      	nop
    }
  }
}
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_HCD_Stop+0x16>
 8001248:	2302      	movs	r3, #2
 800124a:	e00d      	b.n	8001268 <HAL_HCD_Stop+0x32>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fc3f 	bl	8003adc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fa87 	bl	80037a2 <USB_ReadChInterrupts>
 8001294:	4603      	mov	r3, r0
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b04      	cmp	r3, #4
 800129c:	d11a      	bne.n	80012d4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012aa:	461a      	mov	r2, r3
 80012ac:	2304      	movs	r3, #4
 80012ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80012b0:	78fa      	ldrb	r2, [r7, #3]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	334d      	adds	r3, #77	@ 0x4d
 80012c0:	2207      	movs	r2, #7
 80012c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	78fa      	ldrb	r2, [r7, #3]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fae5 	bl	800389c <USB_HC_Halt>
 80012d2:	e09e      	b.n	8001412 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fa60 	bl	80037a2 <USB_ReadChInterrupts>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012ec:	d11b      	bne.n	8001326 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	015a      	lsls	r2, r3, #5
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012fa:	461a      	mov	r2, r3
 80012fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001300:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	334d      	adds	r3, #77	@ 0x4d
 8001312:	2208      	movs	r2, #8
 8001314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fabc 	bl	800389c <USB_HC_Halt>
 8001324:	e075      	b.n	8001412 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	78fa      	ldrb	r2, [r7, #3]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fa37 	bl	80037a2 <USB_ReadChInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11a      	bne.n	8001374 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	015a      	lsls	r2, r3, #5
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4413      	add	r3, r2
 8001346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800134a:	461a      	mov	r2, r3
 800134c:	2308      	movs	r3, #8
 800134e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001350:	78fa      	ldrb	r2, [r7, #3]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	334d      	adds	r3, #77	@ 0x4d
 8001360:	2206      	movs	r2, #6
 8001362:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fa95 	bl	800389c <USB_HC_Halt>
 8001372:	e04e      	b.n	8001412 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	78fa      	ldrb	r2, [r7, #3]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fa10 	bl	80037a2 <USB_ReadChInterrupts>
 8001382:	4603      	mov	r3, r0
 8001384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800138c:	d11b      	bne.n	80013c6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	015a      	lsls	r2, r3, #5
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4413      	add	r3, r2
 8001396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800139a:	461a      	mov	r2, r3
 800139c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	334d      	adds	r3, #77	@ 0x4d
 80013b2:	2209      	movs	r2, #9
 80013b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fa6c 	bl	800389c <USB_HC_Halt>
 80013c4:	e025      	b.n	8001412 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	78fa      	ldrb	r2, [r7, #3]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 f9e7 	bl	80037a2 <USB_ReadChInterrupts>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013da:	2b80      	cmp	r3, #128	@ 0x80
 80013dc:	d119      	bne.n	8001412 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013ea:	461a      	mov	r2, r3
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80013f0:	78fa      	ldrb	r2, [r7, #3]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	334d      	adds	r3, #77	@ 0x4d
 8001400:	2207      	movs	r2, #7
 8001402:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fa45 	bl	800389c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f002 f9c1 	bl	80037a2 <USB_ReadChInterrupts>
 8001420:	4603      	mov	r3, r0
 8001422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800142a:	d112      	bne.n	8001452 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f002 fa31 	bl	800389c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001446:	461a      	mov	r2, r3
 8001448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144c:	6093      	str	r3, [r2, #8]
 800144e:	f000 bd75 	b.w	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f002 f9a1 	bl	80037a2 <USB_ReadChInterrupts>
 8001460:	4603      	mov	r3, r0
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b01      	cmp	r3, #1
 8001468:	f040 8128 	bne.w	80016bc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4413      	add	r3, r2
 8001474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001478:	461a      	mov	r2, r3
 800147a:	2320      	movs	r3, #32
 800147c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	331b      	adds	r3, #27
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d119      	bne.n	80014c8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001494:	78fa      	ldrb	r2, [r7, #3]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	331b      	adds	r3, #27
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	015a      	lsls	r2, r3, #5
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	0151      	lsls	r1, r2, #5
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	440a      	add	r2, r1
 80014be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	799b      	ldrb	r3, [r3, #6]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01b      	beq.n	8001508 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80014d0:	78fa      	ldrb	r2, [r7, #3]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3330      	adds	r3, #48	@ 0x30
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	1ac9      	subs	r1, r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4403      	add	r3, r0
 8001504:	3338      	adds	r3, #56	@ 0x38
 8001506:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	334d      	adds	r3, #77	@ 0x4d
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3344      	adds	r3, #68	@ 0x44
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4413      	add	r3, r2
 8001538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800153c:	461a      	mov	r2, r3
 800153e:	2301      	movs	r3, #1
 8001540:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3326      	adds	r3, #38	@ 0x26
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00a      	beq.n	800156e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3326      	adds	r3, #38	@ 0x26
 8001568:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800156a:	2b02      	cmp	r3, #2
 800156c:	d110      	bne.n	8001590 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f002 f990 	bl	800389c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001588:	461a      	mov	r2, r3
 800158a:	2310      	movs	r3, #16
 800158c:	6093      	str	r3, [r2, #8]
 800158e:	e03d      	b.n	800160c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001590:	78fa      	ldrb	r2, [r7, #3]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3326      	adds	r3, #38	@ 0x26
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d00a      	beq.n	80015bc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80015a6:	78fa      	ldrb	r2, [r7, #3]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3326      	adds	r3, #38	@ 0x26
 80015b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d127      	bne.n	800160c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	0151      	lsls	r1, r2, #5
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	440a      	add	r2, r1
 80015d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80015d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015da:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	334c      	adds	r3, #76	@ 0x4c
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	334c      	adds	r3, #76	@ 0x4c
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f002 fbc7 	bl	8003d9a <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	799b      	ldrb	r3, [r3, #6]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d13b      	bne.n	800168c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3338      	adds	r3, #56	@ 0x38
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4403      	add	r3, r0
 8001634:	3328      	adds	r3, #40	@ 0x28
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	440b      	add	r3, r1
 800163a:	1e59      	subs	r1, r3, #1
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4403      	add	r3, r0
 800164a:	3328      	adds	r3, #40	@ 0x28
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8470 	beq.w	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	333c      	adds	r3, #60	@ 0x3c
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2d8      	uxtb	r0, r3
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	333c      	adds	r3, #60	@ 0x3c
 8001684:	4602      	mov	r2, r0
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	f000 bc58 	b.w	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	333c      	adds	r3, #60	@ 0x3c
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2d8      	uxtb	r0, r3
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	333c      	adds	r3, #60	@ 0x3c
 80016b4:	4602      	mov	r2, r0
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	f000 bc40 	b.w	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 f86c 	bl	80037a2 <USB_ReadChInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d131      	bne.n	8001738 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016e0:	461a      	mov	r2, r3
 80016e2:	2320      	movs	r3, #32
 80016e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	1a9b      	subs	r3, r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	331a      	adds	r3, #26
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	f040 841f 	bne.w	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	331b      	adds	r3, #27
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	334d      	adds	r3, #77	@ 0x4d
 8001722:	2203      	movs	r2, #3
 8001724:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f002 f8b4 	bl	800389c <USB_HC_Halt>
 8001734:	f000 bc02 	b.w	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f82e 	bl	80037a2 <USB_ReadChInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b02      	cmp	r3, #2
 800174e:	f040 8305 	bne.w	8001d5c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800175e:	461a      	mov	r2, r3
 8001760:	2302      	movs	r3, #2
 8001762:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	334d      	adds	r3, #77	@ 0x4d
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d114      	bne.n	80017a4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	334d      	adds	r3, #77	@ 0x4d
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	334c      	adds	r3, #76	@ 0x4c
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e2cc      	b.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	334d      	adds	r3, #77	@ 0x4d
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d114      	bne.n	80017e4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	334d      	adds	r3, #77	@ 0x4d
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	334c      	adds	r3, #76	@ 0x4c
 80017de:	2205      	movs	r2, #5
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e2ac      	b.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	334d      	adds	r3, #77	@ 0x4d
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b07      	cmp	r3, #7
 80017f8:	d00b      	beq.n	8001812 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	334d      	adds	r3, #77	@ 0x4d
 800180a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800180c:	2b09      	cmp	r3, #9
 800180e:	f040 80a6 	bne.w	800195e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	334d      	adds	r3, #77	@ 0x4d
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3344      	adds	r3, #68	@ 0x44
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	1c59      	adds	r1, r3, #1
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4403      	add	r3, r0
 8001846:	3344      	adds	r3, #68	@ 0x44
 8001848:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3344      	adds	r3, #68	@ 0x44
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d943      	bls.n	80018e8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	3344      	adds	r3, #68	@ 0x44
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	331a      	adds	r3, #26
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d123      	bne.n	80018d2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	331b      	adds	r3, #27
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	331c      	adds	r3, #28
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	0151      	lsls	r1, r2, #5
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	440a      	add	r2, r1
 80018c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80018cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	334c      	adds	r3, #76	@ 0x4c
 80018e2:	2204      	movs	r2, #4
 80018e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80018e6:	e229      	b.n	8001d3c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	334c      	adds	r3, #76	@ 0x4c
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3326      	adds	r3, #38	@ 0x26
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3326      	adds	r3, #38	@ 0x26
 8001922:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001924:	2b02      	cmp	r3, #2
 8001926:	f040 8209 	bne.w	8001d3c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4413      	add	r3, r2
 8001932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001940:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001948:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4413      	add	r3, r2
 8001952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800195c:	e1ee      	b.n	8001d3c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	334d      	adds	r3, #77	@ 0x4d
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b05      	cmp	r3, #5
 8001972:	f040 80c8 	bne.w	8001b06 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	334d      	adds	r3, #77	@ 0x4d
 8001986:	2202      	movs	r2, #2
 8001988:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	331b      	adds	r3, #27
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	f040 81ce 	bne.w	8001d3e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3326      	adds	r3, #38	@ 0x26
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d16b      	bne.n	8001a90 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3348      	adds	r3, #72	@ 0x48
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1c59      	adds	r1, r3, #1
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4403      	add	r3, r0
 80019d8:	3348      	adds	r3, #72	@ 0x48
 80019da:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3348      	adds	r3, #72	@ 0x48
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d943      	bls.n	8001a7a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3348      	adds	r3, #72	@ 0x48
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	331b      	adds	r3, #27
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3344      	adds	r3, #68	@ 0x44
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d809      	bhi.n	8001a44 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	331c      	adds	r3, #28
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	0151      	lsls	r1, r2, #5
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	440a      	add	r2, r1
 8001a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a62:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	334c      	adds	r3, #76	@ 0x4c
 8001a74:	2204      	movs	r2, #4
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e014      	b.n	8001aa4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	334c      	adds	r3, #76	@ 0x4c
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	e009      	b.n	8001aa4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	334c      	adds	r3, #76	@ 0x4c
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3326      	adds	r3, #38	@ 0x26
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3326      	adds	r3, #38	@ 0x26
 8001aca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 8136 	bne.w	8001d3e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ae8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001af0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e11b      	b.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	334d      	adds	r3, #77	@ 0x4d
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	f040 8081 	bne.w	8001c20 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	334d      	adds	r3, #77	@ 0x4d
 8001b2e:	2202      	movs	r2, #2
 8001b30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	331b      	adds	r3, #27
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	f040 80fa 	bne.w	8001d3e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	334c      	adds	r3, #76	@ 0x4c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	0151      	lsls	r1, r2, #5
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	440a      	add	r2, r1
 8001b74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b7c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	0151      	lsls	r1, r2, #5
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	440a      	add	r2, r1
 8001b94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b9c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	0151      	lsls	r1, r2, #5
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	440a      	add	r2, r1
 8001bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bb8:	f023 0320 	bic.w	r3, r3, #32
 8001bbc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3326      	adds	r3, #38	@ 0x26
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	3326      	adds	r3, #38	@ 0x26
 8001be4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	f040 80a9 	bne.w	8001d3e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c02:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c0a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e08e      	b.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	334d      	adds	r3, #77	@ 0x4d
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d143      	bne.n	8001cbe <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	334d      	adds	r3, #77	@ 0x4d
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	334c      	adds	r3, #76	@ 0x4c
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3326      	adds	r3, #38	@ 0x26
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	3326      	adds	r3, #38	@ 0x26
 8001c84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d159      	bne.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ca0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ca8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e03f      	b.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	334d      	adds	r3, #77	@ 0x4d
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d126      	bne.n	8001d22 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	334d      	adds	r3, #77	@ 0x4d
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3344      	adds	r3, #68	@ 0x44
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4403      	add	r3, r0
 8001d08:	3344      	adds	r3, #68	@ 0x44
 8001d0a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	334c      	adds	r3, #76	@ 0x4c
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e00d      	b.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	334d      	adds	r3, #77	@ 0x4d
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f000 8100 	beq.w	8001f3a <HCD_HC_IN_IRQHandler+0xcca>
 8001d3a:	e000      	b.n	8001d3e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001d3c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	334c      	adds	r3, #76	@ 0x4c
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f002 f820 	bl	8003d9a <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d5a:	e0ef      	b.n	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 fd1c 	bl	80037a2 <USB_ReadChInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d70:	2b40      	cmp	r3, #64	@ 0x40
 8001d72:	d12f      	bne.n	8001dd4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d80:	461a      	mov	r2, r3
 8001d82:	2340      	movs	r3, #64	@ 0x40
 8001d84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	334d      	adds	r3, #77	@ 0x4d
 8001d96:	2205      	movs	r2, #5
 8001d98:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	331a      	adds	r3, #26
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3344      	adds	r3, #68	@ 0x44
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fd65 	bl	800389c <USB_HC_Halt>
 8001dd2:	e0b3      	b.n	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f001 fce0 	bl	80037a2 <USB_ReadChInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	f040 80a7 	bne.w	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3326      	adds	r3, #38	@ 0x26
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d11b      	bne.n	8001e3c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3344      	adds	r3, #68	@ 0x44
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	334d      	adds	r3, #77	@ 0x4d
 8001e28:	2204      	movs	r2, #4
 8001e2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fd31 	bl	800389c <USB_HC_Halt>
 8001e3a:	e03f      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3326      	adds	r3, #38	@ 0x26
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	3326      	adds	r3, #38	@ 0x26
 8001e62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d129      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3344      	adds	r3, #68	@ 0x44
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	799b      	ldrb	r3, [r3, #6]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HCD_HC_IN_IRQHandler+0xc2a>
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	331b      	adds	r3, #27
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d110      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	334d      	adds	r3, #77	@ 0x4d
 8001eaa:	2204      	movs	r2, #4
 8001eac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 fcf0 	bl	800389c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	331b      	adds	r3, #27
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d129      	bne.n	8001f26 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	331b      	adds	r3, #27
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	0151      	lsls	r1, r2, #5
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	440a      	add	r2, r1
 8001efc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f04:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	0151      	lsls	r1, r2, #5
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	440a      	add	r2, r1
 8001f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f20:	f043 0320 	orr.w	r3, r3, #32
 8001f24:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2310      	movs	r3, #16
 8001f36:	6093      	str	r3, [r2, #8]
 8001f38:	e000      	b.n	8001f3c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8001f3a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fc1e 	bl	80037a2 <USB_ReadChInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2304      	movs	r3, #4
 8001f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	334d      	adds	r3, #77	@ 0x4d
 8001f92:	2207      	movs	r2, #7
 8001f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fc7c 	bl	800389c <USB_HC_Halt>
 8001fa4:	f000 bc89 	b.w	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fbf6 	bl	80037a2 <USB_ReadChInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	f040 8082 	bne.w	80020c6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3319      	adds	r3, #25
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d124      	bne.n	8002034 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3319      	adds	r3, #25
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	334c      	adds	r3, #76	@ 0x4c
 800200e:	2202      	movs	r2, #2
 8002010:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	334d      	adds	r3, #77	@ 0x4d
 8002022:	2203      	movs	r2, #3
 8002024:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f001 fc34 	bl	800389c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	331a      	adds	r3, #26
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	f040 8437 	bne.w	80028ba <HCD_HC_OUT_IRQHandler+0x978>
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	331b      	adds	r3, #27
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 842b 	bne.w	80028ba <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3326      	adds	r3, #38	@ 0x26
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d009      	beq.n	800208e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	331b      	adds	r3, #27
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	334d      	adds	r3, #77	@ 0x4d
 800209e:	2203      	movs	r2, #3
 80020a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 fbf6 	bl	800389c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3344      	adds	r3, #68	@ 0x44
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e3f9      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 fb67 	bl	80037a2 <USB_ReadChInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020de:	d111      	bne.n	8002104 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ec:	461a      	mov	r2, r3
 80020ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f001 fbcd 	bl	800389c <USB_HC_Halt>
 8002102:	e3da      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fb48 	bl	80037a2 <USB_ReadChInterrupts>
 8002112:	4603      	mov	r3, r0
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d168      	bne.n	80021ee <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3344      	adds	r3, #68	@ 0x44
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f001 fb32 	bl	80037a2 <USB_ReadChInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002144:	2b40      	cmp	r3, #64	@ 0x40
 8002146:	d112      	bne.n	800216e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	3319      	adds	r3, #25
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002168:	461a      	mov	r2, r3
 800216a:	2340      	movs	r3, #64	@ 0x40
 800216c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	331b      	adds	r3, #27
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	331b      	adds	r3, #27
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	0151      	lsls	r1, r2, #5
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	440a      	add	r2, r1
 80021ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c4:	461a      	mov	r2, r3
 80021c6:	2301      	movs	r3, #1
 80021c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	334d      	adds	r3, #77	@ 0x4d
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fb58 	bl	800389c <USB_HC_Halt>
 80021ec:	e365      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f001 fad3 	bl	80037a2 <USB_ReadChInterrupts>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002202:	2b40      	cmp	r3, #64	@ 0x40
 8002204:	d139      	bne.n	800227a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	334d      	adds	r3, #77	@ 0x4d
 8002216:	2205      	movs	r2, #5
 8002218:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	331a      	adds	r3, #26
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3319      	adds	r3, #25
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3344      	adds	r3, #68	@ 0x44
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f001 fb1b 	bl	800389c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002272:	461a      	mov	r2, r3
 8002274:	2340      	movs	r3, #64	@ 0x40
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e31f      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f001 fa8d 	bl	80037a2 <USB_ReadChInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11a      	bne.n	80022c8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800229e:	461a      	mov	r2, r3
 80022a0:	2308      	movs	r3, #8
 80022a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	334d      	adds	r3, #77	@ 0x4d
 80022b4:	2206      	movs	r2, #6
 80022b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 faeb 	bl	800389c <USB_HC_Halt>
 80022c6:	e2f8      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fa66 	bl	80037a2 <USB_ReadChInterrupts>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d144      	bne.n	800236a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3344      	adds	r3, #68	@ 0x44
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	334d      	adds	r3, #77	@ 0x4d
 8002304:	2204      	movs	r2, #4
 8002306:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3319      	adds	r3, #25
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d114      	bne.n	8002348 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3318      	adds	r3, #24
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3319      	adds	r3, #25
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f001 faa3 	bl	800389c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	2310      	movs	r3, #16
 8002366:	6093      	str	r3, [r2, #8]
 8002368:	e2a7      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f001 fa15 	bl	80037a2 <USB_ReadChInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237e:	2b80      	cmp	r3, #128	@ 0x80
 8002380:	f040 8083 	bne.w	800248a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	799b      	ldrb	r3, [r3, #6]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d111      	bne.n	80023b0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	334d      	adds	r3, #77	@ 0x4d
 800239c:	2207      	movs	r2, #7
 800239e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 fa77 	bl	800389c <USB_HC_Halt>
 80023ae:	e062      	b.n	8002476 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3344      	adds	r3, #68	@ 0x44
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1c59      	adds	r1, r3, #1
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4403      	add	r3, r0
 80023d0:	3344      	adds	r3, #68	@ 0x44
 80023d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3344      	adds	r3, #68	@ 0x44
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d922      	bls.n	8002430 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3344      	adds	r3, #68	@ 0x44
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	334c      	adds	r3, #76	@ 0x4c
 800240e:	2204      	movs	r2, #4
 8002410:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	334c      	adds	r3, #76	@ 0x4c
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	4619      	mov	r1, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f001 fcb6 	bl	8003d9a <HAL_HCD_HC_NotifyURBChange_Callback>
 800242e:	e022      	b.n	8002476 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	334c      	adds	r3, #76	@ 0x4c
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800245a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002462:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002482:	461a      	mov	r2, r3
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	6093      	str	r3, [r2, #8]
 8002488:	e217      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f001 f985 	bl	80037a2 <USB_ReadChInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a2:	d11b      	bne.n	80024dc <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	334d      	adds	r3, #77	@ 0x4d
 80024b4:	2209      	movs	r2, #9
 80024b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 f9eb 	bl	800389c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d8:	6093      	str	r3, [r2, #8]
 80024da:	e1ee      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 f95c 	bl	80037a2 <USB_ReadChInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	f040 81df 	bne.w	80028b4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	2302      	movs	r3, #2
 8002506:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	334d      	adds	r3, #77	@ 0x4d
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	f040 8093 	bne.w	8002646 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334d      	adds	r3, #77	@ 0x4d
 8002530:	2202      	movs	r2, #2
 8002532:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	334c      	adds	r3, #76	@ 0x4c
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3326      	adds	r3, #38	@ 0x26
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d00b      	beq.n	8002576 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3326      	adds	r3, #38	@ 0x26
 800256e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002570:	2b03      	cmp	r3, #3
 8002572:	f040 8190 	bne.w	8002896 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	799b      	ldrb	r3, [r3, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	333d      	adds	r3, #61	@ 0x3d
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	333d      	adds	r3, #61	@ 0x3d
 80025a6:	4602      	mov	r2, r0
 80025a8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	799b      	ldrb	r3, [r3, #6]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 8171 	bne.w	8002896 <HCD_HC_OUT_IRQHandler+0x954>
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3334      	adds	r3, #52	@ 0x34
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8165 	beq.w	8002896 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3334      	adds	r3, #52	@ 0x34
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4403      	add	r3, r0
 80025ec:	3328      	adds	r3, #40	@ 0x28
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	440b      	add	r3, r1
 80025f2:	1e59      	subs	r1, r3, #1
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4403      	add	r3, r0
 8002602:	3328      	adds	r3, #40	@ 0x28
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	fbb1 f3f3 	udiv	r3, r1, r3
 800260a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 813f 	beq.w	8002896 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	333d      	adds	r3, #61	@ 0x3d
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	f083 0301 	eor.w	r3, r3, #1
 8002630:	b2d8      	uxtb	r0, r3
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	333d      	adds	r3, #61	@ 0x3d
 8002640:	4602      	mov	r2, r0
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e127      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	334d      	adds	r3, #77	@ 0x4d
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d120      	bne.n	800269e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	334d      	adds	r3, #77	@ 0x4d
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	331b      	adds	r3, #27
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b01      	cmp	r3, #1
 8002684:	f040 8107 	bne.w	8002896 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	@ 0x4c
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e0fb      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334d      	adds	r3, #77	@ 0x4d
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d13a      	bne.n	800272a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	334d      	adds	r3, #77	@ 0x4d
 80026c4:	2202      	movs	r2, #2
 80026c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	334c      	adds	r3, #76	@ 0x4c
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	331b      	adds	r3, #27
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	f040 80d1 	bne.w	8002896 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	331b      	adds	r3, #27
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	0151      	lsls	r1, r2, #5
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	440a      	add	r2, r1
 800271e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002726:	6053      	str	r3, [r2, #4]
 8002728:	e0b5      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334d      	adds	r3, #77	@ 0x4d
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d114      	bne.n	800276a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	334d      	adds	r3, #77	@ 0x4d
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	334c      	adds	r3, #76	@ 0x4c
 8002764:	2202      	movs	r2, #2
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e095      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334d      	adds	r3, #77	@ 0x4d
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d114      	bne.n	80027aa <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	334d      	adds	r3, #77	@ 0x4d
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	334c      	adds	r3, #76	@ 0x4c
 80027a4:	2205      	movs	r2, #5
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e075      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	334d      	adds	r3, #77	@ 0x4d
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b07      	cmp	r3, #7
 80027be:	d00a      	beq.n	80027d6 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334d      	adds	r3, #77	@ 0x4d
 80027d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027d2:	2b09      	cmp	r3, #9
 80027d4:	d170      	bne.n	80028b8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	334d      	adds	r3, #77	@ 0x4d
 80027e6:	2202      	movs	r2, #2
 80027e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3344      	adds	r3, #68	@ 0x44
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1c59      	adds	r1, r3, #1
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4403      	add	r3, r0
 800280a:	3344      	adds	r3, #68	@ 0x44
 800280c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3344      	adds	r3, #68	@ 0x44
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d914      	bls.n	800284e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3344      	adds	r3, #68	@ 0x44
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	334c      	adds	r3, #76	@ 0x4c
 8002848:	2204      	movs	r2, #4
 800284a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800284c:	e022      	b.n	8002894 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	334c      	adds	r3, #76	@ 0x4c
 800285e:	2202      	movs	r2, #2
 8002860:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002878:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002880:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002894:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	334c      	adds	r3, #76	@ 0x4c
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f001 fa74 	bl	8003d9a <HAL_HCD_HC_NotifyURBChange_Callback>
 80028b2:	e002      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80028b4:	bf00      	nop
 80028b6:	e000      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80028b8:	bf00      	nop
  }
}
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	0c5b      	lsrs	r3, r3, #17
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d004      	beq.n	8002906 <HCD_RXQLVL_IRQHandler+0x46>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	f000 80b6 	beq.w	8002a70 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002904:	e0b7      	b.n	8002a76 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80b3 	beq.w	8002a74 <HCD_RXQLVL_IRQHandler+0x1b4>
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	332c      	adds	r3, #44	@ 0x2c
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a7 	beq.w	8002a74 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3338      	adds	r3, #56	@ 0x38
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	18d1      	adds	r1, r2, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	3334      	adds	r3, #52	@ 0x34
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4299      	cmp	r1, r3
 8002950:	f200 8083 	bhi.w	8002a5a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	332c      	adds	r3, #44	@ 0x2c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	b292      	uxth	r2, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f000 feac 	bl	80036cc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	332c      	adds	r3, #44	@ 0x2c
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	18d1      	adds	r1, r2, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4403      	add	r3, r0
 8002998:	332c      	adds	r3, #44	@ 0x2c
 800299a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3338      	adds	r3, #56	@ 0x38
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	18d1      	adds	r1, r2, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4403      	add	r3, r0
 80029c0:	3338      	adds	r3, #56	@ 0x38
 80029c2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	0cdb      	lsrs	r3, r3, #19
 80029d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3328      	adds	r3, #40	@ 0x28
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d13f      	bne.n	8002a74 <HCD_RXQLVL_IRQHandler+0x1b4>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d03c      	beq.n	8002a74 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a10:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a18:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	333c      	adds	r3, #60	@ 0x3c
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2d8      	uxtb	r0, r3
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	333c      	adds	r3, #60	@ 0x3c
 8002a54:	4602      	mov	r2, r0
 8002a56:	701a      	strb	r2, [r3, #0]
      break;
 8002a58:	e00c      	b.n	8002a74 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	334c      	adds	r3, #76	@ 0x4c
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	701a      	strb	r2, [r3, #0]
      break;
 8002a6e:	e001      	b.n	8002a74 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002a74:	bf00      	nop
  }
}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	@ 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002aaa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d10b      	bne.n	8002ace <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d102      	bne.n	8002ac6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f001 f94e 	bl	8003d62 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d132      	bne.n	8002b3e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f043 0308 	orr.w	r3, r3, #8
 8002ade:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d126      	bne.n	8002b38 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7a5b      	ldrb	r3, [r3, #9]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d113      	bne.n	8002b1a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002af8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002afc:	d106      	bne.n	8002b0c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fe7b 	bl	8003800 <USB_InitFSLSPClkSel>
 8002b0a:	e011      	b.n	8002b30 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fe74 	bl	8003800 <USB_InitFSLSPClkSel>
 8002b18:	e00a      	b.n	8002b30 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	79db      	ldrb	r3, [r3, #7]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d106      	bne.n	8002b30 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002b2e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f001 f940 	bl	8003db6 <HAL_HCD_PortEnabled_Callback>
 8002b36:	e002      	b.n	8002b3e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f001 f94a 	bl	8003dd2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d103      	bne.n	8002b50 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f043 0320 	orr.w	r3, r3, #32
 8002b4e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e267      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b82:	4b88      	ldr	r3, [pc, #544]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b85      	ldr	r3, [pc, #532]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e242      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6d      	ldr	r3, [pc, #436]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6c      	ldr	r2, [pc, #432]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b69      	ldr	r3, [pc, #420]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a68      	ldr	r2, [pc, #416]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fd ff3a 	bl	8000a94 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fd ff36 	bl	8000a94 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e207      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5b      	ldr	r3, [pc, #364]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fd ff26 	bl	8000a94 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fd ff22 	bl	8000a94 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1f3      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b44      	ldr	r3, [pc, #272]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4937      	ldr	r1, [pc, #220]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b34      	ldr	r3, [pc, #208]	@ (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fd fedb 	bl	8000a94 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fd fed7 	bl	8000a94 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a8      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4925      	ldr	r1, [pc, #148]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fd feba 	bl	8000a94 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fd feb6 	bl	8000a94 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e187      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fd fe9a 	bl	8000a94 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fd fe96 	bl	8000a94 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e167      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fd fe83 	bl	8000a94 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	e00e      	b.n	8002db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fd fe7f 	bl	8000a94 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d907      	bls.n	8002db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e150      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b88      	ldr	r3, [pc, #544]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8097 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b81      	ldr	r3, [pc, #516]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b7d      	ldr	r3, [pc, #500]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dea:	4b7a      	ldr	r3, [pc, #488]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b77      	ldr	r3, [pc, #476]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b74      	ldr	r3, [pc, #464]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fd fe3f 	bl	8000a94 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fd fe3b 	bl	8000a94 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e40:	4b64      	ldr	r3, [pc, #400]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	4a63      	ldr	r2, [pc, #396]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x30c>
 8002e56:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e62:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e70:	4b58      	ldr	r3, [pc, #352]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a57      	ldr	r2, [pc, #348]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7c:	4b55      	ldr	r3, [pc, #340]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	4a54      	ldr	r2, [pc, #336]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fd fe00 	bl	8000a94 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fd fdfc 	bl	8000a94 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0cb      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b49      	ldr	r3, [pc, #292]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fd fdea 	bl	8000a94 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fd fde6 	bl	8000a94 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b5      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	4a38      	ldr	r2, [pc, #224]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a1 	beq.w	8003044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f02:	4b34      	ldr	r3, [pc, #208]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d05c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d141      	bne.n	8002f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b31      	ldr	r3, [pc, #196]	@ (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fd fdba 	bl	8000a94 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fd fdb6 	bl	8000a94 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e087      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	491b      	ldr	r1, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7fd fd8f 	bl	8000a94 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fd fd8b 	bl	8000a94 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x416>
 8002f98:	e054      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fd fd78 	bl	8000a94 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fd fd74 	bl	8000a94 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e038      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b68      	ldr	r3, [pc, #416]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3b      	ldr	r3, [pc, #236]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fd fca6 	bl	8000a94 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fd fca2 	bl	8000a94 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b25      	ldr	r3, [pc, #148]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	@ (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	@ (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fc06 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	08003eec 	.word	0x08003eec
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b094      	sub	sp, #80	@ 0x50
 8003226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003238:	4b79      	ldr	r3, [pc, #484]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d00d      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x40>
 8003244:	2b08      	cmp	r3, #8
 8003246:	f200 80e1 	bhi.w	800340c <HAL_RCC_GetSysClockFreq+0x1ec>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x3a>
 8003252:	e0db      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b73      	ldr	r3, [pc, #460]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x204>)
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003258:	e0db      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325a:	4b73      	ldr	r3, [pc, #460]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x208>)
 800325c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800325e:	e0d8      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003260:	4b6f      	ldr	r3, [pc, #444]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003268:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326a:	4b6d      	ldr	r3, [pc, #436]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d063      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003276:	4b6a      	ldr	r3, [pc, #424]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	2200      	movs	r2, #0
 800327e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003280:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003288:	633b      	str	r3, [r7, #48]	@ 0x30
 800328a:	2300      	movs	r3, #0
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
 800328e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003292:	4622      	mov	r2, r4
 8003294:	462b      	mov	r3, r5
 8003296:	f04f 0000 	mov.w	r0, #0
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	0159      	lsls	r1, r3, #5
 80032a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a4:	0150      	lsls	r0, r2, #5
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4621      	mov	r1, r4
 80032ac:	1a51      	subs	r1, r2, r1
 80032ae:	6139      	str	r1, [r7, #16]
 80032b0:	4629      	mov	r1, r5
 80032b2:	eb63 0301 	sbc.w	r3, r3, r1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032c4:	4659      	mov	r1, fp
 80032c6:	018b      	lsls	r3, r1, #6
 80032c8:	4651      	mov	r1, sl
 80032ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ce:	4651      	mov	r1, sl
 80032d0:	018a      	lsls	r2, r1, #6
 80032d2:	4651      	mov	r1, sl
 80032d4:	ebb2 0801 	subs.w	r8, r2, r1
 80032d8:	4659      	mov	r1, fp
 80032da:	eb63 0901 	sbc.w	r9, r3, r1
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f2:	4690      	mov	r8, r2
 80032f4:	4699      	mov	r9, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	eb18 0303 	adds.w	r3, r8, r3
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	462b      	mov	r3, r5
 8003300:	eb49 0303 	adc.w	r3, r9, r3
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003312:	4629      	mov	r1, r5
 8003314:	024b      	lsls	r3, r1, #9
 8003316:	4621      	mov	r1, r4
 8003318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800331c:	4621      	mov	r1, r4
 800331e:	024a      	lsls	r2, r1, #9
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003326:	2200      	movs	r2, #0
 8003328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800332a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800332c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003330:	f7fc ff4a 	bl	80001c8 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800333c:	e058      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333e:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	2200      	movs	r2, #0
 8003346:	4618      	mov	r0, r3
 8003348:	4611      	mov	r1, r2
 800334a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800334e:	623b      	str	r3, [r7, #32]
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
 8003354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	f04f 0000 	mov.w	r0, #0
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	0159      	lsls	r1, r3, #5
 8003366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336a:	0150      	lsls	r0, r2, #5
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4641      	mov	r1, r8
 8003372:	ebb2 0a01 	subs.w	sl, r2, r1
 8003376:	4649      	mov	r1, r9
 8003378:	eb63 0b01 	sbc.w	fp, r3, r1
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800338c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003390:	ebb2 040a 	subs.w	r4, r2, sl
 8003394:	eb63 050b 	sbc.w	r5, r3, fp
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	00eb      	lsls	r3, r5, #3
 80033a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a6:	00e2      	lsls	r2, r4, #3
 80033a8:	4614      	mov	r4, r2
 80033aa:	461d      	mov	r5, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	18e3      	adds	r3, r4, r3
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	464b      	mov	r3, r9
 80033b4:	eb45 0303 	adc.w	r3, r5, r3
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c6:	4629      	mov	r1, r5
 80033c8:	028b      	lsls	r3, r1, #10
 80033ca:	4621      	mov	r1, r4
 80033cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d0:	4621      	mov	r1, r4
 80033d2:	028a      	lsls	r2, r1, #10
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033da:	2200      	movs	r2, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	61fa      	str	r2, [r7, #28]
 80033e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e4:	f7fc fef0 	bl	80001c8 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x204>)
 800340e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003414:	4618      	mov	r0, r3
 8003416:	3750      	adds	r7, #80	@ 0x50
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	00f42400 	.word	0x00f42400
 8003428:	007a1200 	.word	0x007a1200

0800342c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003432:	f7fd fb2f 	bl	8000a94 <HAL_GetTick>
 8003436:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003438:	4b5d      	ldr	r3, [pc, #372]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a5c      	ldr	r2, [pc, #368]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003446:	f7fd fb25 	bl	8000a94 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0a7      	b.n	80035a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003458:	4b55      	ldr	r3, [pc, #340]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003464:	4b52      	ldr	r3, [pc, #328]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a51      	ldr	r2, [pc, #324]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800346a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003470:	f7fd fb10 	bl	8000a94 <HAL_GetTick>
 8003474:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003476:	4b4e      	ldr	r3, [pc, #312]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fd fb09 	bl	8000a94 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e089      	b.n	80035a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003494:	4b46      	ldr	r3, [pc, #280]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ee      	bne.n	800347e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80034a0:	f7fd faf8 	bl	8000a94 <HAL_GetTick>
 80034a4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80034a6:	4b42      	ldr	r3, [pc, #264]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a41      	ldr	r2, [pc, #260]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 80034ac:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 80034b0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fd faee 	bl	8000a94 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e070      	b.n	80035a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80034c6:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80034d2:	f7fd fadf 	bl	8000a94 <HAL_GetTick>
 80034d6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80034d8:	4b35      	ldr	r3, [pc, #212]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a34      	ldr	r2, [pc, #208]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 80034de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fd fad5 	bl	8000a94 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e057      	b.n	80035a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80034f8:	4b2d      	ldr	r3, [pc, #180]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003504:	f7fd fac6 	bl	8000a94 <HAL_GetTick>
 8003508:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800350a:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a28      	ldr	r2, [pc, #160]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003510:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003514:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003518:	f7fd fabc 	bl	8000a94 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e03e      	b.n	80035a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800352a:	4b21      	ldr	r3, [pc, #132]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003536:	4b1e      	ldr	r3, [pc, #120]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003538:	4a1e      	ldr	r2, [pc, #120]	@ (80035b4 <HAL_RCC_DeInit+0x188>)
 800353a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800353c:	4b1c      	ldr	r3, [pc, #112]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800353e:	4a1e      	ldr	r2, [pc, #120]	@ (80035b8 <HAL_RCC_DeInit+0x18c>)
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003544:	4b1a      	ldr	r3, [pc, #104]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800354a:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800354e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003550:	4b17      	ldr	r3, [pc, #92]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a16      	ldr	r2, [pc, #88]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800355a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 800355c:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a13      	ldr	r2, [pc, #76]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003562:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8003566:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800356e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003572:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003574:	4b0e      	ldr	r3, [pc, #56]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003578:	4a0d      	ldr	r2, [pc, #52]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003584:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <HAL_RCC_DeInit+0x184>)
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800358a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800358c:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <HAL_RCC_DeInit+0x190>)
 800358e:	4a0c      	ldr	r2, [pc, #48]	@ (80035c0 <HAL_RCC_DeInit+0x194>)
 8003590:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003592:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <HAL_RCC_DeInit+0x198>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fa38 	bl	8000a0c <HAL_InitTick>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40023800 	.word	0x40023800
 80035b4:	04003010 	.word	0x04003010
 80035b8:	20003000 	.word	0x20003000
 80035bc:	20000000 	.word	0x20000000
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	20000004 	.word	0x20000004

080035c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3301      	adds	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003626:	d901      	bls.n	800362c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e01b      	b.n	8003664 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	daf2      	bge.n	800361a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	019b      	lsls	r3, r3, #6
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003650:	d901      	bls.n	8003656 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e006      	b.n	8003664 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b20      	cmp	r3, #32
 8003660:	d0f0      	beq.n	8003644 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3301      	adds	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003688:	d901      	bls.n	800368e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e018      	b.n	80036c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	daf2      	bge.n	800367c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2210      	movs	r2, #16
 800369e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036ac:	d901      	bls.n	80036b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e006      	b.n	80036c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d0f0      	beq.n	80036a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b08b      	sub	sp, #44	@ 0x2c
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	e014      	b.n	8003722 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	601a      	str	r2, [r3, #0]
    pDest++;
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	3301      	adds	r3, #1
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	3301      	adds	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	3301      	adds	r3, #1
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	3301      	adds	r3, #1
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	3301      	adds	r3, #1
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	6a3a      	ldr	r2, [r7, #32]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	429a      	cmp	r2, r3
 8003728:	d3e6      	bcc.n	80036f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800372a:	8bfb      	ldrh	r3, [r7, #30]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01e      	beq.n	800376e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800373a:	461a      	mov	r2, r3
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	b2da      	uxtb	r2, r3
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	701a      	strb	r2, [r3, #0]
      i++;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	3301      	adds	r3, #1
 800375a:	623b      	str	r3, [r7, #32]
      pDest++;
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	3301      	adds	r3, #1
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003762:	8bfb      	ldrh	r3, [r7, #30]
 8003764:	3b01      	subs	r3, #1
 8003766:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003768:	8bfb      	ldrh	r3, [r7, #30]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ea      	bne.n	8003744 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003770:	4618      	mov	r0, r3
 8003772:	372c      	adds	r7, #44	@ 0x2c
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80037d6:	68bb      	ldr	r3, [r7, #8]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0301 	and.w	r3, r3, #1
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003848:	461a      	mov	r2, r3
 800384a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800384e:	6053      	str	r3, [r2, #4]
 8003850:	e00c      	b.n	800386c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d107      	bne.n	8003868 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800385e:	461a      	mov	r2, r3
 8003860:	f241 7370 	movw	r3, #6000	@ 0x1770
 8003864:	6053      	str	r3, [r2, #4]
 8003866:	e001      	b.n	800386c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	b29b      	uxth	r3, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	@ 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0fdb      	lsrs	r3, r3, #31
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0fdb      	lsrs	r3, r3, #31
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d10d      	bne.n	800391e <USB_HC_Halt+0x82>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <USB_HC_Halt+0x82>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d002      	beq.n	800391a <USB_HC_Halt+0x7e>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d101      	bne.n	800391e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e0d8      	b.n	8003ad0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <USB_HC_Halt+0x8e>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d173      	bne.n	8003a12 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	440a      	add	r2, r1
 8003940:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003944:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003948:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d14a      	bne.n	80039ec <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d133      	bne.n	80039ca <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	0151      	lsls	r1, r2, #5
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	440a      	add	r2, r1
 8003978:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800397c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003980:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	0151      	lsls	r1, r2, #5
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	440a      	add	r2, r1
 8003998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800399c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039a0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3301      	adds	r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039ae:	d82e      	bhi.n	8003a0e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039c6:	d0ec      	beq.n	80039a2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80039c8:	e081      	b.n	8003ace <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80039ea:	e070      	b.n	8003ace <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a0a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003a0c:	e05f      	b.n	8003ace <USB_HC_Halt+0x232>
            break;
 8003a0e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003a10:	e05d      	b.n	8003ace <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	0151      	lsls	r1, r2, #5
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	440a      	add	r2, r1
 8003a28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a30:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d133      	bne.n	8003aaa <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a60:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a80:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3301      	adds	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a8e:	d81d      	bhi.n	8003acc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aa6:	d0ec      	beq.n	8003a82 <USB_HC_Halt+0x1e6>
 8003aa8:	e011      	b.n	8003ace <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ac4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e000      	b.n	8003ace <USB_HC_Halt+0x232>
          break;
 8003acc:	bf00      	nop
    }
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3724      	adds	r7, #36	@ 0x24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fd7a 	bl	80035ea <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003af6:	2110      	movs	r1, #16
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fd87 	bl	800360c <USB_FlushTxFifo>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fdb1 	bl	8003670 <USB_FlushRxFifo>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	e01f      	b.n	8003b5e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b52:	461a      	mov	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d9dc      	bls.n	8003b1e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e034      	b.n	8003bd4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bb0:	d80c      	bhi.n	8003bcc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bc8:	d0ec      	beq.n	8003ba4 <USB_StopHost+0xc8>
 8003bca:	e000      	b.n	8003bce <USB_StopHost+0xf2>
        break;
 8003bcc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b0f      	cmp	r3, #15
 8003bd8:	d9c7      	bls.n	8003b6a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f04f 32ff 	mov.w	r2, #4294967295
 8003bee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fce9 	bl	80035c8 <USB_EnableGlobalInt>

  return ret;
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f804 	bl	8003c24 <USBH_HandleSof>
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b0b      	cmp	r3, #11
 8003c34:	d10a      	bne.n	8003c4c <USBH_HandleSof+0x28>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8003c64:	bf00      	nop
}
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8003c88:	bf00      	nop
}
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f883 	bl	8003dee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	791b      	ldrb	r3, [r3, #4]
 8003cec:	4619      	mov	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f80b 	bl	8003d0a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	795b      	ldrb	r3, [r3, #5]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f805 	bl	8003d0a <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d80d      	bhi.n	8003d38 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	33e0      	adds	r3, #224	@ 0xe0
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	33e0      	adds	r3, #224	@ 0xe0
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff53 	bl	8003c00 <USBH_LL_IncTimer>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff8f 	bl	8003c94 <USBH_LL_Connect>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff98 	bl	8003cc2 <USBH_LL_Disconnect>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70fb      	strb	r3, [r7, #3]
 8003da6:	4613      	mov	r3, r2
 8003da8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff45 	bl	8003c54 <USBH_LL_PortEnabled>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff45 	bl	8003c70 <USBH_LL_PortDisabled>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd fa16 	bl	8001236 <HAL_HCD_Stop>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f807 	bl	8003e24 <USBH_Get_USB_Status>
 8003e16:	4603      	mov	r3, r0
 8003e18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d817      	bhi.n	8003e68 <USBH_Get_USB_Status+0x44>
 8003e38:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <USBH_Get_USB_Status+0x1c>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e57 	.word	0x08003e57
 8003e48:	08003e5d 	.word	0x08003e5d
 8003e4c:	08003e63 	.word	0x08003e63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]
    break;
 8003e54:	e00b      	b.n	8003e6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003e56:	2302      	movs	r3, #2
 8003e58:	73fb      	strb	r3, [r7, #15]
    break;
 8003e5a:	e008      	b.n	8003e6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8003e60:	e005      	b.n	8003e6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8003e62:	2302      	movs	r3, #2
 8003e64:	73fb      	strb	r3, [r7, #15]
    break;
 8003e66:	e002      	b.n	8003e6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8003e6c:	bf00      	nop
  }
  return usb_status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <memset>:
 8003e7c:	4402      	add	r2, r0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d100      	bne.n	8003e86 <memset+0xa>
 8003e84:	4770      	bx	lr
 8003e86:	f803 1b01 	strb.w	r1, [r3], #1
 8003e8a:	e7f9      	b.n	8003e80 <memset+0x4>

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ec4 <__libc_init_array+0x38>)
 8003e90:	4c0d      	ldr	r4, [pc, #52]	@ (8003ec8 <__libc_init_array+0x3c>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	2600      	movs	r6, #0
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003ecc <__libc_init_array+0x40>)
 8003e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ed0 <__libc_init_array+0x44>)
 8003ea0:	f000 f818 	bl	8003ed4 <_init>
 8003ea4:	1b64      	subs	r4, r4, r5
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08003f04 	.word	0x08003f04
 8003ec8:	08003f04 	.word	0x08003f04
 8003ecc:	08003f04 	.word	0x08003f04
 8003ed0:	08003f08 	.word	0x08003f08

08003ed4 <_init>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr

08003ee0 <_fini>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr
