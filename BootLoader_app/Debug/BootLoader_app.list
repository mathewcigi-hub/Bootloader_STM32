
BootLoader_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004460  08008188  08008188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800c5e8  0800c5e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c61c  0800c61c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c61c  0800c61c  0000561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c624  0800c624  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c624  0800c624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c628  0800c628  00005628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800c62c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000550  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b8  200005b8  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b544  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000223f  00000000  00000000  000115dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  00013820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000717  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225b9  00000000  00000000  000148d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c144  00000000  00000000  00036e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cafad  00000000  00000000  00042fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010df81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cec  00000000  00000000  0010dfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00110cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	@ (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	@ (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	20000068 	.word	0x20000068
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800c5d0 	.word	0x0800c5d0

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	@ (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	@ (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	2000006c 	.word	0x2000006c
 80081c4:	0800c5d0 	.word	0x0800c5d0

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b988 	b.w	80084f0 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9d08      	ldr	r5, [sp, #32]
 80081fe:	468e      	mov	lr, r1
 8008200:	4604      	mov	r4, r0
 8008202:	4688      	mov	r8, r1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d14a      	bne.n	800829e <__udivmoddi4+0xa6>
 8008208:	428a      	cmp	r2, r1
 800820a:	4617      	mov	r7, r2
 800820c:	d962      	bls.n	80082d4 <__udivmoddi4+0xdc>
 800820e:	fab2 f682 	clz	r6, r2
 8008212:	b14e      	cbz	r6, 8008228 <__udivmoddi4+0x30>
 8008214:	f1c6 0320 	rsb	r3, r6, #32
 8008218:	fa01 f806 	lsl.w	r8, r1, r6
 800821c:	fa20 f303 	lsr.w	r3, r0, r3
 8008220:	40b7      	lsls	r7, r6
 8008222:	ea43 0808 	orr.w	r8, r3, r8
 8008226:	40b4      	lsls	r4, r6
 8008228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800822c:	fa1f fc87 	uxth.w	ip, r7
 8008230:	fbb8 f1fe 	udiv	r1, r8, lr
 8008234:	0c23      	lsrs	r3, r4, #16
 8008236:	fb0e 8811 	mls	r8, lr, r1, r8
 800823a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800823e:	fb01 f20c 	mul.w	r2, r1, ip
 8008242:	429a      	cmp	r2, r3
 8008244:	d909      	bls.n	800825a <__udivmoddi4+0x62>
 8008246:	18fb      	adds	r3, r7, r3
 8008248:	f101 30ff 	add.w	r0, r1, #4294967295
 800824c:	f080 80ea 	bcs.w	8008424 <__udivmoddi4+0x22c>
 8008250:	429a      	cmp	r2, r3
 8008252:	f240 80e7 	bls.w	8008424 <__udivmoddi4+0x22c>
 8008256:	3902      	subs	r1, #2
 8008258:	443b      	add	r3, r7
 800825a:	1a9a      	subs	r2, r3, r2
 800825c:	b2a3      	uxth	r3, r4
 800825e:	fbb2 f0fe 	udiv	r0, r2, lr
 8008262:	fb0e 2210 	mls	r2, lr, r0, r2
 8008266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800826a:	fb00 fc0c 	mul.w	ip, r0, ip
 800826e:	459c      	cmp	ip, r3
 8008270:	d909      	bls.n	8008286 <__udivmoddi4+0x8e>
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	f100 32ff 	add.w	r2, r0, #4294967295
 8008278:	f080 80d6 	bcs.w	8008428 <__udivmoddi4+0x230>
 800827c:	459c      	cmp	ip, r3
 800827e:	f240 80d3 	bls.w	8008428 <__udivmoddi4+0x230>
 8008282:	443b      	add	r3, r7
 8008284:	3802      	subs	r0, #2
 8008286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800828a:	eba3 030c 	sub.w	r3, r3, ip
 800828e:	2100      	movs	r1, #0
 8008290:	b11d      	cbz	r5, 800829a <__udivmoddi4+0xa2>
 8008292:	40f3      	lsrs	r3, r6
 8008294:	2200      	movs	r2, #0
 8008296:	e9c5 3200 	strd	r3, r2, [r5]
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	428b      	cmp	r3, r1
 80082a0:	d905      	bls.n	80082ae <__udivmoddi4+0xb6>
 80082a2:	b10d      	cbz	r5, 80082a8 <__udivmoddi4+0xb0>
 80082a4:	e9c5 0100 	strd	r0, r1, [r5]
 80082a8:	2100      	movs	r1, #0
 80082aa:	4608      	mov	r0, r1
 80082ac:	e7f5      	b.n	800829a <__udivmoddi4+0xa2>
 80082ae:	fab3 f183 	clz	r1, r3
 80082b2:	2900      	cmp	r1, #0
 80082b4:	d146      	bne.n	8008344 <__udivmoddi4+0x14c>
 80082b6:	4573      	cmp	r3, lr
 80082b8:	d302      	bcc.n	80082c0 <__udivmoddi4+0xc8>
 80082ba:	4282      	cmp	r2, r0
 80082bc:	f200 8105 	bhi.w	80084ca <__udivmoddi4+0x2d2>
 80082c0:	1a84      	subs	r4, r0, r2
 80082c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80082c6:	2001      	movs	r0, #1
 80082c8:	4690      	mov	r8, r2
 80082ca:	2d00      	cmp	r5, #0
 80082cc:	d0e5      	beq.n	800829a <__udivmoddi4+0xa2>
 80082ce:	e9c5 4800 	strd	r4, r8, [r5]
 80082d2:	e7e2      	b.n	800829a <__udivmoddi4+0xa2>
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	f000 8090 	beq.w	80083fa <__udivmoddi4+0x202>
 80082da:	fab2 f682 	clz	r6, r2
 80082de:	2e00      	cmp	r6, #0
 80082e0:	f040 80a4 	bne.w	800842c <__udivmoddi4+0x234>
 80082e4:	1a8a      	subs	r2, r1, r2
 80082e6:	0c03      	lsrs	r3, r0, #16
 80082e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80082ec:	b280      	uxth	r0, r0
 80082ee:	b2bc      	uxth	r4, r7
 80082f0:	2101      	movs	r1, #1
 80082f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80082f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80082fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082fe:	fb04 f20c 	mul.w	r2, r4, ip
 8008302:	429a      	cmp	r2, r3
 8008304:	d907      	bls.n	8008316 <__udivmoddi4+0x11e>
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800830c:	d202      	bcs.n	8008314 <__udivmoddi4+0x11c>
 800830e:	429a      	cmp	r2, r3
 8008310:	f200 80e0 	bhi.w	80084d4 <__udivmoddi4+0x2dc>
 8008314:	46c4      	mov	ip, r8
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	fbb3 f2fe 	udiv	r2, r3, lr
 800831c:	fb0e 3312 	mls	r3, lr, r2, r3
 8008320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008324:	fb02 f404 	mul.w	r4, r2, r4
 8008328:	429c      	cmp	r4, r3
 800832a:	d907      	bls.n	800833c <__udivmoddi4+0x144>
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	f102 30ff 	add.w	r0, r2, #4294967295
 8008332:	d202      	bcs.n	800833a <__udivmoddi4+0x142>
 8008334:	429c      	cmp	r4, r3
 8008336:	f200 80ca 	bhi.w	80084ce <__udivmoddi4+0x2d6>
 800833a:	4602      	mov	r2, r0
 800833c:	1b1b      	subs	r3, r3, r4
 800833e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008342:	e7a5      	b.n	8008290 <__udivmoddi4+0x98>
 8008344:	f1c1 0620 	rsb	r6, r1, #32
 8008348:	408b      	lsls	r3, r1
 800834a:	fa22 f706 	lsr.w	r7, r2, r6
 800834e:	431f      	orrs	r7, r3
 8008350:	fa0e f401 	lsl.w	r4, lr, r1
 8008354:	fa20 f306 	lsr.w	r3, r0, r6
 8008358:	fa2e fe06 	lsr.w	lr, lr, r6
 800835c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008360:	4323      	orrs	r3, r4
 8008362:	fa00 f801 	lsl.w	r8, r0, r1
 8008366:	fa1f fc87 	uxth.w	ip, r7
 800836a:	fbbe f0f9 	udiv	r0, lr, r9
 800836e:	0c1c      	lsrs	r4, r3, #16
 8008370:	fb09 ee10 	mls	lr, r9, r0, lr
 8008374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008378:	fb00 fe0c 	mul.w	lr, r0, ip
 800837c:	45a6      	cmp	lr, r4
 800837e:	fa02 f201 	lsl.w	r2, r2, r1
 8008382:	d909      	bls.n	8008398 <__udivmoddi4+0x1a0>
 8008384:	193c      	adds	r4, r7, r4
 8008386:	f100 3aff 	add.w	sl, r0, #4294967295
 800838a:	f080 809c 	bcs.w	80084c6 <__udivmoddi4+0x2ce>
 800838e:	45a6      	cmp	lr, r4
 8008390:	f240 8099 	bls.w	80084c6 <__udivmoddi4+0x2ce>
 8008394:	3802      	subs	r0, #2
 8008396:	443c      	add	r4, r7
 8008398:	eba4 040e 	sub.w	r4, r4, lr
 800839c:	fa1f fe83 	uxth.w	lr, r3
 80083a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80083a4:	fb09 4413 	mls	r4, r9, r3, r4
 80083a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80083ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80083b0:	45a4      	cmp	ip, r4
 80083b2:	d908      	bls.n	80083c6 <__udivmoddi4+0x1ce>
 80083b4:	193c      	adds	r4, r7, r4
 80083b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80083ba:	f080 8082 	bcs.w	80084c2 <__udivmoddi4+0x2ca>
 80083be:	45a4      	cmp	ip, r4
 80083c0:	d97f      	bls.n	80084c2 <__udivmoddi4+0x2ca>
 80083c2:	3b02      	subs	r3, #2
 80083c4:	443c      	add	r4, r7
 80083c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80083ca:	eba4 040c 	sub.w	r4, r4, ip
 80083ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80083d2:	4564      	cmp	r4, ip
 80083d4:	4673      	mov	r3, lr
 80083d6:	46e1      	mov	r9, ip
 80083d8:	d362      	bcc.n	80084a0 <__udivmoddi4+0x2a8>
 80083da:	d05f      	beq.n	800849c <__udivmoddi4+0x2a4>
 80083dc:	b15d      	cbz	r5, 80083f6 <__udivmoddi4+0x1fe>
 80083de:	ebb8 0203 	subs.w	r2, r8, r3
 80083e2:	eb64 0409 	sbc.w	r4, r4, r9
 80083e6:	fa04 f606 	lsl.w	r6, r4, r6
 80083ea:	fa22 f301 	lsr.w	r3, r2, r1
 80083ee:	431e      	orrs	r6, r3
 80083f0:	40cc      	lsrs	r4, r1
 80083f2:	e9c5 6400 	strd	r6, r4, [r5]
 80083f6:	2100      	movs	r1, #0
 80083f8:	e74f      	b.n	800829a <__udivmoddi4+0xa2>
 80083fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80083fe:	0c01      	lsrs	r1, r0, #16
 8008400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008404:	b280      	uxth	r0, r0
 8008406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800840a:	463b      	mov	r3, r7
 800840c:	4638      	mov	r0, r7
 800840e:	463c      	mov	r4, r7
 8008410:	46b8      	mov	r8, r7
 8008412:	46be      	mov	lr, r7
 8008414:	2620      	movs	r6, #32
 8008416:	fbb1 f1f7 	udiv	r1, r1, r7
 800841a:	eba2 0208 	sub.w	r2, r2, r8
 800841e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008422:	e766      	b.n	80082f2 <__udivmoddi4+0xfa>
 8008424:	4601      	mov	r1, r0
 8008426:	e718      	b.n	800825a <__udivmoddi4+0x62>
 8008428:	4610      	mov	r0, r2
 800842a:	e72c      	b.n	8008286 <__udivmoddi4+0x8e>
 800842c:	f1c6 0220 	rsb	r2, r6, #32
 8008430:	fa2e f302 	lsr.w	r3, lr, r2
 8008434:	40b7      	lsls	r7, r6
 8008436:	40b1      	lsls	r1, r6
 8008438:	fa20 f202 	lsr.w	r2, r0, r2
 800843c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008440:	430a      	orrs	r2, r1
 8008442:	fbb3 f8fe 	udiv	r8, r3, lr
 8008446:	b2bc      	uxth	r4, r7
 8008448:	fb0e 3318 	mls	r3, lr, r8, r3
 800844c:	0c11      	lsrs	r1, r2, #16
 800844e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008452:	fb08 f904 	mul.w	r9, r8, r4
 8008456:	40b0      	lsls	r0, r6
 8008458:	4589      	cmp	r9, r1
 800845a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800845e:	b280      	uxth	r0, r0
 8008460:	d93e      	bls.n	80084e0 <__udivmoddi4+0x2e8>
 8008462:	1879      	adds	r1, r7, r1
 8008464:	f108 3cff 	add.w	ip, r8, #4294967295
 8008468:	d201      	bcs.n	800846e <__udivmoddi4+0x276>
 800846a:	4589      	cmp	r9, r1
 800846c:	d81f      	bhi.n	80084ae <__udivmoddi4+0x2b6>
 800846e:	eba1 0109 	sub.w	r1, r1, r9
 8008472:	fbb1 f9fe 	udiv	r9, r1, lr
 8008476:	fb09 f804 	mul.w	r8, r9, r4
 800847a:	fb0e 1119 	mls	r1, lr, r9, r1
 800847e:	b292      	uxth	r2, r2
 8008480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008484:	4542      	cmp	r2, r8
 8008486:	d229      	bcs.n	80084dc <__udivmoddi4+0x2e4>
 8008488:	18ba      	adds	r2, r7, r2
 800848a:	f109 31ff 	add.w	r1, r9, #4294967295
 800848e:	d2c4      	bcs.n	800841a <__udivmoddi4+0x222>
 8008490:	4542      	cmp	r2, r8
 8008492:	d2c2      	bcs.n	800841a <__udivmoddi4+0x222>
 8008494:	f1a9 0102 	sub.w	r1, r9, #2
 8008498:	443a      	add	r2, r7
 800849a:	e7be      	b.n	800841a <__udivmoddi4+0x222>
 800849c:	45f0      	cmp	r8, lr
 800849e:	d29d      	bcs.n	80083dc <__udivmoddi4+0x1e4>
 80084a0:	ebbe 0302 	subs.w	r3, lr, r2
 80084a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80084a8:	3801      	subs	r0, #1
 80084aa:	46e1      	mov	r9, ip
 80084ac:	e796      	b.n	80083dc <__udivmoddi4+0x1e4>
 80084ae:	eba7 0909 	sub.w	r9, r7, r9
 80084b2:	4449      	add	r1, r9
 80084b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80084b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80084bc:	fb09 f804 	mul.w	r8, r9, r4
 80084c0:	e7db      	b.n	800847a <__udivmoddi4+0x282>
 80084c2:	4673      	mov	r3, lr
 80084c4:	e77f      	b.n	80083c6 <__udivmoddi4+0x1ce>
 80084c6:	4650      	mov	r0, sl
 80084c8:	e766      	b.n	8008398 <__udivmoddi4+0x1a0>
 80084ca:	4608      	mov	r0, r1
 80084cc:	e6fd      	b.n	80082ca <__udivmoddi4+0xd2>
 80084ce:	443b      	add	r3, r7
 80084d0:	3a02      	subs	r2, #2
 80084d2:	e733      	b.n	800833c <__udivmoddi4+0x144>
 80084d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80084d8:	443b      	add	r3, r7
 80084da:	e71c      	b.n	8008316 <__udivmoddi4+0x11e>
 80084dc:	4649      	mov	r1, r9
 80084de:	e79c      	b.n	800841a <__udivmoddi4+0x222>
 80084e0:	eba1 0109 	sub.w	r1, r1, r9
 80084e4:	46c4      	mov	ip, r8
 80084e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80084ea:	fb09 f804 	mul.w	r8, r9, r4
 80084ee:	e7c4      	b.n	800847a <__udivmoddi4+0x282>

080084f0 <__aeabi_idiv0>:
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop

080084f4 <MX_GPIO_Init>:
#include "main.h"
#include <stdio.h>

void MX_GPIO_Init(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084fa:	2300      	movs	r3, #0
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	4b15      	ldr	r3, [pc, #84]	@ (8008554 <MX_GPIO_Init+0x60>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008502:	4a14      	ldr	r2, [pc, #80]	@ (8008554 <MX_GPIO_Init+0x60>)
 8008504:	f043 0308 	orr.w	r3, r3, #8
 8008508:	6313      	str	r3, [r2, #48]	@ 0x30
 800850a:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <MX_GPIO_Init+0x60>)
 800850c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	609a      	str	r2, [r3, #8]
 8008520:	60da      	str	r2, [r3, #12]
 8008522:	611a      	str	r2, [r3, #16]

  // PD12..PD15 as push-pull outputs (Discovery LEDs)
  GPIO_InitStruct.Pin   = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008524:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008528:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800852a:	2301      	movs	r3, #1
 800852c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008536:	1d3b      	adds	r3, r7, #4
 8008538:	4619      	mov	r1, r3
 800853a:	4807      	ldr	r0, [pc, #28]	@ (8008558 <MX_GPIO_Init+0x64>)
 800853c:	f000 fb68 	bl	8008c10 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008540:	2200      	movs	r2, #0
 8008542:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008546:	4804      	ldr	r0, [pc, #16]	@ (8008558 <MX_GPIO_Init+0x64>)
 8008548:	f000 fcfe 	bl	8008f48 <HAL_GPIO_WritePin>
}
 800854c:	bf00      	nop
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	40023800 	.word	0x40023800
 8008558:	40020c00 	.word	0x40020c00

0800855c <delay_ms>:




static void delay_ms(uint32_t ms) {
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < (ms * 12000U); ++i) { __NOP(); }
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	e003      	b.n	8008572 <delay_ms+0x16>
 800856a:	bf00      	nop
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3301      	adds	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	429a      	cmp	r2, r3
 8008580:	d3f3      	bcc.n	800856a <delay_ms+0xe>
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <app_led_toggle>:

static void app_led_toggle(void) { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); } // green
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
 8008594:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008598:	4802      	ldr	r0, [pc, #8]	@ (80085a4 <app_led_toggle+0x14>)
 800859a:	f000 fcee 	bl	8008f7a <HAL_GPIO_TogglePin>
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	40020c00 	.word	0x40020c00

080085a8 <relocate_vector_table_to_app>:

static void relocate_vector_table_to_app(void) {
 80085a8:	b480      	push	{r7}
 80085aa:	af00      	add	r7, sp, #0
    // ensure VTOR points to 0x08008000 when launched by debugger or reset
    SCB->VTOR = 0x08008000UL;
 80085ac:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <relocate_vector_table_to_app+0x20>)
 80085ae:	4a07      	ldr	r2, [pc, #28]	@ (80085cc <relocate_vector_table_to_app+0x24>)
 80085b0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80085b2:	f3bf 8f4f 	dsb	sy
}
 80085b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80085b8:	f3bf 8f6f 	isb	sy
}
 80085bc:	bf00      	nop
    __DSB(); __ISB();
}
 80085be:	bf00      	nop
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	e000ed00 	.word	0xe000ed00
 80085cc:	08008000 	.word	0x08008000

080085d0 <main>:

int main(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
    HAL_Init();
 80085d4:	f000 f9c4 	bl	8008960 <HAL_Init>
    SystemClock_Config();
 80085d8:	f000 f810 	bl	80085fc <SystemClock_Config>
    MX_GPIO_Init();
 80085dc:	f7ff ff8a 	bl	80084f4 <MX_GPIO_Init>

    // if started by debugger/reset (not via bootloader), set VTOR here
    relocate_vector_table_to_app();
 80085e0:	f7ff ffe2 	bl	80085a8 <relocate_vector_table_to_app>

    printf("Application started at 0x08008000\r\n");
 80085e4:	4804      	ldr	r0, [pc, #16]	@ (80085f8 <main+0x28>)
 80085e6:	f003 fd0d 	bl	800c004 <puts>

    while (1)
    {
        app_led_toggle(); // fast blink to distinguish from bootloader
 80085ea:	f7ff ffd1 	bl	8008590 <app_led_toggle>
        delay_ms(120);
 80085ee:	2078      	movs	r0, #120	@ 0x78
 80085f0:	f7ff ffb4 	bl	800855c <delay_ms>
        app_led_toggle(); // fast blink to distinguish from bootloader
 80085f4:	bf00      	nop
 80085f6:	e7f8      	b.n	80085ea <main+0x1a>
 80085f8:	0800c5e8 	.word	0x0800c5e8

080085fc <SystemClock_Config>:
    }
}


void SystemClock_Config(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b094      	sub	sp, #80	@ 0x50
 8008600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008602:	f107 0320 	add.w	r3, r7, #32
 8008606:	2230      	movs	r2, #48	@ 0x30
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f003 fdda 	bl	800c1c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008610:	f107 030c 	add.w	r3, r7, #12
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	605a      	str	r2, [r3, #4]
 800861a:	609a      	str	r2, [r3, #8]
 800861c:	60da      	str	r2, [r3, #12]
 800861e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008620:	2300      	movs	r3, #0
 8008622:	60bb      	str	r3, [r7, #8]
 8008624:	4b28      	ldr	r3, [pc, #160]	@ (80086c8 <SystemClock_Config+0xcc>)
 8008626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008628:	4a27      	ldr	r2, [pc, #156]	@ (80086c8 <SystemClock_Config+0xcc>)
 800862a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800862e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008630:	4b25      	ldr	r3, [pc, #148]	@ (80086c8 <SystemClock_Config+0xcc>)
 8008632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800863c:	2300      	movs	r3, #0
 800863e:	607b      	str	r3, [r7, #4]
 8008640:	4b22      	ldr	r3, [pc, #136]	@ (80086cc <SystemClock_Config+0xd0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a21      	ldr	r2, [pc, #132]	@ (80086cc <SystemClock_Config+0xd0>)
 8008646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	4b1f      	ldr	r3, [pc, #124]	@ (80086cc <SystemClock_Config+0xd0>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008654:	607b      	str	r3, [r7, #4]
 8008656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008658:	2301      	movs	r3, #1
 800865a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800865c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008660:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008662:	2302      	movs	r3, #2
 8008664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008666:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800866c:	2308      	movs	r3, #8
 800866e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8008674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008676:	2302      	movs	r3, #2
 8008678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800867a:	2307      	movs	r3, #7
 800867c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800867e:	f107 0320 	add.w	r3, r7, #32
 8008682:	4618      	mov	r0, r3
 8008684:	f002 fa3a 	bl	800aafc <HAL_RCC_OscConfig>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800868e:	f000 f81f 	bl	80086d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008692:	230f      	movs	r3, #15
 8008694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008696:	2302      	movs	r3, #2
 8008698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800869a:	2300      	movs	r3, #0
 800869c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800869e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80086a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80086a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	2105      	movs	r1, #5
 80086b0:	4618      	mov	r0, r3
 80086b2:	f002 fc9b 	bl	800afec <HAL_RCC_ClockConfig>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80086bc:	f000 f808 	bl	80086d0 <Error_Handler>
  }
}
 80086c0:	bf00      	nop
 80086c2:	3750      	adds	r7, #80	@ 0x50
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40023800 	.word	0x40023800
 80086cc:	40007000 	.word	0x40007000

080086d0 <Error_Handler>:


void Error_Handler(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80086d4:	b672      	cpsid	i
}
 80086d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80086d8:	bf00      	nop
 80086da:	e7fd      	b.n	80086d8 <Error_Handler+0x8>

080086dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	4b10      	ldr	r3, [pc, #64]	@ (8008728 <HAL_MspInit+0x4c>)
 80086e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ea:	4a0f      	ldr	r2, [pc, #60]	@ (8008728 <HAL_MspInit+0x4c>)
 80086ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80086f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008728 <HAL_MspInit+0x4c>)
 80086f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80086fe:	2300      	movs	r3, #0
 8008700:	603b      	str	r3, [r7, #0]
 8008702:	4b09      	ldr	r3, [pc, #36]	@ (8008728 <HAL_MspInit+0x4c>)
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	4a08      	ldr	r2, [pc, #32]	@ (8008728 <HAL_MspInit+0x4c>)
 8008708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800870c:	6413      	str	r3, [r2, #64]	@ 0x40
 800870e:	4b06      	ldr	r3, [pc, #24]	@ (8008728 <HAL_MspInit+0x4c>)
 8008710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800871a:	2007      	movs	r0, #7
 800871c:	f000 fa44 	bl	8008ba8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	40023800 	.word	0x40023800

0800872c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008730:	bf00      	nop
 8008732:	e7fd      	b.n	8008730 <NMI_Handler+0x4>

08008734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <HardFault_Handler+0x4>

0800873c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008740:	bf00      	nop
 8008742:	e7fd      	b.n	8008740 <MemManage_Handler+0x4>

08008744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008748:	bf00      	nop
 800874a:	e7fd      	b.n	8008748 <BusFault_Handler+0x4>

0800874c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <UsageFault_Handler+0x4>

08008754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008758:	bf00      	nop
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008762:	b480      	push	{r7}
 8008764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008766:	bf00      	nop
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008774:	bf00      	nop
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008782:	f000 f93f 	bl	8008a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008786:	bf00      	nop
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008790:	4802      	ldr	r0, [pc, #8]	@ (800879c <OTG_FS_IRQHandler+0x10>)
 8008792:	f000 fc0c 	bl	8008fae <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008796:	bf00      	nop
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	2000008c 	.word	0x2000008c

080087a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e00a      	b.n	80087c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80087b2:	f3af 8000 	nop.w
 80087b6:	4601      	mov	r1, r0
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	60ba      	str	r2, [r7, #8]
 80087be:	b2ca      	uxtb	r2, r1
 80087c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	3301      	adds	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	dbf0      	blt.n	80087b2 <_read+0x12>
  }

  return len;
 80087d0:	687b      	ldr	r3, [r7, #4]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	e009      	b.n	8008800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	60ba      	str	r2, [r7, #8]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	3301      	adds	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	dbf1      	blt.n	80087ec <_write+0x12>
  }
  return len;
 8008808:	687b      	ldr	r3, [r7, #4]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <_close>:

int _close(int file)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800881a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800883a:	605a      	str	r2, [r3, #4]
  return 0;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <_isatty>:

int _isatty(int file)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008852:	2301      	movs	r3, #1
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008884:	4a14      	ldr	r2, [pc, #80]	@ (80088d8 <_sbrk+0x5c>)
 8008886:	4b15      	ldr	r3, [pc, #84]	@ (80088dc <_sbrk+0x60>)
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008890:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <_sbrk+0x64>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008898:	4b11      	ldr	r3, [pc, #68]	@ (80088e0 <_sbrk+0x64>)
 800889a:	4a12      	ldr	r2, [pc, #72]	@ (80088e4 <_sbrk+0x68>)
 800889c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800889e:	4b10      	ldr	r3, [pc, #64]	@ (80088e0 <_sbrk+0x64>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d207      	bcs.n	80088bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80088ac:	f003 fce8 	bl	800c280 <__errno>
 80088b0:	4603      	mov	r3, r0
 80088b2:	220c      	movs	r2, #12
 80088b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80088b6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ba:	e009      	b.n	80088d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80088bc:	4b08      	ldr	r3, [pc, #32]	@ (80088e0 <_sbrk+0x64>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80088c2:	4b07      	ldr	r3, [pc, #28]	@ (80088e0 <_sbrk+0x64>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	4a05      	ldr	r2, [pc, #20]	@ (80088e0 <_sbrk+0x64>)
 80088cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20020000 	.word	0x20020000
 80088dc:	00000400 	.word	0x00000400
 80088e0:	20000084 	.word	0x20000084
 80088e4:	200005b8 	.word	0x200005b8

080088e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088ec:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <SystemInit+0x20>)
 80088ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f2:	4a05      	ldr	r2, [pc, #20]	@ (8008908 <SystemInit+0x20>)
 80088f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80088fc:	bf00      	nop
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	e000ed00 	.word	0xe000ed00

0800890c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800890c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008910:	f7ff ffea 	bl	80088e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008914:	480c      	ldr	r0, [pc, #48]	@ (8008948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008916:	490d      	ldr	r1, [pc, #52]	@ (800894c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008918:	4a0d      	ldr	r2, [pc, #52]	@ (8008950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800891a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800891c:	e002      	b.n	8008924 <LoopCopyDataInit>

0800891e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800891e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008922:	3304      	adds	r3, #4

08008924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008928:	d3f9      	bcc.n	800891e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800892a:	4a0a      	ldr	r2, [pc, #40]	@ (8008954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800892c:	4c0a      	ldr	r4, [pc, #40]	@ (8008958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800892e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008930:	e001      	b.n	8008936 <LoopFillZerobss>

08008932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008934:	3204      	adds	r2, #4

08008936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008938:	d3fb      	bcc.n	8008932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800893a:	f003 fca7 	bl	800c28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800893e:	f7ff fe47 	bl	80085d0 <main>
  bx  lr    
 8008942:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800894c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008950:	0800c62c 	.word	0x0800c62c
  ldr r2, =_sbss
 8008954:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008958:	200005b8 	.word	0x200005b8

0800895c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800895c:	e7fe      	b.n	800895c <ADC_IRQHandler>
	...

08008960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008964:	4b0e      	ldr	r3, [pc, #56]	@ (80089a0 <HAL_Init+0x40>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a0d      	ldr	r2, [pc, #52]	@ (80089a0 <HAL_Init+0x40>)
 800896a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800896e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <HAL_Init+0x40>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a0a      	ldr	r2, [pc, #40]	@ (80089a0 <HAL_Init+0x40>)
 8008976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800897a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800897c:	4b08      	ldr	r3, [pc, #32]	@ (80089a0 <HAL_Init+0x40>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a07      	ldr	r2, [pc, #28]	@ (80089a0 <HAL_Init+0x40>)
 8008982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008988:	2003      	movs	r0, #3
 800898a:	f000 f90d 	bl	8008ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800898e:	2000      	movs	r0, #0
 8008990:	f000 f808 	bl	80089a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008994:	f7ff fea2 	bl	80086dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40023c00 	.word	0x40023c00

080089a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089ac:	4b12      	ldr	r3, [pc, #72]	@ (80089f8 <HAL_InitTick+0x54>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	4b12      	ldr	r3, [pc, #72]	@ (80089fc <HAL_InitTick+0x58>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	4619      	mov	r1, r3
 80089b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80089ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80089be:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f917 	bl	8008bf6 <HAL_SYSTICK_Config>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e00e      	b.n	80089f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b0f      	cmp	r3, #15
 80089d6:	d80a      	bhi.n	80089ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089d8:	2200      	movs	r2, #0
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	f000 f8ed 	bl	8008bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089e4:	4a06      	ldr	r2, [pc, #24]	@ (8008a00 <HAL_InitTick+0x5c>)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	e000      	b.n	80089f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000000 	.word	0x20000000
 80089fc:	20000008 	.word	0x20000008
 8008a00:	20000004 	.word	0x20000004

08008a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a04:	b480      	push	{r7}
 8008a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a08:	4b06      	ldr	r3, [pc, #24]	@ (8008a24 <HAL_IncTick+0x20>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <HAL_IncTick+0x24>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4413      	add	r3, r2
 8008a14:	4a04      	ldr	r2, [pc, #16]	@ (8008a28 <HAL_IncTick+0x24>)
 8008a16:	6013      	str	r3, [r2, #0]
}
 8008a18:	bf00      	nop
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20000008 	.word	0x20000008
 8008a28:	20000088 	.word	0x20000088

08008a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a30:	4b03      	ldr	r3, [pc, #12]	@ (8008a40 <HAL_GetTick+0x14>)
 8008a32:	681b      	ldr	r3, [r3, #0]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20000088 	.word	0x20000088

08008a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <__NVIC_SetPriorityGrouping+0x44>)
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008a60:	4013      	ands	r3, r2
 8008a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a76:	4a04      	ldr	r2, [pc, #16]	@ (8008a88 <__NVIC_SetPriorityGrouping+0x44>)
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	60d3      	str	r3, [r2, #12]
}
 8008a7c:	bf00      	nop
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	e000ed00 	.word	0xe000ed00

08008a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a90:	4b04      	ldr	r3, [pc, #16]	@ (8008aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	0a1b      	lsrs	r3, r3, #8
 8008a96:	f003 0307 	and.w	r3, r3, #7
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	e000ed00 	.word	0xe000ed00

08008aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	db0a      	blt.n	8008ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	490c      	ldr	r1, [pc, #48]	@ (8008af4 <__NVIC_SetPriority+0x4c>)
 8008ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac6:	0112      	lsls	r2, r2, #4
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	440b      	add	r3, r1
 8008acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ad0:	e00a      	b.n	8008ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	4908      	ldr	r1, [pc, #32]	@ (8008af8 <__NVIC_SetPriority+0x50>)
 8008ad8:	79fb      	ldrb	r3, [r7, #7]
 8008ada:	f003 030f 	and.w	r3, r3, #15
 8008ade:	3b04      	subs	r3, #4
 8008ae0:	0112      	lsls	r2, r2, #4
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	761a      	strb	r2, [r3, #24]
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	e000e100 	.word	0xe000e100
 8008af8:	e000ed00 	.word	0xe000ed00

08008afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	@ 0x24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f1c3 0307 	rsb	r3, r3, #7
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	bf28      	it	cs
 8008b1a:	2304      	movcs	r3, #4
 8008b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	3304      	adds	r3, #4
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	d902      	bls.n	8008b2c <NVIC_EncodePriority+0x30>
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	3b03      	subs	r3, #3
 8008b2a:	e000      	b.n	8008b2e <NVIC_EncodePriority+0x32>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3a:	43da      	mvns	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	401a      	ands	r2, r3
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b44:	f04f 31ff 	mov.w	r1, #4294967295
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4e:	43d9      	mvns	r1, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b54:	4313      	orrs	r3, r2
         );
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3724      	adds	r7, #36	@ 0x24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b74:	d301      	bcc.n	8008b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b76:	2301      	movs	r3, #1
 8008b78:	e00f      	b.n	8008b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8008ba4 <SysTick_Config+0x40>)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b82:	210f      	movs	r1, #15
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	f7ff ff8e 	bl	8008aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <SysTick_Config+0x40>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b92:	4b04      	ldr	r3, [pc, #16]	@ (8008ba4 <SysTick_Config+0x40>)
 8008b94:	2207      	movs	r2, #7
 8008b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	e000e010 	.word	0xe000e010

08008ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff ff47 	bl	8008a44 <__NVIC_SetPriorityGrouping>
}
 8008bb6:	bf00      	nop
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b086      	sub	sp, #24
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607a      	str	r2, [r7, #4]
 8008bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bd0:	f7ff ff5c 	bl	8008a8c <__NVIC_GetPriorityGrouping>
 8008bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	6978      	ldr	r0, [r7, #20]
 8008bdc:	f7ff ff8e 	bl	8008afc <NVIC_EncodePriority>
 8008be0:	4602      	mov	r2, r0
 8008be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff ff5d 	bl	8008aa8 <__NVIC_SetPriority>
}
 8008bee:	bf00      	nop
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff ffb0 	bl	8008b64 <SysTick_Config>
 8008c04:	4603      	mov	r3, r0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b089      	sub	sp, #36	@ 0x24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	e16b      	b.n	8008f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	f040 815a 	bne.w	8008efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d005      	beq.n	8008c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d130      	bne.n	8008cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	2203      	movs	r2, #3
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	43db      	mvns	r3, r3
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	4013      	ands	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	fa02 f303 	lsl.w	r3, r2, r3
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c98:	2201      	movs	r2, #1
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	091b      	lsrs	r3, r3, #4
 8008cae:	f003 0201 	and.w	r2, r3, #1
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d017      	beq.n	8008d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	2203      	movs	r2, #3
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d123      	bne.n	8008d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	08da      	lsrs	r2, r3, #3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3208      	adds	r2, #8
 8008d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	220f      	movs	r2, #15
 8008d24:	fa02 f303 	lsl.w	r3, r2, r3
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	691a      	ldr	r2, [r3, #16]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	08da      	lsrs	r2, r3, #3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3208      	adds	r2, #8
 8008d4e:	69b9      	ldr	r1, [r7, #24]
 8008d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	2203      	movs	r2, #3
 8008d60:	fa02 f303 	lsl.w	r3, r2, r3
 8008d64:	43db      	mvns	r3, r3
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f003 0203 	and.w	r2, r3, #3
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80b4 	beq.w	8008efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	4b60      	ldr	r3, [pc, #384]	@ (8008f1c <HAL_GPIO_Init+0x30c>)
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	4a5f      	ldr	r2, [pc, #380]	@ (8008f1c <HAL_GPIO_Init+0x30c>)
 8008da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8008da6:	4b5d      	ldr	r3, [pc, #372]	@ (8008f1c <HAL_GPIO_Init+0x30c>)
 8008da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008db2:	4a5b      	ldr	r2, [pc, #364]	@ (8008f20 <HAL_GPIO_Init+0x310>)
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	089b      	lsrs	r3, r3, #2
 8008db8:	3302      	adds	r3, #2
 8008dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	220f      	movs	r2, #15
 8008dca:	fa02 f303 	lsl.w	r3, r2, r3
 8008dce:	43db      	mvns	r3, r3
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a52      	ldr	r2, [pc, #328]	@ (8008f24 <HAL_GPIO_Init+0x314>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d02b      	beq.n	8008e36 <HAL_GPIO_Init+0x226>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a51      	ldr	r2, [pc, #324]	@ (8008f28 <HAL_GPIO_Init+0x318>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d025      	beq.n	8008e32 <HAL_GPIO_Init+0x222>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a50      	ldr	r2, [pc, #320]	@ (8008f2c <HAL_GPIO_Init+0x31c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d01f      	beq.n	8008e2e <HAL_GPIO_Init+0x21e>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a4f      	ldr	r2, [pc, #316]	@ (8008f30 <HAL_GPIO_Init+0x320>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d019      	beq.n	8008e2a <HAL_GPIO_Init+0x21a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a4e      	ldr	r2, [pc, #312]	@ (8008f34 <HAL_GPIO_Init+0x324>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d013      	beq.n	8008e26 <HAL_GPIO_Init+0x216>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a4d      	ldr	r2, [pc, #308]	@ (8008f38 <HAL_GPIO_Init+0x328>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00d      	beq.n	8008e22 <HAL_GPIO_Init+0x212>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a4c      	ldr	r2, [pc, #304]	@ (8008f3c <HAL_GPIO_Init+0x32c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d007      	beq.n	8008e1e <HAL_GPIO_Init+0x20e>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a4b      	ldr	r2, [pc, #300]	@ (8008f40 <HAL_GPIO_Init+0x330>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d101      	bne.n	8008e1a <HAL_GPIO_Init+0x20a>
 8008e16:	2307      	movs	r3, #7
 8008e18:	e00e      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	e00c      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e1e:	2306      	movs	r3, #6
 8008e20:	e00a      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e22:	2305      	movs	r3, #5
 8008e24:	e008      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e26:	2304      	movs	r3, #4
 8008e28:	e006      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e004      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e002      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <HAL_GPIO_Init+0x228>
 8008e36:	2300      	movs	r3, #0
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	f002 0203 	and.w	r2, r2, #3
 8008e3e:	0092      	lsls	r2, r2, #2
 8008e40:	4093      	lsls	r3, r2
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e48:	4935      	ldr	r1, [pc, #212]	@ (8008f20 <HAL_GPIO_Init+0x310>)
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	089b      	lsrs	r3, r3, #2
 8008e4e:	3302      	adds	r3, #2
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e56:	4b3b      	ldr	r3, [pc, #236]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	4013      	ands	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e7a:	4a32      	ldr	r2, [pc, #200]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e80:	4b30      	ldr	r3, [pc, #192]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	43db      	mvns	r3, r3
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ea4:	4a27      	ldr	r2, [pc, #156]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008eaa:	4b26      	ldr	r3, [pc, #152]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ece:	4a1d      	ldr	r2, [pc, #116]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	43db      	mvns	r3, r3
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ef8:	4a12      	ldr	r2, [pc, #72]	@ (8008f44 <HAL_GPIO_Init+0x334>)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	3301      	adds	r3, #1
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	2b0f      	cmp	r3, #15
 8008f08:	f67f ae90 	bls.w	8008c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	bf00      	nop
 8008f10:	3724      	adds	r7, #36	@ 0x24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	40013800 	.word	0x40013800
 8008f24:	40020000 	.word	0x40020000
 8008f28:	40020400 	.word	0x40020400
 8008f2c:	40020800 	.word	0x40020800
 8008f30:	40020c00 	.word	0x40020c00
 8008f34:	40021000 	.word	0x40021000
 8008f38:	40021400 	.word	0x40021400
 8008f3c:	40021800 	.word	0x40021800
 8008f40:	40021c00 	.word	0x40021c00
 8008f44:	40013c00 	.word	0x40013c00

08008f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	807b      	strh	r3, [r7, #2]
 8008f54:	4613      	mov	r3, r2
 8008f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f58:	787b      	ldrb	r3, [r7, #1]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f5e:	887a      	ldrh	r2, [r7, #2]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f64:	e003      	b.n	8008f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f66:	887b      	ldrh	r3, [r7, #2]
 8008f68:	041a      	lsls	r2, r3, #16
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	619a      	str	r2, [r3, #24]
}
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f8c:	887a      	ldrh	r2, [r7, #2]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4013      	ands	r3, r2
 8008f92:	041a      	lsls	r2, r3, #16
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	43d9      	mvns	r1, r3
 8008f98:	887b      	ldrh	r3, [r7, #2]
 8008f9a:	400b      	ands	r3, r1
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	619a      	str	r2, [r3, #24]
}
 8008fa2:	bf00      	nop
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 fb0b 	bl	800b5e0 <USB_GetMode>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	f040 80fb 	bne.w	80091c8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f002 face 	bl	800b578 <USB_ReadInterrupts>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80f1 	beq.w	80091c6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f002 fac5 	bl	800b578 <USB_ReadInterrupts>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ff8:	d104      	bne.n	8009004 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009002:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	f002 fab5 	bl	800b578 <USB_ReadInterrupts>
 800900e:	4603      	mov	r3, r0
 8009010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009018:	d104      	bne.n	8009024 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009022:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f002 faa5 	bl	800b578 <USB_ReadInterrupts>
 800902e:	4603      	mov	r3, r0
 8009030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009034:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009038:	d104      	bne.n	8009044 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8009042:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f002 fa95 	bl	800b578 <USB_ReadInterrupts>
 800904e:	4603      	mov	r3, r0
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b02      	cmp	r3, #2
 8009056:	d103      	bne.n	8009060 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2202      	movs	r2, #2
 800905e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4618      	mov	r0, r3
 8009066:	f002 fa87 	bl	800b578 <USB_ReadInterrupts>
 800906a:	4603      	mov	r3, r0
 800906c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009074:	d120      	bne.n	80090b8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800907e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d113      	bne.n	80090b8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009090:	2110      	movs	r1, #16
 8009092:	6938      	ldr	r0, [r7, #16]
 8009094:	f002 f9b8 	bl	800b408 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009098:	6938      	ldr	r0, [r7, #16]
 800909a:	f002 f9e7 	bl	800b46c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7a5b      	ldrb	r3, [r3, #9]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d105      	bne.n	80090b2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2101      	movs	r1, #1
 80090ac:	4618      	mov	r0, r3
 80090ae:	f002 faa5 	bl	800b5fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f002 fd61 	bl	800bb7a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4618      	mov	r0, r3
 80090be:	f002 fa5b 	bl	800b578 <USB_ReadInterrupts>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090cc:	d102      	bne.n	80090d4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 fca1 	bl	800aa16 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 fa4d 	bl	800b578 <USB_ReadInterrupts>
 80090de:	4603      	mov	r3, r0
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b08      	cmp	r3, #8
 80090e6:	d106      	bne.n	80090f6 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f002 fd2a 	bl	800bb42 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2208      	movs	r2, #8
 80090f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f002 fa3c 	bl	800b578 <USB_ReadInterrupts>
 8009100:	4603      	mov	r3, r0
 8009102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800910a:	d139      	bne.n	8009180 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f002 fab0 	bl	800b676 <USB_HC_ReadInterrupt>
 8009116:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	e025      	b.n	800916a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f003 030f 	and.w	r3, r3, #15
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	fa22 f303 	lsr.w	r3, r2, r3
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d018      	beq.n	8009164 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4413      	add	r3, r2
 800913a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009148:	d106      	bne.n	8009158 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	b2db      	uxtb	r3, r3
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f859 	bl	8009208 <HCD_HC_IN_IRQHandler>
 8009156:	e005      	b.n	8009164 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 febb 	bl	8009eda <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	3301      	adds	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	795b      	ldrb	r3, [r3, #5]
 800916e:	461a      	mov	r2, r3
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4293      	cmp	r3, r2
 8009174:	d3d3      	bcc.n	800911e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800917e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f002 f9f7 	bl	800b578 <USB_ReadInterrupts>
 800918a:	4603      	mov	r3, r0
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b10      	cmp	r3, #16
 8009192:	d101      	bne.n	8009198 <HAL_HCD_IRQHandler+0x1ea>
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <HAL_HCD_IRQHandler+0x1ec>
 8009198:	2300      	movs	r3, #0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	699a      	ldr	r2, [r3, #24]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0210 	bic.w	r2, r2, #16
 80091ac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 fb52 	bl	800a858 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0210 	orr.w	r2, r2, #16
 80091c2:	619a      	str	r2, [r3, #24]
 80091c4:	e000      	b.n	80091c8 <HAL_HCD_IRQHandler+0x21a>
      return;
 80091c6:	bf00      	nop
    }
  }
}
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_HCD_Stop+0x16>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e00d      	b.n	8009200 <HAL_HCD_Stop+0x32>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f002 fb71 	bl	800b8d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f002 f9b9 	bl	800b59e <USB_ReadChInterrupts>
 800922c:	4603      	mov	r3, r0
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b04      	cmp	r3, #4
 8009234:	d11a      	bne.n	800926c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	4413      	add	r3, r2
 800923e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009242:	461a      	mov	r2, r3
 8009244:	2304      	movs	r3, #4
 8009246:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009248:	78fa      	ldrb	r2, [r7, #3]
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4613      	mov	r3, r2
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	1a9b      	subs	r3, r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	334d      	adds	r3, #77	@ 0x4d
 8009258:	2207      	movs	r2, #7
 800925a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	4611      	mov	r1, r2
 8009264:	4618      	mov	r0, r3
 8009266:	f002 fa17 	bl	800b698 <USB_HC_Halt>
 800926a:	e09e      	b.n	80093aa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	4611      	mov	r1, r2
 8009274:	4618      	mov	r0, r3
 8009276:	f002 f992 	bl	800b59e <USB_ReadChInterrupts>
 800927a:	4603      	mov	r3, r0
 800927c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009284:	d11b      	bne.n	80092be <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4413      	add	r3, r2
 800928e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009292:	461a      	mov	r2, r3
 8009294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009298:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800929a:	78fa      	ldrb	r2, [r7, #3]
 800929c:	6879      	ldr	r1, [r7, #4]
 800929e:	4613      	mov	r3, r2
 80092a0:	011b      	lsls	r3, r3, #4
 80092a2:	1a9b      	subs	r3, r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	334d      	adds	r3, #77	@ 0x4d
 80092aa:	2208      	movs	r2, #8
 80092ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	4618      	mov	r0, r3
 80092b8:	f002 f9ee 	bl	800b698 <USB_HC_Halt>
 80092bc:	e075      	b.n	80093aa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f002 f969 	bl	800b59e <USB_ReadChInterrupts>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f003 0308 	and.w	r3, r3, #8
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d11a      	bne.n	800930c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092e2:	461a      	mov	r2, r3
 80092e4:	2308      	movs	r3, #8
 80092e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	334d      	adds	r3, #77	@ 0x4d
 80092f8:	2206      	movs	r2, #6
 80092fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f002 f9c7 	bl	800b698 <USB_HC_Halt>
 800930a:	e04e      	b.n	80093aa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f002 f942 	bl	800b59e <USB_ReadChInterrupts>
 800931a:	4603      	mov	r3, r0
 800931c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009324:	d11b      	bne.n	800935e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	4413      	add	r3, r2
 800932e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009332:	461a      	mov	r2, r3
 8009334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009338:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	4613      	mov	r3, r2
 8009340:	011b      	lsls	r3, r3, #4
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	440b      	add	r3, r1
 8009348:	334d      	adds	r3, #77	@ 0x4d
 800934a:	2209      	movs	r2, #9
 800934c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f002 f99e 	bl	800b698 <USB_HC_Halt>
 800935c:	e025      	b.n	80093aa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f002 f919 	bl	800b59e <USB_ReadChInterrupts>
 800936c:	4603      	mov	r3, r0
 800936e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009372:	2b80      	cmp	r3, #128	@ 0x80
 8009374:	d119      	bne.n	80093aa <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009376:	78fb      	ldrb	r3, [r7, #3]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	4413      	add	r3, r2
 800937e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009382:	461a      	mov	r2, r3
 8009384:	2380      	movs	r3, #128	@ 0x80
 8009386:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009388:	78fa      	ldrb	r2, [r7, #3]
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	4613      	mov	r3, r2
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	334d      	adds	r3, #77	@ 0x4d
 8009398:	2207      	movs	r2, #7
 800939a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	78fa      	ldrb	r2, [r7, #3]
 80093a2:	4611      	mov	r1, r2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f002 f977 	bl	800b698 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	4611      	mov	r1, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	f002 f8f3 	bl	800b59e <USB_ReadChInterrupts>
 80093b8:	4603      	mov	r3, r0
 80093ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c2:	d112      	bne.n	80093ea <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	78fa      	ldrb	r2, [r7, #3]
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f002 f963 	bl	800b698 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093de:	461a      	mov	r2, r3
 80093e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093e4:	6093      	str	r3, [r2, #8]
 80093e6:	f000 bd75 	b.w	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	4611      	mov	r1, r2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f002 f8d3 	bl	800b59e <USB_ReadChInterrupts>
 80093f8:	4603      	mov	r3, r0
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b01      	cmp	r3, #1
 8009400:	f040 8128 	bne.w	8009654 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	4413      	add	r3, r2
 800940c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009410:	461a      	mov	r2, r3
 8009412:	2320      	movs	r3, #32
 8009414:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	4613      	mov	r3, r2
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	1a9b      	subs	r3, r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	331b      	adds	r3, #27
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d119      	bne.n	8009460 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4613      	mov	r3, r2
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	440b      	add	r3, r1
 800943a:	331b      	adds	r3, #27
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	4413      	add	r3, r2
 8009448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	440a      	add	r2, r1
 8009456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800945a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800945e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	799b      	ldrb	r3, [r3, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01b      	beq.n	80094a0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	4613      	mov	r3, r2
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	3330      	adds	r3, #48	@ 0x30
 8009478:	6819      	ldr	r1, [r3, #0]
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	4413      	add	r3, r2
 8009482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	1ac9      	subs	r1, r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4403      	add	r3, r0
 800949c:	3338      	adds	r3, #56	@ 0x38
 800949e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4613      	mov	r3, r2
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	334d      	adds	r3, #77	@ 0x4d
 80094b0:	2201      	movs	r2, #1
 80094b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	4613      	mov	r3, r2
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	1a9b      	subs	r3, r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	3344      	adds	r3, #68	@ 0x44
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094d4:	461a      	mov	r2, r3
 80094d6:	2301      	movs	r3, #1
 80094d8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80094da:	78fa      	ldrb	r2, [r7, #3]
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	011b      	lsls	r3, r3, #4
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	440b      	add	r3, r1
 80094e8:	3326      	adds	r3, #38	@ 0x26
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	1a9b      	subs	r3, r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	3326      	adds	r3, #38	@ 0x26
 8009500:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009502:	2b02      	cmp	r3, #2
 8009504:	d110      	bne.n	8009528 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f002 f8c2 	bl	800b698 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009520:	461a      	mov	r2, r3
 8009522:	2310      	movs	r3, #16
 8009524:	6093      	str	r3, [r2, #8]
 8009526:	e03d      	b.n	80095a4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009528:	78fa      	ldrb	r2, [r7, #3]
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	4613      	mov	r3, r2
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	1a9b      	subs	r3, r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	3326      	adds	r3, #38	@ 0x26
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b03      	cmp	r3, #3
 800953c:	d00a      	beq.n	8009554 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800953e:	78fa      	ldrb	r2, [r7, #3]
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	4613      	mov	r3, r2
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	1a9b      	subs	r3, r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	3326      	adds	r3, #38	@ 0x26
 800954e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009550:	2b01      	cmp	r3, #1
 8009552:	d127      	bne.n	80095a4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4413      	add	r3, r2
 800955c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	440a      	add	r2, r1
 800956a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800956e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009572:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4613      	mov	r3, r2
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	334c      	adds	r3, #76	@ 0x4c
 8009584:	2201      	movs	r2, #1
 8009586:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	4613      	mov	r3, r2
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	440b      	add	r3, r1
 8009596:	334c      	adds	r3, #76	@ 0x4c
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f002 faf9 	bl	800bb96 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	799b      	ldrb	r3, [r3, #6]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d13b      	bne.n	8009624 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4613      	mov	r3, r2
 80095b2:	011b      	lsls	r3, r3, #4
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	3338      	adds	r3, #56	@ 0x38
 80095bc:	6819      	ldr	r1, [r3, #0]
 80095be:	78fa      	ldrb	r2, [r7, #3]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	4613      	mov	r3, r2
 80095c4:	011b      	lsls	r3, r3, #4
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4403      	add	r3, r0
 80095cc:	3328      	adds	r3, #40	@ 0x28
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	440b      	add	r3, r1
 80095d2:	1e59      	subs	r1, r3, #1
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4403      	add	r3, r0
 80095e2:	3328      	adds	r3, #40	@ 0x28
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 8470 	beq.w	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80095f4:	78fa      	ldrb	r2, [r7, #3]
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	4613      	mov	r3, r2
 80095fa:	011b      	lsls	r3, r3, #4
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	333c      	adds	r3, #60	@ 0x3c
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	f083 0301 	eor.w	r3, r3, #1
 800960c:	b2d8      	uxtb	r0, r3
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	4613      	mov	r3, r2
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	333c      	adds	r3, #60	@ 0x3c
 800961c:	4602      	mov	r2, r0
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	f000 bc58 	b.w	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009624:	78fa      	ldrb	r2, [r7, #3]
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	4613      	mov	r3, r2
 800962a:	011b      	lsls	r3, r3, #4
 800962c:	1a9b      	subs	r3, r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	440b      	add	r3, r1
 8009632:	333c      	adds	r3, #60	@ 0x3c
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	78fa      	ldrb	r2, [r7, #3]
 8009638:	f083 0301 	eor.w	r3, r3, #1
 800963c:	b2d8      	uxtb	r0, r3
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	4613      	mov	r3, r2
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	440b      	add	r3, r1
 800964a:	333c      	adds	r3, #60	@ 0x3c
 800964c:	4602      	mov	r2, r0
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	f000 bc40 	b.w	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	78fa      	ldrb	r2, [r7, #3]
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f001 ff9e 	bl	800b59e <USB_ReadChInterrupts>
 8009662:	4603      	mov	r3, r0
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b20      	cmp	r3, #32
 800966a:	d131      	bne.n	80096d0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	4413      	add	r3, r2
 8009674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009678:	461a      	mov	r2, r3
 800967a:	2320      	movs	r3, #32
 800967c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	1a9b      	subs	r3, r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	331a      	adds	r3, #26
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	f040 841f 	bne.w	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4613      	mov	r3, r2
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	331b      	adds	r3, #27
 80096a6:	2201      	movs	r2, #1
 80096a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	011b      	lsls	r3, r3, #4
 80096b2:	1a9b      	subs	r3, r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	440b      	add	r3, r1
 80096b8:	334d      	adds	r3, #77	@ 0x4d
 80096ba:	2203      	movs	r2, #3
 80096bc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	78fa      	ldrb	r2, [r7, #3]
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f001 ffe6 	bl	800b698 <USB_HC_Halt>
 80096cc:	f000 bc02 	b.w	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 ff60 	bl	800b59e <USB_ReadChInterrupts>
 80096de:	4603      	mov	r3, r0
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	f040 8305 	bne.w	8009cf4 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096f6:	461a      	mov	r2, r3
 80096f8:	2302      	movs	r3, #2
 80096fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	4613      	mov	r3, r2
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	334d      	adds	r3, #77	@ 0x4d
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d114      	bne.n	800973c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009712:	78fa      	ldrb	r2, [r7, #3]
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	334d      	adds	r3, #77	@ 0x4d
 8009722:	2202      	movs	r2, #2
 8009724:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	4613      	mov	r3, r2
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	334c      	adds	r3, #76	@ 0x4c
 8009736:	2201      	movs	r2, #1
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e2cc      	b.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800973c:	78fa      	ldrb	r2, [r7, #3]
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	4613      	mov	r3, r2
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	440b      	add	r3, r1
 800974a:	334d      	adds	r3, #77	@ 0x4d
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b06      	cmp	r3, #6
 8009750:	d114      	bne.n	800977c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009752:	78fa      	ldrb	r2, [r7, #3]
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	4613      	mov	r3, r2
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	1a9b      	subs	r3, r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	440b      	add	r3, r1
 8009760:	334d      	adds	r3, #77	@ 0x4d
 8009762:	2202      	movs	r2, #2
 8009764:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	1a9b      	subs	r3, r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	334c      	adds	r3, #76	@ 0x4c
 8009776:	2205      	movs	r2, #5
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e2ac      	b.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800977c:	78fa      	ldrb	r2, [r7, #3]
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	4613      	mov	r3, r2
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	440b      	add	r3, r1
 800978a:	334d      	adds	r3, #77	@ 0x4d
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b07      	cmp	r3, #7
 8009790:	d00b      	beq.n	80097aa <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	1a9b      	subs	r3, r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	440b      	add	r3, r1
 80097a0:	334d      	adds	r3, #77	@ 0x4d
 80097a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80097a4:	2b09      	cmp	r3, #9
 80097a6:	f040 80a6 	bne.w	80098f6 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	440b      	add	r3, r1
 80097b8:	334d      	adds	r3, #77	@ 0x4d
 80097ba:	2202      	movs	r2, #2
 80097bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	4613      	mov	r3, r2
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	440b      	add	r3, r1
 80097cc:	3344      	adds	r3, #68	@ 0x44
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	1c59      	adds	r1, r3, #1
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4613      	mov	r3, r2
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	1a9b      	subs	r3, r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4403      	add	r3, r0
 80097de:	3344      	adds	r3, #68	@ 0x44
 80097e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4613      	mov	r3, r2
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	3344      	adds	r3, #68	@ 0x44
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d943      	bls.n	8009880 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	4613      	mov	r3, r2
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	440b      	add	r3, r1
 8009806:	3344      	adds	r3, #68	@ 0x44
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	4613      	mov	r3, r2
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	440b      	add	r3, r1
 800981a:	331a      	adds	r3, #26
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d123      	bne.n	800986a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	4613      	mov	r3, r2
 8009828:	011b      	lsls	r3, r3, #4
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	331b      	adds	r3, #27
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8009836:	78fa      	ldrb	r2, [r7, #3]
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	011b      	lsls	r3, r3, #4
 800983e:	1a9b      	subs	r3, r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	331c      	adds	r3, #28
 8009846:	2200      	movs	r2, #0
 8009848:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	0151      	lsls	r1, r2, #5
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	440a      	add	r2, r1
 8009860:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009868:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800986a:	78fa      	ldrb	r2, [r7, #3]
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	4613      	mov	r3, r2
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	334c      	adds	r3, #76	@ 0x4c
 800987a:	2204      	movs	r2, #4
 800987c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800987e:	e229      	b.n	8009cd4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	4613      	mov	r3, r2
 8009886:	011b      	lsls	r3, r3, #4
 8009888:	1a9b      	subs	r3, r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	440b      	add	r3, r1
 800988e:	334c      	adds	r3, #76	@ 0x4c
 8009890:	2202      	movs	r2, #2
 8009892:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009894:	78fa      	ldrb	r2, [r7, #3]
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	3326      	adds	r3, #38	@ 0x26
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00b      	beq.n	80098c2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	1a9b      	subs	r3, r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	440b      	add	r3, r1
 80098b8:	3326      	adds	r3, #38	@ 0x26
 80098ba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80098bc:	2b02      	cmp	r3, #2
 80098be:	f040 8209 	bne.w	8009cd4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80098d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ee:	461a      	mov	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80098f4:	e1ee      	b.n	8009cd4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	334d      	adds	r3, #77	@ 0x4d
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b05      	cmp	r3, #5
 800990a:	f040 80c8 	bne.w	8009a9e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	1a9b      	subs	r3, r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	334d      	adds	r3, #77	@ 0x4d
 800991e:	2202      	movs	r2, #2
 8009920:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	4613      	mov	r3, r2
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	1a9b      	subs	r3, r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	331b      	adds	r3, #27
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	f040 81ce 	bne.w	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	011b      	lsls	r3, r3, #4
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	3326      	adds	r3, #38	@ 0x26
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b03      	cmp	r3, #3
 800994e:	d16b      	bne.n	8009a28 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8009950:	78fa      	ldrb	r2, [r7, #3]
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	4613      	mov	r3, r2
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	440b      	add	r3, r1
 800995e:	3348      	adds	r3, #72	@ 0x48
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	1c59      	adds	r1, r3, #1
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4613      	mov	r3, r2
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	1a9b      	subs	r3, r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4403      	add	r3, r0
 8009970:	3348      	adds	r3, #72	@ 0x48
 8009972:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	4613      	mov	r3, r2
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	440b      	add	r3, r1
 8009982:	3348      	adds	r3, #72	@ 0x48
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d943      	bls.n	8009a12 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800998a:	78fa      	ldrb	r2, [r7, #3]
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	4613      	mov	r3, r2
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	1a9b      	subs	r3, r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	440b      	add	r3, r1
 8009998:	3348      	adds	r3, #72	@ 0x48
 800999a:	2200      	movs	r2, #0
 800999c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	440b      	add	r3, r1
 80099ac:	331b      	adds	r3, #27
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80099b2:	78fa      	ldrb	r2, [r7, #3]
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	1a9b      	subs	r3, r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	3344      	adds	r3, #68	@ 0x44
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d809      	bhi.n	80099dc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80099c8:	78fa      	ldrb	r2, [r7, #3]
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	4613      	mov	r3, r2
 80099ce:	011b      	lsls	r3, r3, #4
 80099d0:	1a9b      	subs	r3, r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	440b      	add	r3, r1
 80099d6:	331c      	adds	r3, #28
 80099d8:	2201      	movs	r2, #1
 80099da:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	78fa      	ldrb	r2, [r7, #3]
 80099ec:	0151      	lsls	r1, r2, #5
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	440a      	add	r2, r1
 80099f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099fa:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	334c      	adds	r3, #76	@ 0x4c
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	e014      	b.n	8009a3c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009a12:	78fa      	ldrb	r2, [r7, #3]
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	334c      	adds	r3, #76	@ 0x4c
 8009a22:	2202      	movs	r2, #2
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	e009      	b.n	8009a3c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009a28:	78fa      	ldrb	r2, [r7, #3]
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	1a9b      	subs	r3, r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	440b      	add	r3, r1
 8009a36:	334c      	adds	r3, #76	@ 0x4c
 8009a38:	2202      	movs	r2, #2
 8009a3a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009a3c:	78fa      	ldrb	r2, [r7, #3]
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	3326      	adds	r3, #38	@ 0x26
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00b      	beq.n	8009a6a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009a52:	78fa      	ldrb	r2, [r7, #3]
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	440b      	add	r3, r1
 8009a60:	3326      	adds	r3, #38	@ 0x26
 8009a62:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	f040 8136 	bne.w	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a80:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a88:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a96:	461a      	mov	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	e11b      	b.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	1a9b      	subs	r3, r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	440b      	add	r3, r1
 8009aac:	334d      	adds	r3, #77	@ 0x4d
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	f040 8081 	bne.w	8009bb8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	011b      	lsls	r3, r3, #4
 8009abe:	1a9b      	subs	r3, r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	334d      	adds	r3, #77	@ 0x4d
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009aca:	78fa      	ldrb	r2, [r7, #3]
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	1a9b      	subs	r3, r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	440b      	add	r3, r1
 8009ad8:	331b      	adds	r3, #27
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	f040 80fa 	bne.w	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009ae2:	78fa      	ldrb	r2, [r7, #3]
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	1a9b      	subs	r3, r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	334c      	adds	r3, #76	@ 0x4c
 8009af2:	2202      	movs	r2, #2
 8009af4:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	0151      	lsls	r1, r2, #5
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	440a      	add	r2, r1
 8009b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b14:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009b16:	78fb      	ldrb	r3, [r7, #3]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	78fa      	ldrb	r2, [r7, #3]
 8009b26:	0151      	lsls	r1, r2, #5
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	440a      	add	r2, r1
 8009b2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b34:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8009b36:	78fb      	ldrb	r3, [r7, #3]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	78fa      	ldrb	r2, [r7, #3]
 8009b46:	0151      	lsls	r1, r2, #5
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	440a      	add	r2, r1
 8009b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b50:	f023 0320 	bic.w	r3, r3, #32
 8009b54:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	3326      	adds	r3, #38	@ 0x26
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00b      	beq.n	8009b84 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009b6c:	78fa      	ldrb	r2, [r7, #3]
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	4613      	mov	r3, r2
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	440b      	add	r3, r1
 8009b7a:	3326      	adds	r3, #38	@ 0x26
 8009b7c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	f040 80a9 	bne.w	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009b9a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ba2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009ba4:	78fb      	ldrb	r3, [r7, #3]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	e08e      	b.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009bb8:	78fa      	ldrb	r2, [r7, #3]
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	334d      	adds	r3, #77	@ 0x4d
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d143      	bne.n	8009c56 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	6879      	ldr	r1, [r7, #4]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	1a9b      	subs	r3, r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	440b      	add	r3, r1
 8009bdc:	334d      	adds	r3, #77	@ 0x4d
 8009bde:	2202      	movs	r2, #2
 8009be0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	1a9b      	subs	r3, r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	334c      	adds	r3, #76	@ 0x4c
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009bf6:	78fa      	ldrb	r2, [r7, #3]
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	011b      	lsls	r3, r3, #4
 8009bfe:	1a9b      	subs	r3, r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	3326      	adds	r3, #38	@ 0x26
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00a      	beq.n	8009c22 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009c0c:	78fa      	ldrb	r2, [r7, #3]
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4613      	mov	r3, r2
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	1a9b      	subs	r3, r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	440b      	add	r3, r1
 8009c1a:	3326      	adds	r3, #38	@ 0x26
 8009c1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d159      	bne.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c38:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c40:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009c42:	78fb      	ldrb	r3, [r7, #3]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	e03f      	b.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8009c56:	78fa      	ldrb	r2, [r7, #3]
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	011b      	lsls	r3, r3, #4
 8009c5e:	1a9b      	subs	r3, r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	334d      	adds	r3, #77	@ 0x4d
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b08      	cmp	r3, #8
 8009c6a:	d126      	bne.n	8009cba <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c6c:	78fa      	ldrb	r2, [r7, #3]
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4613      	mov	r3, r2
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	334d      	adds	r3, #77	@ 0x4d
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4613      	mov	r3, r2
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	1a9b      	subs	r3, r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	3344      	adds	r3, #68	@ 0x44
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	1c59      	adds	r1, r3, #1
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	4613      	mov	r3, r2
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	1a9b      	subs	r3, r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4403      	add	r3, r0
 8009ca0:	3344      	adds	r3, #68	@ 0x44
 8009ca2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8009ca4:	78fa      	ldrb	r2, [r7, #3]
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	1a9b      	subs	r3, r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	440b      	add	r3, r1
 8009cb2:	334c      	adds	r3, #76	@ 0x4c
 8009cb4:	2204      	movs	r2, #4
 8009cb6:	701a      	strb	r2, [r3, #0]
 8009cb8:	e00d      	b.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	011b      	lsls	r3, r3, #4
 8009cc2:	1a9b      	subs	r3, r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	334d      	adds	r3, #77	@ 0x4d
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	f000 8100 	beq.w	8009ed2 <HCD_HC_IN_IRQHandler+0xcca>
 8009cd2:	e000      	b.n	8009cd6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009cd4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	011b      	lsls	r3, r3, #4
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	334c      	adds	r3, #76	@ 0x4c
 8009ce6:	781a      	ldrb	r2, [r3, #0]
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 ff52 	bl	800bb96 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009cf2:	e0ef      	b.n	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	78fa      	ldrb	r2, [r7, #3]
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fc4e 	bl	800b59e <USB_ReadChInterrupts>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d08:	2b40      	cmp	r3, #64	@ 0x40
 8009d0a:	d12f      	bne.n	8009d6c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d18:	461a      	mov	r2, r3
 8009d1a:	2340      	movs	r3, #64	@ 0x40
 8009d1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8009d1e:	78fa      	ldrb	r2, [r7, #3]
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4613      	mov	r3, r2
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	334d      	adds	r3, #77	@ 0x4d
 8009d2e:	2205      	movs	r2, #5
 8009d30:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	4613      	mov	r3, r2
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	440b      	add	r3, r1
 8009d40:	331a      	adds	r3, #26
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	440b      	add	r3, r1
 8009d56:	3344      	adds	r3, #68	@ 0x44
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fc97 	bl	800b698 <USB_HC_Halt>
 8009d6a:	e0b3      	b.n	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	78fa      	ldrb	r2, [r7, #3]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f001 fc12 	bl	800b59e <USB_ReadChInterrupts>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f003 0310 	and.w	r3, r3, #16
 8009d80:	2b10      	cmp	r3, #16
 8009d82:	f040 80a7 	bne.w	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009d86:	78fa      	ldrb	r2, [r7, #3]
 8009d88:	6879      	ldr	r1, [r7, #4]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	440b      	add	r3, r1
 8009d94:	3326      	adds	r3, #38	@ 0x26
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d11b      	bne.n	8009dd4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009d9c:	78fa      	ldrb	r2, [r7, #3]
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	4613      	mov	r3, r2
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	440b      	add	r3, r1
 8009daa:	3344      	adds	r3, #68	@ 0x44
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	4613      	mov	r3, r2
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	1a9b      	subs	r3, r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	440b      	add	r3, r1
 8009dbe:	334d      	adds	r3, #77	@ 0x4d
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 fc63 	bl	800b698 <USB_HC_Halt>
 8009dd2:	e03f      	b.n	8009e54 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009dd4:	78fa      	ldrb	r2, [r7, #3]
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	1a9b      	subs	r3, r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	440b      	add	r3, r1
 8009de2:	3326      	adds	r3, #38	@ 0x26
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	6879      	ldr	r1, [r7, #4]
 8009dee:	4613      	mov	r3, r2
 8009df0:	011b      	lsls	r3, r3, #4
 8009df2:	1a9b      	subs	r3, r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	440b      	add	r3, r1
 8009df8:	3326      	adds	r3, #38	@ 0x26
 8009dfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d129      	bne.n	8009e54 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009e00:	78fa      	ldrb	r2, [r7, #3]
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3344      	adds	r3, #68	@ 0x44
 8009e10:	2200      	movs	r2, #0
 8009e12:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	799b      	ldrb	r3, [r3, #6]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00a      	beq.n	8009e32 <HCD_HC_IN_IRQHandler+0xc2a>
 8009e1c:	78fa      	ldrb	r2, [r7, #3]
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	440b      	add	r3, r1
 8009e2a:	331b      	adds	r3, #27
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d110      	bne.n	8009e54 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8009e32:	78fa      	ldrb	r2, [r7, #3]
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	1a9b      	subs	r3, r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	440b      	add	r3, r1
 8009e40:	334d      	adds	r3, #77	@ 0x4d
 8009e42:	2204      	movs	r2, #4
 8009e44:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f001 fc22 	bl	800b698 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009e54:	78fa      	ldrb	r2, [r7, #3]
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	011b      	lsls	r3, r3, #4
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	331b      	adds	r3, #27
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d129      	bne.n	8009ebe <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009e6a:	78fa      	ldrb	r2, [r7, #3]
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	1a9b      	subs	r3, r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	440b      	add	r3, r1
 8009e78:	331b      	adds	r3, #27
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	78fa      	ldrb	r2, [r7, #3]
 8009e8e:	0151      	lsls	r1, r2, #5
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	440a      	add	r2, r1
 8009e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e9c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8009e9e:	78fb      	ldrb	r3, [r7, #3]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	78fa      	ldrb	r2, [r7, #3]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009eb8:	f043 0320 	orr.w	r3, r3, #32
 8009ebc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eca:	461a      	mov	r2, r3
 8009ecc:	2310      	movs	r3, #16
 8009ece:	6093      	str	r3, [r2, #8]
 8009ed0:	e000      	b.n	8009ed4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8009ed2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b086      	sub	sp, #24
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	78fa      	ldrb	r2, [r7, #3]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 fb50 	bl	800b59e <USB_ReadChInterrupts>
 8009efe:	4603      	mov	r3, r0
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d11b      	bne.n	8009f40 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f14:	461a      	mov	r2, r3
 8009f16:	2304      	movs	r3, #4
 8009f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009f1a:	78fa      	ldrb	r2, [r7, #3]
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	1a9b      	subs	r3, r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	440b      	add	r3, r1
 8009f28:	334d      	adds	r3, #77	@ 0x4d
 8009f2a:	2207      	movs	r2, #7
 8009f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	78fa      	ldrb	r2, [r7, #3]
 8009f34:	4611      	mov	r1, r2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 fbae 	bl	800b698 <USB_HC_Halt>
 8009f3c:	f000 bc89 	b.w	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	78fa      	ldrb	r2, [r7, #3]
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 fb28 	bl	800b59e <USB_ReadChInterrupts>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f003 0320 	and.w	r3, r3, #32
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	f040 8082 	bne.w	800a05e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f66:	461a      	mov	r2, r3
 8009f68:	2320      	movs	r3, #32
 8009f6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	4613      	mov	r3, r2
 8009f72:	011b      	lsls	r3, r3, #4
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	440b      	add	r3, r1
 8009f7a:	3319      	adds	r3, #25
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d124      	bne.n	8009fcc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	3319      	adds	r3, #25
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	334c      	adds	r3, #76	@ 0x4c
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	334d      	adds	r3, #77	@ 0x4d
 8009fba:	2203      	movs	r2, #3
 8009fbc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 fb66 	bl	800b698 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009fcc:	78fa      	ldrb	r2, [r7, #3]
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	011b      	lsls	r3, r3, #4
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	440b      	add	r3, r1
 8009fda:	331a      	adds	r3, #26
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	f040 8437 	bne.w	800a852 <HCD_HC_OUT_IRQHandler+0x978>
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	1a9b      	subs	r3, r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	440b      	add	r3, r1
 8009ff2:	331b      	adds	r3, #27
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f040 842b 	bne.w	800a852 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009ffc:	78fa      	ldrb	r2, [r7, #3]
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	4613      	mov	r3, r2
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	440b      	add	r3, r1
 800a00a:	3326      	adds	r3, #38	@ 0x26
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d009      	beq.n	800a026 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	4613      	mov	r3, r2
 800a018:	011b      	lsls	r3, r3, #4
 800a01a:	1a9b      	subs	r3, r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	440b      	add	r3, r1
 800a020:	331b      	adds	r3, #27
 800a022:	2201      	movs	r2, #1
 800a024:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800a026:	78fa      	ldrb	r2, [r7, #3]
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	1a9b      	subs	r3, r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	334d      	adds	r3, #77	@ 0x4d
 800a036:	2203      	movs	r2, #3
 800a038:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	78fa      	ldrb	r2, [r7, #3]
 800a040:	4611      	mov	r1, r2
 800a042:	4618      	mov	r0, r3
 800a044:	f001 fb28 	bl	800b698 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	4613      	mov	r3, r2
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	1a9b      	subs	r3, r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	3344      	adds	r3, #68	@ 0x44
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	e3f9      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	78fa      	ldrb	r2, [r7, #3]
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fa99 	bl	800b59e <USB_ReadChInterrupts>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a076:	d111      	bne.n	800a09c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a084:	461a      	mov	r2, r3
 800a086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a08a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f001 faff 	bl	800b698 <USB_HC_Halt>
 800a09a:	e3da      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f001 fa7a 	bl	800b59e <USB_ReadChInterrupts>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d168      	bne.n	800a186 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	3344      	adds	r3, #68	@ 0x44
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fa64 	bl	800b59e <USB_ReadChInterrupts>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0dc:	2b40      	cmp	r3, #64	@ 0x40
 800a0de:	d112      	bne.n	800a106 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a0e0:	78fa      	ldrb	r2, [r7, #3]
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	1a9b      	subs	r3, r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	3319      	adds	r3, #25
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a100:	461a      	mov	r2, r3
 800a102:	2340      	movs	r3, #64	@ 0x40
 800a104:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800a106:	78fa      	ldrb	r2, [r7, #3]
 800a108:	6879      	ldr	r1, [r7, #4]
 800a10a:	4613      	mov	r3, r2
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	1a9b      	subs	r3, r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	440b      	add	r3, r1
 800a114:	331b      	adds	r3, #27
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d019      	beq.n	800a150 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	4613      	mov	r3, r2
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	1a9b      	subs	r3, r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	331b      	adds	r3, #27
 800a12c:	2200      	movs	r2, #0
 800a12e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	4413      	add	r3, r2
 800a138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	78fa      	ldrb	r2, [r7, #3]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	440a      	add	r2, r1
 800a146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a14a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a14e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	4413      	add	r3, r2
 800a158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a15c:	461a      	mov	r2, r3
 800a15e:	2301      	movs	r3, #1
 800a160:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	4613      	mov	r3, r2
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	440b      	add	r3, r1
 800a170:	334d      	adds	r3, #77	@ 0x4d
 800a172:	2201      	movs	r2, #1
 800a174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 fa8a 	bl	800b698 <USB_HC_Halt>
 800a184:	e365      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	78fa      	ldrb	r2, [r7, #3]
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 fa05 	bl	800b59e <USB_ReadChInterrupts>
 800a194:	4603      	mov	r3, r0
 800a196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a19a:	2b40      	cmp	r3, #64	@ 0x40
 800a19c:	d139      	bne.n	800a212 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	011b      	lsls	r3, r3, #4
 800a1a6:	1a9b      	subs	r3, r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	334d      	adds	r3, #77	@ 0x4d
 800a1ae:	2205      	movs	r2, #5
 800a1b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	331a      	adds	r3, #26
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d109      	bne.n	800a1dc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	440b      	add	r3, r1
 800a1d6:	3319      	adds	r3, #25
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800a1dc:	78fa      	ldrb	r2, [r7, #3]
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	011b      	lsls	r3, r3, #4
 800a1e4:	1a9b      	subs	r3, r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	3344      	adds	r3, #68	@ 0x44
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 fa4d 	bl	800b698 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a1fe:	78fb      	ldrb	r3, [r7, #3]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	4413      	add	r3, r2
 800a206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a20a:	461a      	mov	r2, r3
 800a20c:	2340      	movs	r3, #64	@ 0x40
 800a20e:	6093      	str	r3, [r2, #8]
 800a210:	e31f      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 f9bf 	bl	800b59e <USB_ReadChInterrupts>
 800a220:	4603      	mov	r3, r0
 800a222:	f003 0308 	and.w	r3, r3, #8
 800a226:	2b08      	cmp	r3, #8
 800a228:	d11a      	bne.n	800a260 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	4413      	add	r3, r2
 800a232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a236:	461a      	mov	r2, r3
 800a238:	2308      	movs	r3, #8
 800a23a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	4613      	mov	r3, r2
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	334d      	adds	r3, #77	@ 0x4d
 800a24c:	2206      	movs	r2, #6
 800a24e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f001 fa1d 	bl	800b698 <USB_HC_Halt>
 800a25e:	e2f8      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	78fa      	ldrb	r2, [r7, #3]
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 f998 	bl	800b59e <USB_ReadChInterrupts>
 800a26e:	4603      	mov	r3, r0
 800a270:	f003 0310 	and.w	r3, r3, #16
 800a274:	2b10      	cmp	r3, #16
 800a276:	d144      	bne.n	800a302 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a278:	78fa      	ldrb	r2, [r7, #3]
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4613      	mov	r3, r2
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	1a9b      	subs	r3, r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	3344      	adds	r3, #68	@ 0x44
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a28c:	78fa      	ldrb	r2, [r7, #3]
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	4613      	mov	r3, r2
 800a292:	011b      	lsls	r3, r3, #4
 800a294:	1a9b      	subs	r3, r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	334d      	adds	r3, #77	@ 0x4d
 800a29c:	2204      	movs	r2, #4
 800a29e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a2a0:	78fa      	ldrb	r2, [r7, #3]
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	1a9b      	subs	r3, r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	440b      	add	r3, r1
 800a2ae:	3319      	adds	r3, #25
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d114      	bne.n	800a2e0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a2b6:	78fa      	ldrb	r2, [r7, #3]
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	1a9b      	subs	r3, r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	3318      	adds	r3, #24
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	1a9b      	subs	r3, r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	3319      	adds	r3, #25
 800a2dc:	2201      	movs	r2, #1
 800a2de:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 f9d5 	bl	800b698 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a2ee:	78fb      	ldrb	r3, [r7, #3]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	6093      	str	r3, [r2, #8]
 800a300:	e2a7      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	78fa      	ldrb	r2, [r7, #3]
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f001 f947 	bl	800b59e <USB_ReadChInterrupts>
 800a310:	4603      	mov	r3, r0
 800a312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a316:	2b80      	cmp	r3, #128	@ 0x80
 800a318:	f040 8083 	bne.w	800a422 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	799b      	ldrb	r3, [r3, #6]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d111      	bne.n	800a348 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800a324:	78fa      	ldrb	r2, [r7, #3]
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	4613      	mov	r3, r2
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	334d      	adds	r3, #77	@ 0x4d
 800a334:	2207      	movs	r2, #7
 800a336:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f001 f9a9 	bl	800b698 <USB_HC_Halt>
 800a346:	e062      	b.n	800a40e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800a348:	78fa      	ldrb	r2, [r7, #3]
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	4613      	mov	r3, r2
 800a34e:	011b      	lsls	r3, r3, #4
 800a350:	1a9b      	subs	r3, r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	440b      	add	r3, r1
 800a356:	3344      	adds	r3, #68	@ 0x44
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	1c59      	adds	r1, r3, #1
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	4613      	mov	r3, r2
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	1a9b      	subs	r3, r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4403      	add	r3, r0
 800a368:	3344      	adds	r3, #68	@ 0x44
 800a36a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a36c:	78fa      	ldrb	r2, [r7, #3]
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	4613      	mov	r3, r2
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	1a9b      	subs	r3, r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	3344      	adds	r3, #68	@ 0x44
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d922      	bls.n	800a3c8 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a382:	78fa      	ldrb	r2, [r7, #3]
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	4613      	mov	r3, r2
 800a388:	011b      	lsls	r3, r3, #4
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	440b      	add	r3, r1
 800a390:	3344      	adds	r3, #68	@ 0x44
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a396:	78fa      	ldrb	r2, [r7, #3]
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	4613      	mov	r3, r2
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	334c      	adds	r3, #76	@ 0x4c
 800a3a6:	2204      	movs	r2, #4
 800a3a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	334c      	adds	r3, #76	@ 0x4c
 800a3ba:	781a      	ldrb	r2, [r3, #0]
 800a3bc:	78fb      	ldrb	r3, [r7, #3]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f001 fbe8 	bl	800bb96 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a3c6:	e022      	b.n	800a40e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a3c8:	78fa      	ldrb	r2, [r7, #3]
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	011b      	lsls	r3, r3, #4
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	440b      	add	r3, r1
 800a3d6:	334c      	adds	r3, #76	@ 0x4c
 800a3d8:	2202      	movs	r2, #2
 800a3da:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a3f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a3fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	4413      	add	r3, r2
 800a404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a408:	461a      	mov	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	4413      	add	r3, r2
 800a416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a41a:	461a      	mov	r2, r3
 800a41c:	2380      	movs	r3, #128	@ 0x80
 800a41e:	6093      	str	r3, [r2, #8]
 800a420:	e217      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f001 f8b7 	bl	800b59e <USB_ReadChInterrupts>
 800a430:	4603      	mov	r3, r0
 800a432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a43a:	d11b      	bne.n	800a474 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	4613      	mov	r3, r2
 800a442:	011b      	lsls	r3, r3, #4
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	334d      	adds	r3, #77	@ 0x4d
 800a44c:	2209      	movs	r2, #9
 800a44e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	78fa      	ldrb	r2, [r7, #3]
 800a456:	4611      	mov	r1, r2
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f91d 	bl	800b698 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	4413      	add	r3, r2
 800a466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a46a:	461a      	mov	r2, r3
 800a46c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a470:	6093      	str	r3, [r2, #8]
 800a472:	e1ee      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	78fa      	ldrb	r2, [r7, #3]
 800a47a:	4611      	mov	r1, r2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f001 f88e 	bl	800b59e <USB_ReadChInterrupts>
 800a482:	4603      	mov	r3, r0
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b02      	cmp	r3, #2
 800a48a:	f040 81df 	bne.w	800a84c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a48e:	78fb      	ldrb	r3, [r7, #3]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	4413      	add	r3, r2
 800a496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a49a:	461a      	mov	r2, r3
 800a49c:	2302      	movs	r3, #2
 800a49e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800a4a0:	78fa      	ldrb	r2, [r7, #3]
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	011b      	lsls	r3, r3, #4
 800a4a8:	1a9b      	subs	r3, r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	440b      	add	r3, r1
 800a4ae:	334d      	adds	r3, #77	@ 0x4d
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	f040 8093 	bne.w	800a5de <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a4b8:	78fa      	ldrb	r2, [r7, #3]
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	440b      	add	r3, r1
 800a4c6:	334d      	adds	r3, #77	@ 0x4d
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	011b      	lsls	r3, r3, #4
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	440b      	add	r3, r1
 800a4da:	334c      	adds	r3, #76	@ 0x4c
 800a4dc:	2201      	movs	r2, #1
 800a4de:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a4e0:	78fa      	ldrb	r2, [r7, #3]
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	440b      	add	r3, r1
 800a4ee:	3326      	adds	r3, #38	@ 0x26
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d00b      	beq.n	800a50e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800a4f6:	78fa      	ldrb	r2, [r7, #3]
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	1a9b      	subs	r3, r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	440b      	add	r3, r1
 800a504:	3326      	adds	r3, #38	@ 0x26
 800a506:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a508:	2b03      	cmp	r3, #3
 800a50a:	f040 8190 	bne.w	800a82e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	799b      	ldrb	r3, [r3, #6]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d115      	bne.n	800a542 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800a516:	78fa      	ldrb	r2, [r7, #3]
 800a518:	6879      	ldr	r1, [r7, #4]
 800a51a:	4613      	mov	r3, r2
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	1a9b      	subs	r3, r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	440b      	add	r3, r1
 800a524:	333d      	adds	r3, #61	@ 0x3d
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	f083 0301 	eor.w	r3, r3, #1
 800a52e:	b2d8      	uxtb	r0, r3
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	4613      	mov	r3, r2
 800a534:	011b      	lsls	r3, r3, #4
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	333d      	adds	r3, #61	@ 0x3d
 800a53e:	4602      	mov	r2, r0
 800a540:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	799b      	ldrb	r3, [r3, #6]
 800a546:	2b01      	cmp	r3, #1
 800a548:	f040 8171 	bne.w	800a82e <HCD_HC_OUT_IRQHandler+0x954>
 800a54c:	78fa      	ldrb	r2, [r7, #3]
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	4613      	mov	r3, r2
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	440b      	add	r3, r1
 800a55a:	3334      	adds	r3, #52	@ 0x34
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 8165 	beq.w	800a82e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800a564:	78fa      	ldrb	r2, [r7, #3]
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	4613      	mov	r3, r2
 800a56a:	011b      	lsls	r3, r3, #4
 800a56c:	1a9b      	subs	r3, r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	440b      	add	r3, r1
 800a572:	3334      	adds	r3, #52	@ 0x34
 800a574:	6819      	ldr	r1, [r3, #0]
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	4613      	mov	r3, r2
 800a57c:	011b      	lsls	r3, r3, #4
 800a57e:	1a9b      	subs	r3, r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4403      	add	r3, r0
 800a584:	3328      	adds	r3, #40	@ 0x28
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	440b      	add	r3, r1
 800a58a:	1e59      	subs	r1, r3, #1
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4613      	mov	r3, r2
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	1a9b      	subs	r3, r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4403      	add	r3, r0
 800a59a:	3328      	adds	r3, #40	@ 0x28
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5a2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 813f 	beq.w	800a82e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800a5b0:	78fa      	ldrb	r2, [r7, #3]
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	011b      	lsls	r3, r3, #4
 800a5b8:	1a9b      	subs	r3, r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	440b      	add	r3, r1
 800a5be:	333d      	adds	r3, #61	@ 0x3d
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	78fa      	ldrb	r2, [r7, #3]
 800a5c4:	f083 0301 	eor.w	r3, r3, #1
 800a5c8:	b2d8      	uxtb	r0, r3
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	1a9b      	subs	r3, r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	440b      	add	r3, r1
 800a5d6:	333d      	adds	r3, #61	@ 0x3d
 800a5d8:	4602      	mov	r2, r0
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	e127      	b.n	800a82e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a5de:	78fa      	ldrb	r2, [r7, #3]
 800a5e0:	6879      	ldr	r1, [r7, #4]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	011b      	lsls	r3, r3, #4
 800a5e6:	1a9b      	subs	r3, r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	334d      	adds	r3, #77	@ 0x4d
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d120      	bne.n	800a636 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	011b      	lsls	r3, r3, #4
 800a5fc:	1a9b      	subs	r3, r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	440b      	add	r3, r1
 800a602:	334d      	adds	r3, #77	@ 0x4d
 800a604:	2202      	movs	r2, #2
 800a606:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800a608:	78fa      	ldrb	r2, [r7, #3]
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	4613      	mov	r3, r2
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	1a9b      	subs	r3, r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	440b      	add	r3, r1
 800a616:	331b      	adds	r3, #27
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	f040 8107 	bne.w	800a82e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	4613      	mov	r3, r2
 800a626:	011b      	lsls	r3, r3, #4
 800a628:	1a9b      	subs	r3, r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	440b      	add	r3, r1
 800a62e:	334c      	adds	r3, #76	@ 0x4c
 800a630:	2202      	movs	r2, #2
 800a632:	701a      	strb	r2, [r3, #0]
 800a634:	e0fb      	b.n	800a82e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	4613      	mov	r3, r2
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	1a9b      	subs	r3, r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	440b      	add	r3, r1
 800a644:	334d      	adds	r3, #77	@ 0x4d
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d13a      	bne.n	800a6c2 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a64c:	78fa      	ldrb	r2, [r7, #3]
 800a64e:	6879      	ldr	r1, [r7, #4]
 800a650:	4613      	mov	r3, r2
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	1a9b      	subs	r3, r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	440b      	add	r3, r1
 800a65a:	334d      	adds	r3, #77	@ 0x4d
 800a65c:	2202      	movs	r2, #2
 800a65e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a660:	78fa      	ldrb	r2, [r7, #3]
 800a662:	6879      	ldr	r1, [r7, #4]
 800a664:	4613      	mov	r3, r2
 800a666:	011b      	lsls	r3, r3, #4
 800a668:	1a9b      	subs	r3, r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	440b      	add	r3, r1
 800a66e:	334c      	adds	r3, #76	@ 0x4c
 800a670:	2202      	movs	r2, #2
 800a672:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	4613      	mov	r3, r2
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	440b      	add	r3, r1
 800a682:	331b      	adds	r3, #27
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b01      	cmp	r3, #1
 800a688:	f040 80d1 	bne.w	800a82e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800a68c:	78fa      	ldrb	r2, [r7, #3]
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	4613      	mov	r3, r2
 800a692:	011b      	lsls	r3, r3, #4
 800a694:	1a9b      	subs	r3, r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	440b      	add	r3, r1
 800a69a:	331b      	adds	r3, #27
 800a69c:	2200      	movs	r2, #0
 800a69e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	0151      	lsls	r1, r2, #5
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	440a      	add	r2, r1
 800a6b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6be:	6053      	str	r3, [r2, #4]
 800a6c0:	e0b5      	b.n	800a82e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	6879      	ldr	r1, [r7, #4]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	334d      	adds	r3, #77	@ 0x4d
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b05      	cmp	r3, #5
 800a6d6:	d114      	bne.n	800a702 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a6d8:	78fa      	ldrb	r2, [r7, #3]
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	1a9b      	subs	r3, r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	334d      	adds	r3, #77	@ 0x4d
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800a6ec:	78fa      	ldrb	r2, [r7, #3]
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	011b      	lsls	r3, r3, #4
 800a6f4:	1a9b      	subs	r3, r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	440b      	add	r3, r1
 800a6fa:	334c      	adds	r3, #76	@ 0x4c
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	e095      	b.n	800a82e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a702:	78fa      	ldrb	r2, [r7, #3]
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4613      	mov	r3, r2
 800a708:	011b      	lsls	r3, r3, #4
 800a70a:	1a9b      	subs	r3, r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	440b      	add	r3, r1
 800a710:	334d      	adds	r3, #77	@ 0x4d
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b06      	cmp	r3, #6
 800a716:	d114      	bne.n	800a742 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a718:	78fa      	ldrb	r2, [r7, #3]
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	4613      	mov	r3, r2
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	1a9b      	subs	r3, r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	440b      	add	r3, r1
 800a726:	334d      	adds	r3, #77	@ 0x4d
 800a728:	2202      	movs	r2, #2
 800a72a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4613      	mov	r3, r2
 800a732:	011b      	lsls	r3, r3, #4
 800a734:	1a9b      	subs	r3, r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	334c      	adds	r3, #76	@ 0x4c
 800a73c:	2205      	movs	r2, #5
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	e075      	b.n	800a82e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a742:	78fa      	ldrb	r2, [r7, #3]
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	011b      	lsls	r3, r3, #4
 800a74a:	1a9b      	subs	r3, r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	440b      	add	r3, r1
 800a750:	334d      	adds	r3, #77	@ 0x4d
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b07      	cmp	r3, #7
 800a756:	d00a      	beq.n	800a76e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a758:	78fa      	ldrb	r2, [r7, #3]
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	4613      	mov	r3, r2
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	1a9b      	subs	r3, r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	440b      	add	r3, r1
 800a766:	334d      	adds	r3, #77	@ 0x4d
 800a768:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a76a:	2b09      	cmp	r3, #9
 800a76c:	d170      	bne.n	800a850 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a76e:	78fa      	ldrb	r2, [r7, #3]
 800a770:	6879      	ldr	r1, [r7, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	1a9b      	subs	r3, r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	440b      	add	r3, r1
 800a77c:	334d      	adds	r3, #77	@ 0x4d
 800a77e:	2202      	movs	r2, #2
 800a780:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a782:	78fa      	ldrb	r2, [r7, #3]
 800a784:	6879      	ldr	r1, [r7, #4]
 800a786:	4613      	mov	r3, r2
 800a788:	011b      	lsls	r3, r3, #4
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	440b      	add	r3, r1
 800a790:	3344      	adds	r3, #68	@ 0x44
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	1c59      	adds	r1, r3, #1
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4613      	mov	r3, r2
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	1a9b      	subs	r3, r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4403      	add	r3, r0
 800a7a2:	3344      	adds	r3, #68	@ 0x44
 800a7a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a7a6:	78fa      	ldrb	r2, [r7, #3]
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	440b      	add	r3, r1
 800a7b4:	3344      	adds	r3, #68	@ 0x44
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d914      	bls.n	800a7e6 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	3344      	adds	r3, #68	@ 0x44
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a7d0:	78fa      	ldrb	r2, [r7, #3]
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	011b      	lsls	r3, r3, #4
 800a7d8:	1a9b      	subs	r3, r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	334c      	adds	r3, #76	@ 0x4c
 800a7e0:	2204      	movs	r2, #4
 800a7e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a7e4:	e022      	b.n	800a82c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a7e6:	78fa      	ldrb	r2, [r7, #3]
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	1a9b      	subs	r3, r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	334c      	adds	r3, #76	@ 0x4c
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a7fa:	78fb      	ldrb	r3, [r7, #3]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	4413      	add	r3, r2
 800a802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a810:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a818:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	4413      	add	r3, r2
 800a822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a826:	461a      	mov	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a82c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	4613      	mov	r3, r2
 800a834:	011b      	lsls	r3, r3, #4
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	440b      	add	r3, r1
 800a83c:	334c      	adds	r3, #76	@ 0x4c
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f9a6 	bl	800bb96 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a84a:	e002      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800a84c:	bf00      	nop
 800a84e:	e000      	b.n	800a852 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800a850:	bf00      	nop
  }
}
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	@ 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a868:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	0c5b      	lsrs	r3, r3, #17
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	091b      	lsrs	r3, r3, #4
 800a888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a88c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d004      	beq.n	800a89e <HCD_RXQLVL_IRQHandler+0x46>
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2b05      	cmp	r3, #5
 800a898:	f000 80b6 	beq.w	800aa08 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800a89c:	e0b7      	b.n	800aa0e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80b3 	beq.w	800aa0c <HCD_RXQLVL_IRQHandler+0x1b4>
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	69ba      	ldr	r2, [r7, #24]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	011b      	lsls	r3, r3, #4
 800a8ae:	1a9b      	subs	r3, r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	440b      	add	r3, r1
 800a8b4:	332c      	adds	r3, #44	@ 0x2c
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 80a7 	beq.w	800aa0c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	011b      	lsls	r3, r3, #4
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	440b      	add	r3, r1
 800a8cc:	3338      	adds	r3, #56	@ 0x38
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	18d1      	adds	r1, r2, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	69ba      	ldr	r2, [r7, #24]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	1a9b      	subs	r3, r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4403      	add	r3, r0
 800a8e2:	3334      	adds	r3, #52	@ 0x34
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4299      	cmp	r1, r3
 800a8e8:	f200 8083 	bhi.w	800a9f2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6818      	ldr	r0, [r3, #0]
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	69ba      	ldr	r2, [r7, #24]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	440b      	add	r3, r1
 800a8fe:	332c      	adds	r3, #44	@ 0x2c
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	b292      	uxth	r2, r2
 800a906:	4619      	mov	r1, r3
 800a908:	f000 fdde 	bl	800b4c8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	69ba      	ldr	r2, [r7, #24]
 800a910:	4613      	mov	r3, r2
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	1a9b      	subs	r3, r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	332c      	adds	r3, #44	@ 0x2c
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	18d1      	adds	r1, r2, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	4613      	mov	r3, r2
 800a928:	011b      	lsls	r3, r3, #4
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4403      	add	r3, r0
 800a930:	332c      	adds	r3, #44	@ 0x2c
 800a932:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	4613      	mov	r3, r2
 800a93a:	011b      	lsls	r3, r3, #4
 800a93c:	1a9b      	subs	r3, r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	440b      	add	r3, r1
 800a942:	3338      	adds	r3, #56	@ 0x38
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	18d1      	adds	r1, r2, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	4613      	mov	r3, r2
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	1a9b      	subs	r3, r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4403      	add	r3, r0
 800a958:	3338      	adds	r3, #56	@ 0x38
 800a95a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	4413      	add	r3, r2
 800a964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	0cdb      	lsrs	r3, r3, #19
 800a96c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a970:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	69ba      	ldr	r2, [r7, #24]
 800a976:	4613      	mov	r3, r2
 800a978:	011b      	lsls	r3, r3, #4
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	440b      	add	r3, r1
 800a980:	3328      	adds	r3, #40	@ 0x28
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	4293      	cmp	r3, r2
 800a98a:	d13f      	bne.n	800aa0c <HCD_RXQLVL_IRQHandler+0x1b4>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d03c      	beq.n	800aa0c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a9b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9be:	461a      	mov	r2, r3
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	1a9b      	subs	r3, r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	440b      	add	r3, r1
 800a9d2:	333c      	adds	r3, #60	@ 0x3c
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	f083 0301 	eor.w	r3, r3, #1
 800a9da:	b2d8      	uxtb	r0, r3
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	333c      	adds	r3, #60	@ 0x3c
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	701a      	strb	r2, [r3, #0]
      break;
 800a9f0:	e00c      	b.n	800aa0c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	69ba      	ldr	r2, [r7, #24]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	011b      	lsls	r3, r3, #4
 800a9fa:	1a9b      	subs	r3, r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	440b      	add	r3, r1
 800aa00:	334c      	adds	r3, #76	@ 0x4c
 800aa02:	2204      	movs	r2, #4
 800aa04:	701a      	strb	r2, [r3, #0]
      break;
 800aa06:	e001      	b.n	800aa0c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800aa08:	bf00      	nop
 800aa0a:	e000      	b.n	800aa0e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800aa0c:	bf00      	nop
  }
}
 800aa0e:	bf00      	nop
 800aa10:	3728      	adds	r7, #40	@ 0x28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b086      	sub	sp, #24
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800aa42:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d10b      	bne.n	800aa66 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d102      	bne.n	800aa5e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 f880 	bl	800bb5e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f043 0302 	orr.w	r3, r3, #2
 800aa64:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f003 0308 	and.w	r3, r3, #8
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d132      	bne.n	800aad6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f043 0308 	orr.w	r3, r3, #8
 800aa76:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f003 0304 	and.w	r3, r3, #4
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d126      	bne.n	800aad0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	7a5b      	ldrb	r3, [r3, #9]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d113      	bne.n	800aab2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800aa90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa94:	d106      	bne.n	800aaa4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2102      	movs	r1, #2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 fdad 	bl	800b5fc <USB_InitFSLSPClkSel>
 800aaa2:	e011      	b.n	800aac8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 fda6 	bl	800b5fc <USB_InitFSLSPClkSel>
 800aab0:	e00a      	b.n	800aac8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	79db      	ldrb	r3, [r3, #7]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d106      	bne.n	800aac8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aac0:	461a      	mov	r2, r3
 800aac2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800aac6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 f872 	bl	800bbb2 <HAL_HCD_PortEnabled_Callback>
 800aace:	e002      	b.n	800aad6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f001 f87c 	bl	800bbce <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d103      	bne.n	800aae8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f043 0320 	orr.w	r3, r3, #32
 800aae6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800aaee:	461a      	mov	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	6013      	str	r3, [r2, #0]
}
 800aaf4:	bf00      	nop
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e267      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d075      	beq.n	800ac06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ab1a:	4b88      	ldr	r3, [pc, #544]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f003 030c 	and.w	r3, r3, #12
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d00c      	beq.n	800ab40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab26:	4b85      	ldr	r3, [pc, #532]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d112      	bne.n	800ab58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab32:	4b82      	ldr	r3, [pc, #520]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab3e:	d10b      	bne.n	800ab58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab40:	4b7e      	ldr	r3, [pc, #504]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d05b      	beq.n	800ac04 <HAL_RCC_OscConfig+0x108>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d157      	bne.n	800ac04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e242      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab60:	d106      	bne.n	800ab70 <HAL_RCC_OscConfig+0x74>
 800ab62:	4b76      	ldr	r3, [pc, #472]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a75      	ldr	r2, [pc, #468]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	e01d      	b.n	800abac <HAL_RCC_OscConfig+0xb0>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab78:	d10c      	bne.n	800ab94 <HAL_RCC_OscConfig+0x98>
 800ab7a:	4b70      	ldr	r3, [pc, #448]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a6f      	ldr	r2, [pc, #444]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	4b6d      	ldr	r3, [pc, #436]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a6c      	ldr	r2, [pc, #432]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	e00b      	b.n	800abac <HAL_RCC_OscConfig+0xb0>
 800ab94:	4b69      	ldr	r3, [pc, #420]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a68      	ldr	r2, [pc, #416]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ab9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	4b66      	ldr	r3, [pc, #408]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a65      	ldr	r2, [pc, #404]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800aba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d013      	beq.n	800abdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abb4:	f7fd ff3a 	bl	8008a2c <HAL_GetTick>
 800abb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abba:	e008      	b.n	800abce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abbc:	f7fd ff36 	bl	8008a2c <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b64      	cmp	r3, #100	@ 0x64
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e207      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abce:	4b5b      	ldr	r3, [pc, #364]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0f0      	beq.n	800abbc <HAL_RCC_OscConfig+0xc0>
 800abda:	e014      	b.n	800ac06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abdc:	f7fd ff26 	bl	8008a2c <HAL_GetTick>
 800abe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abe4:	f7fd ff22 	bl	8008a2c <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b64      	cmp	r3, #100	@ 0x64
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e1f3      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abf6:	4b51      	ldr	r3, [pc, #324]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f0      	bne.n	800abe4 <HAL_RCC_OscConfig+0xe8>
 800ac02:	e000      	b.n	800ac06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d063      	beq.n	800acda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ac12:	4b4a      	ldr	r3, [pc, #296]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f003 030c 	and.w	r3, r3, #12
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00b      	beq.n	800ac36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac1e:	4b47      	ldr	r3, [pc, #284]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d11c      	bne.n	800ac64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac2a:	4b44      	ldr	r3, [pc, #272]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d116      	bne.n	800ac64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac36:	4b41      	ldr	r3, [pc, #260]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d005      	beq.n	800ac4e <HAL_RCC_OscConfig+0x152>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d001      	beq.n	800ac4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e1c7      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac4e:	4b3b      	ldr	r3, [pc, #236]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	4937      	ldr	r1, [pc, #220]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac62:	e03a      	b.n	800acda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d020      	beq.n	800acae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac6c:	4b34      	ldr	r3, [pc, #208]	@ (800ad40 <HAL_RCC_OscConfig+0x244>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac72:	f7fd fedb 	bl	8008a2c <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac78:	e008      	b.n	800ac8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac7a:	f7fd fed7 	bl	8008a2c <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e1a8      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d0f0      	beq.n	800ac7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac98:	4b28      	ldr	r3, [pc, #160]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	4925      	ldr	r1, [pc, #148]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	600b      	str	r3, [r1, #0]
 800acac:	e015      	b.n	800acda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acae:	4b24      	ldr	r3, [pc, #144]	@ (800ad40 <HAL_RCC_OscConfig+0x244>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acb4:	f7fd feba 	bl	8008a2c <HAL_GetTick>
 800acb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acbc:	f7fd feb6 	bl	8008a2c <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e187      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acce:	4b1b      	ldr	r3, [pc, #108]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1f0      	bne.n	800acbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0308 	and.w	r3, r3, #8
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d036      	beq.n	800ad54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d016      	beq.n	800ad1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acee:	4b15      	ldr	r3, [pc, #84]	@ (800ad44 <HAL_RCC_OscConfig+0x248>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acf4:	f7fd fe9a 	bl	8008a2c <HAL_GetTick>
 800acf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acfa:	e008      	b.n	800ad0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acfc:	f7fd fe96 	bl	8008a2c <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e167      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad3c <HAL_RCC_OscConfig+0x240>)
 800ad10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0f0      	beq.n	800acfc <HAL_RCC_OscConfig+0x200>
 800ad1a:	e01b      	b.n	800ad54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad1c:	4b09      	ldr	r3, [pc, #36]	@ (800ad44 <HAL_RCC_OscConfig+0x248>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad22:	f7fd fe83 	bl	8008a2c <HAL_GetTick>
 800ad26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad28:	e00e      	b.n	800ad48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad2a:	f7fd fe7f 	bl	8008a2c <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d907      	bls.n	800ad48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e150      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
 800ad3c:	40023800 	.word	0x40023800
 800ad40:	42470000 	.word	0x42470000
 800ad44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad48:	4b88      	ldr	r3, [pc, #544]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ad4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad4c:	f003 0302 	and.w	r3, r3, #2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1ea      	bne.n	800ad2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 8097 	beq.w	800ae90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad66:	4b81      	ldr	r3, [pc, #516]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ad68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10f      	bne.n	800ad92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad72:	2300      	movs	r3, #0
 800ad74:	60bb      	str	r3, [r7, #8]
 800ad76:	4b7d      	ldr	r3, [pc, #500]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ad78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad7a:	4a7c      	ldr	r2, [pc, #496]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ad7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad80:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad82:	4b7a      	ldr	r3, [pc, #488]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ad84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad8a:	60bb      	str	r3, [r7, #8]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad92:	4b77      	ldr	r3, [pc, #476]	@ (800af70 <HAL_RCC_OscConfig+0x474>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d118      	bne.n	800add0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad9e:	4b74      	ldr	r3, [pc, #464]	@ (800af70 <HAL_RCC_OscConfig+0x474>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a73      	ldr	r2, [pc, #460]	@ (800af70 <HAL_RCC_OscConfig+0x474>)
 800ada4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ada8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800adaa:	f7fd fe3f 	bl	8008a2c <HAL_GetTick>
 800adae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adb0:	e008      	b.n	800adc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adb2:	f7fd fe3b 	bl	8008a2c <HAL_GetTick>
 800adb6:	4602      	mov	r2, r0
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d901      	bls.n	800adc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e10c      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adc4:	4b6a      	ldr	r3, [pc, #424]	@ (800af70 <HAL_RCC_OscConfig+0x474>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0f0      	beq.n	800adb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d106      	bne.n	800ade6 <HAL_RCC_OscConfig+0x2ea>
 800add8:	4b64      	ldr	r3, [pc, #400]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800adda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800addc:	4a63      	ldr	r2, [pc, #396]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ade4:	e01c      	b.n	800ae20 <HAL_RCC_OscConfig+0x324>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	2b05      	cmp	r3, #5
 800adec:	d10c      	bne.n	800ae08 <HAL_RCC_OscConfig+0x30c>
 800adee:	4b5f      	ldr	r3, [pc, #380]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800adf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adf2:	4a5e      	ldr	r2, [pc, #376]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800adf4:	f043 0304 	orr.w	r3, r3, #4
 800adf8:	6713      	str	r3, [r2, #112]	@ 0x70
 800adfa:	4b5c      	ldr	r3, [pc, #368]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800adfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adfe:	4a5b      	ldr	r2, [pc, #364]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae00:	f043 0301 	orr.w	r3, r3, #1
 800ae04:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae06:	e00b      	b.n	800ae20 <HAL_RCC_OscConfig+0x324>
 800ae08:	4b58      	ldr	r3, [pc, #352]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae0c:	4a57      	ldr	r2, [pc, #348]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae0e:	f023 0301 	bic.w	r3, r3, #1
 800ae12:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae14:	4b55      	ldr	r3, [pc, #340]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae18:	4a54      	ldr	r2, [pc, #336]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae1a:	f023 0304 	bic.w	r3, r3, #4
 800ae1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d015      	beq.n	800ae54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae28:	f7fd fe00 	bl	8008a2c <HAL_GetTick>
 800ae2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae2e:	e00a      	b.n	800ae46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae30:	f7fd fdfc 	bl	8008a2c <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e0cb      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae46:	4b49      	ldr	r3, [pc, #292]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0ee      	beq.n	800ae30 <HAL_RCC_OscConfig+0x334>
 800ae52:	e014      	b.n	800ae7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae54:	f7fd fdea 	bl	8008a2c <HAL_GetTick>
 800ae58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae5a:	e00a      	b.n	800ae72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae5c:	f7fd fde6 	bl	8008a2c <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e0b5      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae72:	4b3e      	ldr	r3, [pc, #248]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1ee      	bne.n	800ae5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d105      	bne.n	800ae90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae84:	4b39      	ldr	r3, [pc, #228]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae88:	4a38      	ldr	r2, [pc, #224]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 80a1 	beq.w	800afdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ae9a:	4b34      	ldr	r3, [pc, #208]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f003 030c 	and.w	r3, r3, #12
 800aea2:	2b08      	cmp	r3, #8
 800aea4:	d05c      	beq.n	800af60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d141      	bne.n	800af32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeae:	4b31      	ldr	r3, [pc, #196]	@ (800af74 <HAL_RCC_OscConfig+0x478>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeb4:	f7fd fdba 	bl	8008a2c <HAL_GetTick>
 800aeb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aeba:	e008      	b.n	800aece <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aebc:	f7fd fdb6 	bl	8008a2c <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d901      	bls.n	800aece <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e087      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aece:	4b27      	ldr	r3, [pc, #156]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f0      	bne.n	800aebc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69da      	ldr	r2, [r3, #28]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee8:	019b      	lsls	r3, r3, #6
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef0:	085b      	lsrs	r3, r3, #1
 800aef2:	3b01      	subs	r3, #1
 800aef4:	041b      	lsls	r3, r3, #16
 800aef6:	431a      	orrs	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefc:	061b      	lsls	r3, r3, #24
 800aefe:	491b      	ldr	r1, [pc, #108]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800af00:	4313      	orrs	r3, r2
 800af02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af04:	4b1b      	ldr	r3, [pc, #108]	@ (800af74 <HAL_RCC_OscConfig+0x478>)
 800af06:	2201      	movs	r2, #1
 800af08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af0a:	f7fd fd8f 	bl	8008a2c <HAL_GetTick>
 800af0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af10:	e008      	b.n	800af24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af12:	f7fd fd8b 	bl	8008a2c <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d901      	bls.n	800af24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e05c      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af24:	4b11      	ldr	r3, [pc, #68]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0f0      	beq.n	800af12 <HAL_RCC_OscConfig+0x416>
 800af30:	e054      	b.n	800afdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af32:	4b10      	ldr	r3, [pc, #64]	@ (800af74 <HAL_RCC_OscConfig+0x478>)
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af38:	f7fd fd78 	bl	8008a2c <HAL_GetTick>
 800af3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af3e:	e008      	b.n	800af52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af40:	f7fd fd74 	bl	8008a2c <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d901      	bls.n	800af52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e045      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af52:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <HAL_RCC_OscConfig+0x470>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1f0      	bne.n	800af40 <HAL_RCC_OscConfig+0x444>
 800af5e:	e03d      	b.n	800afdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d107      	bne.n	800af78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e038      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
 800af6c:	40023800 	.word	0x40023800
 800af70:	40007000 	.word	0x40007000
 800af74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800af78:	4b1b      	ldr	r3, [pc, #108]	@ (800afe8 <HAL_RCC_OscConfig+0x4ec>)
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d028      	beq.n	800afd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af90:	429a      	cmp	r2, r3
 800af92:	d121      	bne.n	800afd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d11a      	bne.n	800afd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800afa8:	4013      	ands	r3, r2
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800afae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d111      	bne.n	800afd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afbe:	085b      	lsrs	r3, r3, #1
 800afc0:	3b01      	subs	r3, #1
 800afc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d107      	bne.n	800afd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d001      	beq.n	800afdc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e000      	b.n	800afde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	40023800 	.word	0x40023800

0800afec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e0cc      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b000:	4b68      	ldr	r3, [pc, #416]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d90c      	bls.n	800b028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b00e:	4b65      	ldr	r3, [pc, #404]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b016:	4b63      	ldr	r3, [pc, #396]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0307 	and.w	r3, r3, #7
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d001      	beq.n	800b028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e0b8      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d020      	beq.n	800b076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b040:	4b59      	ldr	r3, [pc, #356]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	4a58      	ldr	r2, [pc, #352]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b046:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b04a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0308 	and.w	r3, r3, #8
 800b054:	2b00      	cmp	r3, #0
 800b056:	d005      	beq.n	800b064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b058:	4b53      	ldr	r3, [pc, #332]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	4a52      	ldr	r2, [pc, #328]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b05e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b064:	4b50      	ldr	r3, [pc, #320]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	494d      	ldr	r1, [pc, #308]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b072:	4313      	orrs	r3, r2
 800b074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d044      	beq.n	800b10c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d107      	bne.n	800b09a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b08a:	4b47      	ldr	r3, [pc, #284]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d119      	bne.n	800b0ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e07f      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d003      	beq.n	800b0aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d107      	bne.n	800b0ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0aa:	4b3f      	ldr	r3, [pc, #252]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d109      	bne.n	800b0ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e06f      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0ba:	4b3b      	ldr	r3, [pc, #236]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0302 	and.w	r3, r3, #2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e067      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0ca:	4b37      	ldr	r3, [pc, #220]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f023 0203 	bic.w	r2, r3, #3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	4934      	ldr	r1, [pc, #208]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b0dc:	f7fd fca6 	bl	8008a2c <HAL_GetTick>
 800b0e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0e2:	e00a      	b.n	800b0fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0e4:	f7fd fca2 	bl	8008a2c <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d901      	bls.n	800b0fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e04f      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0fa:	4b2b      	ldr	r3, [pc, #172]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f003 020c 	and.w	r2, r3, #12
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	429a      	cmp	r2, r3
 800b10a:	d1eb      	bne.n	800b0e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b10c:	4b25      	ldr	r3, [pc, #148]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0307 	and.w	r3, r3, #7
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	429a      	cmp	r2, r3
 800b118:	d20c      	bcs.n	800b134 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b11a:	4b22      	ldr	r3, [pc, #136]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b122:	4b20      	ldr	r3, [pc, #128]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1b8>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d001      	beq.n	800b134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e032      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b140:	4b19      	ldr	r3, [pc, #100]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	4916      	ldr	r1, [pc, #88]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d009      	beq.n	800b172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b15e:	4b12      	ldr	r3, [pc, #72]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	490e      	ldr	r1, [pc, #56]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b172:	f000 f821 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 800b176:	4602      	mov	r2, r0
 800b178:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1bc>)
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	091b      	lsrs	r3, r3, #4
 800b17e:	f003 030f 	and.w	r3, r3, #15
 800b182:	490a      	ldr	r1, [pc, #40]	@ (800b1ac <HAL_RCC_ClockConfig+0x1c0>)
 800b184:	5ccb      	ldrb	r3, [r1, r3]
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	4a09      	ldr	r2, [pc, #36]	@ (800b1b0 <HAL_RCC_ClockConfig+0x1c4>)
 800b18c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b18e:	4b09      	ldr	r3, [pc, #36]	@ (800b1b4 <HAL_RCC_ClockConfig+0x1c8>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f7fd fc06 	bl	80089a4 <HAL_InitTick>

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	40023c00 	.word	0x40023c00
 800b1a8:	40023800 	.word	0x40023800
 800b1ac:	0800c60c 	.word	0x0800c60c
 800b1b0:	20000000 	.word	0x20000000
 800b1b4:	20000004 	.word	0x20000004

0800b1b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1bc:	b094      	sub	sp, #80	@ 0x50
 800b1be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1d0:	4b79      	ldr	r3, [pc, #484]	@ (800b3b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f003 030c 	and.w	r3, r3, #12
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d00d      	beq.n	800b1f8 <HAL_RCC_GetSysClockFreq+0x40>
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	f200 80e1 	bhi.w	800b3a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d002      	beq.n	800b1ec <HAL_RCC_GetSysClockFreq+0x34>
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d003      	beq.n	800b1f2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b1ea:	e0db      	b.n	800b3a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b1ec:	4b73      	ldr	r3, [pc, #460]	@ (800b3bc <HAL_RCC_GetSysClockFreq+0x204>)
 800b1ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b1f0:	e0db      	b.n	800b3aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b1f2:	4b73      	ldr	r3, [pc, #460]	@ (800b3c0 <HAL_RCC_GetSysClockFreq+0x208>)
 800b1f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b1f6:	e0d8      	b.n	800b3aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1f8:	4b6f      	ldr	r3, [pc, #444]	@ (800b3b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b200:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b202:	4b6d      	ldr	r3, [pc, #436]	@ (800b3b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d063      	beq.n	800b2d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b20e:	4b6a      	ldr	r3, [pc, #424]	@ (800b3b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	099b      	lsrs	r3, r3, #6
 800b214:	2200      	movs	r2, #0
 800b216:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b218:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b220:	633b      	str	r3, [r7, #48]	@ 0x30
 800b222:	2300      	movs	r3, #0
 800b224:	637b      	str	r3, [r7, #52]	@ 0x34
 800b226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b22a:	4622      	mov	r2, r4
 800b22c:	462b      	mov	r3, r5
 800b22e:	f04f 0000 	mov.w	r0, #0
 800b232:	f04f 0100 	mov.w	r1, #0
 800b236:	0159      	lsls	r1, r3, #5
 800b238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b23c:	0150      	lsls	r0, r2, #5
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	4621      	mov	r1, r4
 800b244:	1a51      	subs	r1, r2, r1
 800b246:	6139      	str	r1, [r7, #16]
 800b248:	4629      	mov	r1, r5
 800b24a:	eb63 0301 	sbc.w	r3, r3, r1
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	f04f 0200 	mov.w	r2, #0
 800b254:	f04f 0300 	mov.w	r3, #0
 800b258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b25c:	4659      	mov	r1, fp
 800b25e:	018b      	lsls	r3, r1, #6
 800b260:	4651      	mov	r1, sl
 800b262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b266:	4651      	mov	r1, sl
 800b268:	018a      	lsls	r2, r1, #6
 800b26a:	4651      	mov	r1, sl
 800b26c:	ebb2 0801 	subs.w	r8, r2, r1
 800b270:	4659      	mov	r1, fp
 800b272:	eb63 0901 	sbc.w	r9, r3, r1
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	f04f 0300 	mov.w	r3, #0
 800b27e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b28a:	4690      	mov	r8, r2
 800b28c:	4699      	mov	r9, r3
 800b28e:	4623      	mov	r3, r4
 800b290:	eb18 0303 	adds.w	r3, r8, r3
 800b294:	60bb      	str	r3, [r7, #8]
 800b296:	462b      	mov	r3, r5
 800b298:	eb49 0303 	adc.w	r3, r9, r3
 800b29c:	60fb      	str	r3, [r7, #12]
 800b29e:	f04f 0200 	mov.w	r2, #0
 800b2a2:	f04f 0300 	mov.w	r3, #0
 800b2a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	024b      	lsls	r3, r1, #9
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	024a      	lsls	r2, r1, #9
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2be:	2200      	movs	r2, #0
 800b2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b2c8:	f7fc ff7e 	bl	80081c8 <__aeabi_uldivmod>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2d4:	e058      	b.n	800b388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2d6:	4b38      	ldr	r3, [pc, #224]	@ (800b3b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	099b      	lsrs	r3, r3, #6
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b2e6:	623b      	str	r3, [r7, #32]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b2f0:	4642      	mov	r2, r8
 800b2f2:	464b      	mov	r3, r9
 800b2f4:	f04f 0000 	mov.w	r0, #0
 800b2f8:	f04f 0100 	mov.w	r1, #0
 800b2fc:	0159      	lsls	r1, r3, #5
 800b2fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b302:	0150      	lsls	r0, r2, #5
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	4641      	mov	r1, r8
 800b30a:	ebb2 0a01 	subs.w	sl, r2, r1
 800b30e:	4649      	mov	r1, r9
 800b310:	eb63 0b01 	sbc.w	fp, r3, r1
 800b314:	f04f 0200 	mov.w	r2, #0
 800b318:	f04f 0300 	mov.w	r3, #0
 800b31c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b328:	ebb2 040a 	subs.w	r4, r2, sl
 800b32c:	eb63 050b 	sbc.w	r5, r3, fp
 800b330:	f04f 0200 	mov.w	r2, #0
 800b334:	f04f 0300 	mov.w	r3, #0
 800b338:	00eb      	lsls	r3, r5, #3
 800b33a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b33e:	00e2      	lsls	r2, r4, #3
 800b340:	4614      	mov	r4, r2
 800b342:	461d      	mov	r5, r3
 800b344:	4643      	mov	r3, r8
 800b346:	18e3      	adds	r3, r4, r3
 800b348:	603b      	str	r3, [r7, #0]
 800b34a:	464b      	mov	r3, r9
 800b34c:	eb45 0303 	adc.w	r3, r5, r3
 800b350:	607b      	str	r3, [r7, #4]
 800b352:	f04f 0200 	mov.w	r2, #0
 800b356:	f04f 0300 	mov.w	r3, #0
 800b35a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b35e:	4629      	mov	r1, r5
 800b360:	028b      	lsls	r3, r1, #10
 800b362:	4621      	mov	r1, r4
 800b364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b368:	4621      	mov	r1, r4
 800b36a:	028a      	lsls	r2, r1, #10
 800b36c:	4610      	mov	r0, r2
 800b36e:	4619      	mov	r1, r3
 800b370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b372:	2200      	movs	r2, #0
 800b374:	61bb      	str	r3, [r7, #24]
 800b376:	61fa      	str	r2, [r7, #28]
 800b378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b37c:	f7fc ff24 	bl	80081c8 <__aeabi_uldivmod>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4613      	mov	r3, r2
 800b386:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b388:	4b0b      	ldr	r3, [pc, #44]	@ (800b3b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	0c1b      	lsrs	r3, r3, #16
 800b38e:	f003 0303 	and.w	r3, r3, #3
 800b392:	3301      	adds	r3, #1
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b398:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b3a2:	e002      	b.n	800b3aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b3a4:	4b05      	ldr	r3, [pc, #20]	@ (800b3bc <HAL_RCC_GetSysClockFreq+0x204>)
 800b3a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b3a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b3aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3750      	adds	r7, #80	@ 0x50
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3b6:	bf00      	nop
 800b3b8:	40023800 	.word	0x40023800
 800b3bc:	00f42400 	.word	0x00f42400
 800b3c0:	007a1200 	.word	0x007a1200

0800b3c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	f043 0201 	orr.w	r2, r3, #1
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f023 0201 	bic.w	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b422:	d901      	bls.n	800b428 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e01b      	b.n	800b460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	daf2      	bge.n	800b416 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	019b      	lsls	r3, r3, #6
 800b438:	f043 0220 	orr.w	r2, r3, #32
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3301      	adds	r3, #1
 800b444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b44c:	d901      	bls.n	800b452 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e006      	b.n	800b460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b20      	cmp	r3, #32
 800b45c:	d0f0      	beq.n	800b440 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b474:	2300      	movs	r3, #0
 800b476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3301      	adds	r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b484:	d901      	bls.n	800b48a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e018      	b.n	800b4bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	daf2      	bge.n	800b478 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2210      	movs	r2, #16
 800b49a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4a8:	d901      	bls.n	800b4ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e006      	b.n	800b4bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	f003 0310 	and.w	r3, r3, #16
 800b4b6:	2b10      	cmp	r3, #16
 800b4b8:	d0f0      	beq.n	800b49c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b08b      	sub	sp, #44	@ 0x2c
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b4de:	88fb      	ldrh	r3, [r7, #6]
 800b4e0:	089b      	lsrs	r3, r3, #2
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b4e6:	88fb      	ldrh	r3, [r7, #6]
 800b4e8:	f003 0303 	and.w	r3, r3, #3
 800b4ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	623b      	str	r3, [r7, #32]
 800b4f2:	e014      	b.n	800b51e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	3301      	adds	r3, #1
 800b504:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b508:	3301      	adds	r3, #1
 800b50a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50e:	3301      	adds	r3, #1
 800b510:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b514:	3301      	adds	r3, #1
 800b516:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	3301      	adds	r3, #1
 800b51c:	623b      	str	r3, [r7, #32]
 800b51e:	6a3a      	ldr	r2, [r7, #32]
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	429a      	cmp	r2, r3
 800b524:	d3e6      	bcc.n	800b4f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b526:	8bfb      	ldrh	r3, [r7, #30]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d01e      	beq.n	800b56a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b52c:	2300      	movs	r3, #0
 800b52e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b536:	461a      	mov	r2, r3
 800b538:	f107 0310 	add.w	r3, r7, #16
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	fa22 f303 	lsr.w	r3, r2, r3
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b550:	701a      	strb	r2, [r3, #0]
      i++;
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	3301      	adds	r3, #1
 800b556:	623b      	str	r3, [r7, #32]
      pDest++;
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	3301      	adds	r3, #1
 800b55c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b55e:	8bfb      	ldrh	r3, [r7, #30]
 800b560:	3b01      	subs	r3, #1
 800b562:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b564:	8bfb      	ldrh	r3, [r7, #30]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1ea      	bne.n	800b540 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	372c      	adds	r7, #44	@ 0x2c
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4013      	ands	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b590:	68fb      	ldr	r3, [r7, #12]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b085      	sub	sp, #20
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b5ae:	78fb      	ldrb	r3, [r7, #3]
 800b5b0:	015a      	lsls	r2, r3, #5
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b5be:	78fb      	ldrb	r3, [r7, #3]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b5d2:	68bb      	ldr	r3, [r7, #8]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	f003 0301 	and.w	r3, r3, #1
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b61a:	f023 0303 	bic.w	r3, r3, #3
 800b61e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	78fb      	ldrb	r3, [r7, #3]
 800b62a:	f003 0303 	and.w	r3, r3, #3
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b634:	4313      	orrs	r3, r2
 800b636:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b638:	78fb      	ldrb	r3, [r7, #3]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d107      	bne.n	800b64e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b644:	461a      	mov	r2, r3
 800b646:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b64a:	6053      	str	r3, [r2, #4]
 800b64c:	e00c      	b.n	800b668 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	2b02      	cmp	r3, #2
 800b652:	d107      	bne.n	800b664 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b65a:	461a      	mov	r2, r3
 800b65c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b660:	6053      	str	r3, [r2, #4]
 800b662:	e001      	b.n	800b668 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e000      	b.n	800b66a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b676:	b480      	push	{r7}
 800b678:	b085      	sub	sp, #20
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	b29b      	uxth	r3, r3
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b698:	b480      	push	{r7}
 800b69a:	b089      	sub	sp, #36	@ 0x24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	0c9b      	lsrs	r3, r3, #18
 800b6c0:	f003 0303 	and.w	r3, r3, #3
 800b6c4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	0fdb      	lsrs	r3, r3, #31
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	0fdb      	lsrs	r3, r3, #31
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f003 0320 	and.w	r3, r3, #32
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d10d      	bne.n	800b71a <USB_HC_Halt+0x82>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10a      	bne.n	800b71a <USB_HC_Halt+0x82>
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d005      	beq.n	800b716 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d002      	beq.n	800b716 <USB_HC_Halt+0x7e>
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2b03      	cmp	r3, #3
 800b714:	d101      	bne.n	800b71a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	e0d8      	b.n	800b8cc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <USB_HC_Halt+0x8e>
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d173      	bne.n	800b80e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	015a      	lsls	r2, r3, #5
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	4413      	add	r3, r2
 800b72e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	69ba      	ldr	r2, [r7, #24]
 800b736:	0151      	lsls	r1, r2, #5
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	440a      	add	r2, r1
 800b73c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b740:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b744:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f003 0320 	and.w	r3, r3, #32
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d14a      	bne.n	800b7e8 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d133      	bne.n	800b7c6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	4413      	add	r3, r2
 800b766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	0151      	lsls	r1, r2, #5
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	440a      	add	r2, r1
 800b774:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b77c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	0151      	lsls	r1, r2, #5
 800b790:	69fa      	ldr	r2, [r7, #28]
 800b792:	440a      	add	r2, r1
 800b794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b79c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b7aa:	d82e      	bhi.n	800b80a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7c2:	d0ec      	beq.n	800b79e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b7c4:	e081      	b.n	800b8ca <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	015a      	lsls	r2, r3, #5
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	69ba      	ldr	r2, [r7, #24]
 800b7d6:	0151      	lsls	r1, r2, #5
 800b7d8:	69fa      	ldr	r2, [r7, #28]
 800b7da:	440a      	add	r2, r1
 800b7dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b7e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b7e6:	e070      	b.n	800b8ca <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	0151      	lsls	r1, r2, #5
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	440a      	add	r2, r1
 800b7fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b806:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b808:	e05f      	b.n	800b8ca <USB_HC_Halt+0x232>
            break;
 800b80a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b80c:	e05d      	b.n	800b8ca <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	015a      	lsls	r2, r3, #5
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	4413      	add	r3, r2
 800b816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	0151      	lsls	r1, r2, #5
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	440a      	add	r2, r1
 800b824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b82c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d133      	bne.n	800b8a6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	4413      	add	r3, r2
 800b846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	0151      	lsls	r1, r2, #5
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	440a      	add	r2, r1
 800b854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b85c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	015a      	lsls	r2, r3, #5
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	69ba      	ldr	r2, [r7, #24]
 800b86e:	0151      	lsls	r1, r2, #5
 800b870:	69fa      	ldr	r2, [r7, #28]
 800b872:	440a      	add	r2, r1
 800b874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b878:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b87c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	3301      	adds	r3, #1
 800b882:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b88a:	d81d      	bhi.n	800b8c8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	4413      	add	r3, r2
 800b894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b89e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8a2:	d0ec      	beq.n	800b87e <USB_HC_Halt+0x1e6>
 800b8a4:	e011      	b.n	800b8ca <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	69ba      	ldr	r2, [r7, #24]
 800b8b6:	0151      	lsls	r1, r2, #5
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	440a      	add	r2, r1
 800b8bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	e000      	b.n	800b8ca <USB_HC_Halt+0x232>
          break;
 800b8c8:	bf00      	nop
    }
  }

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3724      	adds	r7, #36	@ 0x24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff fd7a 	bl	800b3e6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b8f2:	2110      	movs	r1, #16
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff fd87 	bl	800b408 <USB_FlushTxFifo>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff fdb1 	bl	800b46c <USB_FlushRxFifo>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b914:	2300      	movs	r3, #0
 800b916:	61bb      	str	r3, [r7, #24]
 800b918:	e01f      	b.n	800b95a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	015a      	lsls	r2, r3, #5
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	4413      	add	r3, r2
 800b922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b930:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b938:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b940:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	015a      	lsls	r2, r3, #5
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	4413      	add	r3, r2
 800b94a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b94e:	461a      	mov	r2, r3
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	3301      	adds	r3, #1
 800b958:	61bb      	str	r3, [r7, #24]
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	2b0f      	cmp	r3, #15
 800b95e:	d9dc      	bls.n	800b91a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b960:	2300      	movs	r3, #0
 800b962:	61bb      	str	r3, [r7, #24]
 800b964:	e034      	b.n	800b9d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	015a      	lsls	r2, r3, #5
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	4413      	add	r3, r2
 800b96e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b97c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b984:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b98c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	015a      	lsls	r2, r3, #5
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	4413      	add	r3, r2
 800b996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b99a:	461a      	mov	r2, r3
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9ac:	d80c      	bhi.n	800b9c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	015a      	lsls	r2, r3, #5
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9c4:	d0ec      	beq.n	800b9a0 <USB_StopHost+0xc8>
 800b9c6:	e000      	b.n	800b9ca <USB_StopHost+0xf2>
        break;
 800b9c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	61bb      	str	r3, [r7, #24]
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	2b0f      	cmp	r3, #15
 800b9d4:	d9c7      	bls.n	800b966 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff fce9 	bl	800b3c4 <USB_EnableGlobalInt>

  return ret;
 800b9f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3720      	adds	r7, #32
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f804 	bl	800ba20 <USBH_HandleSof>
}
 800ba18:	bf00      	nop
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b0b      	cmp	r3, #11
 800ba30:	d10a      	bne.n	800ba48 <USBH_HandleSof+0x28>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d005      	beq.n	800ba48 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	4798      	blx	r3
  }
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800ba60:	bf00      	nop
}
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ba84:	bf00      	nop
}
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f883 	bl	800bbea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	791b      	ldrb	r3, [r3, #4]
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f80b 	bl	800bb06 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	795b      	ldrb	r3, [r3, #5]
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f805 	bl	800bb06 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bb12:	78fb      	ldrb	r3, [r7, #3]
 800bb14:	2b0f      	cmp	r3, #15
 800bb16:	d80d      	bhi.n	800bb34 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bb18:	78fb      	ldrb	r3, [r7, #3]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	33e0      	adds	r3, #224	@ 0xe0
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bb2a:	6879      	ldr	r1, [r7, #4]
 800bb2c:	33e0      	adds	r3, #224	@ 0xe0
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	440b      	add	r3, r1
 800bb32:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b082      	sub	sp, #8
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff ff53 	bl	800b9fc <USBH_LL_IncTimer>
}
 800bb56:	bf00      	nop
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff ff8f 	bl	800ba90 <USBH_LL_Connect>
}
 800bb72:	bf00      	nop
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b082      	sub	sp, #8
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7ff ff98 	bl	800babe <USBH_LL_Disconnect>
}
 800bb8e:	bf00      	nop
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	460b      	mov	r3, r1
 800bba0:	70fb      	strb	r3, [r7, #3]
 800bba2:	4613      	mov	r3, r2
 800bba4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff ff45 	bl	800ba50 <USBH_LL_PortEnabled>
}
 800bbc6:	bf00      	nop
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff ff45 	bl	800ba6c <USBH_LL_PortDisabled>
}
 800bbe2:	bf00      	nop
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fd fae4 	bl	80091ce <HAL_HCD_Stop>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 f807 	bl	800bc20 <USBH_Get_USB_Status>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc2e:	79fb      	ldrb	r3, [r7, #7]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d817      	bhi.n	800bc64 <USBH_Get_USB_Status+0x44>
 800bc34:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <USBH_Get_USB_Status+0x1c>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc53 	.word	0x0800bc53
 800bc44:	0800bc59 	.word	0x0800bc59
 800bc48:	0800bc5f 	.word	0x0800bc5f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc50:	e00b      	b.n	800bc6a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc52:	2302      	movs	r3, #2
 800bc54:	73fb      	strb	r3, [r7, #15]
    break;
 800bc56:	e008      	b.n	800bc6a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5c:	e005      	b.n	800bc6a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc5e:	2302      	movs	r3, #2
 800bc60:	73fb      	strb	r3, [r7, #15]
    break;
 800bc62:	e002      	b.n	800bc6a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bc64:	2302      	movs	r3, #2
 800bc66:	73fb      	strb	r3, [r7, #15]
    break;
 800bc68:	bf00      	nop
  }
  return usb_status;
 800bc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <sbrk_aligned>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	4e0f      	ldr	r6, [pc, #60]	@ (800bcb8 <sbrk_aligned+0x40>)
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	6831      	ldr	r1, [r6, #0]
 800bc80:	4605      	mov	r5, r0
 800bc82:	b911      	cbnz	r1, 800bc8a <sbrk_aligned+0x12>
 800bc84:	f000 fada 	bl	800c23c <_sbrk_r>
 800bc88:	6030      	str	r0, [r6, #0]
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	f000 fad5 	bl	800c23c <_sbrk_r>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	d103      	bne.n	800bc9e <sbrk_aligned+0x26>
 800bc96:	f04f 34ff 	mov.w	r4, #4294967295
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	bd70      	pop	{r4, r5, r6, pc}
 800bc9e:	1cc4      	adds	r4, r0, #3
 800bca0:	f024 0403 	bic.w	r4, r4, #3
 800bca4:	42a0      	cmp	r0, r4
 800bca6:	d0f8      	beq.n	800bc9a <sbrk_aligned+0x22>
 800bca8:	1a21      	subs	r1, r4, r0
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f000 fac6 	bl	800c23c <_sbrk_r>
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	d1f2      	bne.n	800bc9a <sbrk_aligned+0x22>
 800bcb4:	e7ef      	b.n	800bc96 <sbrk_aligned+0x1e>
 800bcb6:	bf00      	nop
 800bcb8:	2000046c 	.word	0x2000046c

0800bcbc <_malloc_r>:
 800bcbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc0:	1ccd      	adds	r5, r1, #3
 800bcc2:	f025 0503 	bic.w	r5, r5, #3
 800bcc6:	3508      	adds	r5, #8
 800bcc8:	2d0c      	cmp	r5, #12
 800bcca:	bf38      	it	cc
 800bccc:	250c      	movcc	r5, #12
 800bcce:	2d00      	cmp	r5, #0
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	db01      	blt.n	800bcd8 <_malloc_r+0x1c>
 800bcd4:	42a9      	cmp	r1, r5
 800bcd6:	d904      	bls.n	800bce2 <_malloc_r+0x26>
 800bcd8:	230c      	movs	r3, #12
 800bcda:	6033      	str	r3, [r6, #0]
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdb8 <_malloc_r+0xfc>
 800bce6:	f000 f869 	bl	800bdbc <__malloc_lock>
 800bcea:	f8d8 3000 	ldr.w	r3, [r8]
 800bcee:	461c      	mov	r4, r3
 800bcf0:	bb44      	cbnz	r4, 800bd44 <_malloc_r+0x88>
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f7ff ffbf 	bl	800bc78 <sbrk_aligned>
 800bcfa:	1c43      	adds	r3, r0, #1
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	d158      	bne.n	800bdb2 <_malloc_r+0xf6>
 800bd00:	f8d8 4000 	ldr.w	r4, [r8]
 800bd04:	4627      	mov	r7, r4
 800bd06:	2f00      	cmp	r7, #0
 800bd08:	d143      	bne.n	800bd92 <_malloc_r+0xd6>
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	d04b      	beq.n	800bda6 <_malloc_r+0xea>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	4639      	mov	r1, r7
 800bd12:	4630      	mov	r0, r6
 800bd14:	eb04 0903 	add.w	r9, r4, r3
 800bd18:	f000 fa90 	bl	800c23c <_sbrk_r>
 800bd1c:	4581      	cmp	r9, r0
 800bd1e:	d142      	bne.n	800bda6 <_malloc_r+0xea>
 800bd20:	6821      	ldr	r1, [r4, #0]
 800bd22:	1a6d      	subs	r5, r5, r1
 800bd24:	4629      	mov	r1, r5
 800bd26:	4630      	mov	r0, r6
 800bd28:	f7ff ffa6 	bl	800bc78 <sbrk_aligned>
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d03a      	beq.n	800bda6 <_malloc_r+0xea>
 800bd30:	6823      	ldr	r3, [r4, #0]
 800bd32:	442b      	add	r3, r5
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	f8d8 3000 	ldr.w	r3, [r8]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	bb62      	cbnz	r2, 800bd98 <_malloc_r+0xdc>
 800bd3e:	f8c8 7000 	str.w	r7, [r8]
 800bd42:	e00f      	b.n	800bd64 <_malloc_r+0xa8>
 800bd44:	6822      	ldr	r2, [r4, #0]
 800bd46:	1b52      	subs	r2, r2, r5
 800bd48:	d420      	bmi.n	800bd8c <_malloc_r+0xd0>
 800bd4a:	2a0b      	cmp	r2, #11
 800bd4c:	d917      	bls.n	800bd7e <_malloc_r+0xc2>
 800bd4e:	1961      	adds	r1, r4, r5
 800bd50:	42a3      	cmp	r3, r4
 800bd52:	6025      	str	r5, [r4, #0]
 800bd54:	bf18      	it	ne
 800bd56:	6059      	strne	r1, [r3, #4]
 800bd58:	6863      	ldr	r3, [r4, #4]
 800bd5a:	bf08      	it	eq
 800bd5c:	f8c8 1000 	streq.w	r1, [r8]
 800bd60:	5162      	str	r2, [r4, r5]
 800bd62:	604b      	str	r3, [r1, #4]
 800bd64:	4630      	mov	r0, r6
 800bd66:	f000 f82f 	bl	800bdc8 <__malloc_unlock>
 800bd6a:	f104 000b 	add.w	r0, r4, #11
 800bd6e:	1d23      	adds	r3, r4, #4
 800bd70:	f020 0007 	bic.w	r0, r0, #7
 800bd74:	1ac2      	subs	r2, r0, r3
 800bd76:	bf1c      	itt	ne
 800bd78:	1a1b      	subne	r3, r3, r0
 800bd7a:	50a3      	strne	r3, [r4, r2]
 800bd7c:	e7af      	b.n	800bcde <_malloc_r+0x22>
 800bd7e:	6862      	ldr	r2, [r4, #4]
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	bf0c      	ite	eq
 800bd84:	f8c8 2000 	streq.w	r2, [r8]
 800bd88:	605a      	strne	r2, [r3, #4]
 800bd8a:	e7eb      	b.n	800bd64 <_malloc_r+0xa8>
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	6864      	ldr	r4, [r4, #4]
 800bd90:	e7ae      	b.n	800bcf0 <_malloc_r+0x34>
 800bd92:	463c      	mov	r4, r7
 800bd94:	687f      	ldr	r7, [r7, #4]
 800bd96:	e7b6      	b.n	800bd06 <_malloc_r+0x4a>
 800bd98:	461a      	mov	r2, r3
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d1fb      	bne.n	800bd98 <_malloc_r+0xdc>
 800bda0:	2300      	movs	r3, #0
 800bda2:	6053      	str	r3, [r2, #4]
 800bda4:	e7de      	b.n	800bd64 <_malloc_r+0xa8>
 800bda6:	230c      	movs	r3, #12
 800bda8:	6033      	str	r3, [r6, #0]
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f000 f80c 	bl	800bdc8 <__malloc_unlock>
 800bdb0:	e794      	b.n	800bcdc <_malloc_r+0x20>
 800bdb2:	6005      	str	r5, [r0, #0]
 800bdb4:	e7d6      	b.n	800bd64 <_malloc_r+0xa8>
 800bdb6:	bf00      	nop
 800bdb8:	20000470 	.word	0x20000470

0800bdbc <__malloc_lock>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	@ (800bdc4 <__malloc_lock+0x8>)
 800bdbe:	f000 ba8a 	b.w	800c2d6 <__retarget_lock_acquire_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	200005b4 	.word	0x200005b4

0800bdc8 <__malloc_unlock>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	@ (800bdd0 <__malloc_unlock+0x8>)
 800bdca:	f000 ba85 	b.w	800c2d8 <__retarget_lock_release_recursive>
 800bdce:	bf00      	nop
 800bdd0:	200005b4 	.word	0x200005b4

0800bdd4 <std>:
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	b510      	push	{r4, lr}
 800bdd8:	4604      	mov	r4, r0
 800bdda:	e9c0 3300 	strd	r3, r3, [r0]
 800bdde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bde2:	6083      	str	r3, [r0, #8]
 800bde4:	8181      	strh	r1, [r0, #12]
 800bde6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bde8:	81c2      	strh	r2, [r0, #14]
 800bdea:	6183      	str	r3, [r0, #24]
 800bdec:	4619      	mov	r1, r3
 800bdee:	2208      	movs	r2, #8
 800bdf0:	305c      	adds	r0, #92	@ 0x5c
 800bdf2:	f000 f9e7 	bl	800c1c4 <memset>
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <std+0x58>)
 800bdf8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800be30 <std+0x5c>)
 800bdfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <std+0x60>)
 800be00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be02:	4b0d      	ldr	r3, [pc, #52]	@ (800be38 <std+0x64>)
 800be04:	6323      	str	r3, [r4, #48]	@ 0x30
 800be06:	4b0d      	ldr	r3, [pc, #52]	@ (800be3c <std+0x68>)
 800be08:	6224      	str	r4, [r4, #32]
 800be0a:	429c      	cmp	r4, r3
 800be0c:	d006      	beq.n	800be1c <std+0x48>
 800be0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be12:	4294      	cmp	r4, r2
 800be14:	d002      	beq.n	800be1c <std+0x48>
 800be16:	33d0      	adds	r3, #208	@ 0xd0
 800be18:	429c      	cmp	r4, r3
 800be1a:	d105      	bne.n	800be28 <std+0x54>
 800be1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be24:	f000 ba56 	b.w	800c2d4 <__retarget_lock_init_recursive>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	bf00      	nop
 800be2c:	0800c015 	.word	0x0800c015
 800be30:	0800c037 	.word	0x0800c037
 800be34:	0800c06f 	.word	0x0800c06f
 800be38:	0800c093 	.word	0x0800c093
 800be3c:	20000474 	.word	0x20000474

0800be40 <stdio_exit_handler>:
 800be40:	4a02      	ldr	r2, [pc, #8]	@ (800be4c <stdio_exit_handler+0xc>)
 800be42:	4903      	ldr	r1, [pc, #12]	@ (800be50 <stdio_exit_handler+0x10>)
 800be44:	4803      	ldr	r0, [pc, #12]	@ (800be54 <stdio_exit_handler+0x14>)
 800be46:	f000 b869 	b.w	800bf1c <_fwalk_sglue>
 800be4a:	bf00      	nop
 800be4c:	2000000c 	.word	0x2000000c
 800be50:	0800c479 	.word	0x0800c479
 800be54:	2000001c 	.word	0x2000001c

0800be58 <cleanup_stdio>:
 800be58:	6841      	ldr	r1, [r0, #4]
 800be5a:	4b0c      	ldr	r3, [pc, #48]	@ (800be8c <cleanup_stdio+0x34>)
 800be5c:	4299      	cmp	r1, r3
 800be5e:	b510      	push	{r4, lr}
 800be60:	4604      	mov	r4, r0
 800be62:	d001      	beq.n	800be68 <cleanup_stdio+0x10>
 800be64:	f000 fb08 	bl	800c478 <_fflush_r>
 800be68:	68a1      	ldr	r1, [r4, #8]
 800be6a:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <cleanup_stdio+0x38>)
 800be6c:	4299      	cmp	r1, r3
 800be6e:	d002      	beq.n	800be76 <cleanup_stdio+0x1e>
 800be70:	4620      	mov	r0, r4
 800be72:	f000 fb01 	bl	800c478 <_fflush_r>
 800be76:	68e1      	ldr	r1, [r4, #12]
 800be78:	4b06      	ldr	r3, [pc, #24]	@ (800be94 <cleanup_stdio+0x3c>)
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d004      	beq.n	800be88 <cleanup_stdio+0x30>
 800be7e:	4620      	mov	r0, r4
 800be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be84:	f000 baf8 	b.w	800c478 <_fflush_r>
 800be88:	bd10      	pop	{r4, pc}
 800be8a:	bf00      	nop
 800be8c:	20000474 	.word	0x20000474
 800be90:	200004dc 	.word	0x200004dc
 800be94:	20000544 	.word	0x20000544

0800be98 <global_stdio_init.part.0>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <global_stdio_init.part.0+0x30>)
 800be9c:	4c0b      	ldr	r4, [pc, #44]	@ (800becc <global_stdio_init.part.0+0x34>)
 800be9e:	4a0c      	ldr	r2, [pc, #48]	@ (800bed0 <global_stdio_init.part.0+0x38>)
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	4620      	mov	r0, r4
 800bea4:	2200      	movs	r2, #0
 800bea6:	2104      	movs	r1, #4
 800bea8:	f7ff ff94 	bl	800bdd4 <std>
 800beac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800beb0:	2201      	movs	r2, #1
 800beb2:	2109      	movs	r1, #9
 800beb4:	f7ff ff8e 	bl	800bdd4 <std>
 800beb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bebc:	2202      	movs	r2, #2
 800bebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec2:	2112      	movs	r1, #18
 800bec4:	f7ff bf86 	b.w	800bdd4 <std>
 800bec8:	200005ac 	.word	0x200005ac
 800becc:	20000474 	.word	0x20000474
 800bed0:	0800be41 	.word	0x0800be41

0800bed4 <__sfp_lock_acquire>:
 800bed4:	4801      	ldr	r0, [pc, #4]	@ (800bedc <__sfp_lock_acquire+0x8>)
 800bed6:	f000 b9fe 	b.w	800c2d6 <__retarget_lock_acquire_recursive>
 800beda:	bf00      	nop
 800bedc:	200005b5 	.word	0x200005b5

0800bee0 <__sfp_lock_release>:
 800bee0:	4801      	ldr	r0, [pc, #4]	@ (800bee8 <__sfp_lock_release+0x8>)
 800bee2:	f000 b9f9 	b.w	800c2d8 <__retarget_lock_release_recursive>
 800bee6:	bf00      	nop
 800bee8:	200005b5 	.word	0x200005b5

0800beec <__sinit>:
 800beec:	b510      	push	{r4, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	f7ff fff0 	bl	800bed4 <__sfp_lock_acquire>
 800bef4:	6a23      	ldr	r3, [r4, #32]
 800bef6:	b11b      	cbz	r3, 800bf00 <__sinit+0x14>
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f7ff bff0 	b.w	800bee0 <__sfp_lock_release>
 800bf00:	4b04      	ldr	r3, [pc, #16]	@ (800bf14 <__sinit+0x28>)
 800bf02:	6223      	str	r3, [r4, #32]
 800bf04:	4b04      	ldr	r3, [pc, #16]	@ (800bf18 <__sinit+0x2c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1f5      	bne.n	800bef8 <__sinit+0xc>
 800bf0c:	f7ff ffc4 	bl	800be98 <global_stdio_init.part.0>
 800bf10:	e7f2      	b.n	800bef8 <__sinit+0xc>
 800bf12:	bf00      	nop
 800bf14:	0800be59 	.word	0x0800be59
 800bf18:	200005ac 	.word	0x200005ac

0800bf1c <_fwalk_sglue>:
 800bf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf20:	4607      	mov	r7, r0
 800bf22:	4688      	mov	r8, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	2600      	movs	r6, #0
 800bf28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf2c:	f1b9 0901 	subs.w	r9, r9, #1
 800bf30:	d505      	bpl.n	800bf3e <_fwalk_sglue+0x22>
 800bf32:	6824      	ldr	r4, [r4, #0]
 800bf34:	2c00      	cmp	r4, #0
 800bf36:	d1f7      	bne.n	800bf28 <_fwalk_sglue+0xc>
 800bf38:	4630      	mov	r0, r6
 800bf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d907      	bls.n	800bf54 <_fwalk_sglue+0x38>
 800bf44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	d003      	beq.n	800bf54 <_fwalk_sglue+0x38>
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	4638      	mov	r0, r7
 800bf50:	47c0      	blx	r8
 800bf52:	4306      	orrs	r6, r0
 800bf54:	3568      	adds	r5, #104	@ 0x68
 800bf56:	e7e9      	b.n	800bf2c <_fwalk_sglue+0x10>

0800bf58 <_puts_r>:
 800bf58:	6a03      	ldr	r3, [r0, #32]
 800bf5a:	b570      	push	{r4, r5, r6, lr}
 800bf5c:	6884      	ldr	r4, [r0, #8]
 800bf5e:	4605      	mov	r5, r0
 800bf60:	460e      	mov	r6, r1
 800bf62:	b90b      	cbnz	r3, 800bf68 <_puts_r+0x10>
 800bf64:	f7ff ffc2 	bl	800beec <__sinit>
 800bf68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf6a:	07db      	lsls	r3, r3, #31
 800bf6c:	d405      	bmi.n	800bf7a <_puts_r+0x22>
 800bf6e:	89a3      	ldrh	r3, [r4, #12]
 800bf70:	0598      	lsls	r0, r3, #22
 800bf72:	d402      	bmi.n	800bf7a <_puts_r+0x22>
 800bf74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf76:	f000 f9ae 	bl	800c2d6 <__retarget_lock_acquire_recursive>
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	0719      	lsls	r1, r3, #28
 800bf7e:	d502      	bpl.n	800bf86 <_puts_r+0x2e>
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d135      	bne.n	800bff2 <_puts_r+0x9a>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f000 f8c5 	bl	800c118 <__swsetup_r>
 800bf8e:	b380      	cbz	r0, 800bff2 <_puts_r+0x9a>
 800bf90:	f04f 35ff 	mov.w	r5, #4294967295
 800bf94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf96:	07da      	lsls	r2, r3, #31
 800bf98:	d405      	bmi.n	800bfa6 <_puts_r+0x4e>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	059b      	lsls	r3, r3, #22
 800bf9e:	d402      	bmi.n	800bfa6 <_puts_r+0x4e>
 800bfa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfa2:	f000 f999 	bl	800c2d8 <__retarget_lock_release_recursive>
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	bd70      	pop	{r4, r5, r6, pc}
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	da04      	bge.n	800bfb8 <_puts_r+0x60>
 800bfae:	69a2      	ldr	r2, [r4, #24]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	dc17      	bgt.n	800bfe4 <_puts_r+0x8c>
 800bfb4:	290a      	cmp	r1, #10
 800bfb6:	d015      	beq.n	800bfe4 <_puts_r+0x8c>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	6022      	str	r2, [r4, #0]
 800bfbe:	7019      	strb	r1, [r3, #0]
 800bfc0:	68a3      	ldr	r3, [r4, #8]
 800bfc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	60a3      	str	r3, [r4, #8]
 800bfca:	2900      	cmp	r1, #0
 800bfcc:	d1ed      	bne.n	800bfaa <_puts_r+0x52>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	da11      	bge.n	800bff6 <_puts_r+0x9e>
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	210a      	movs	r1, #10
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f000 f85f 	bl	800c09a <__swbuf_r>
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d0d7      	beq.n	800bf90 <_puts_r+0x38>
 800bfe0:	250a      	movs	r5, #10
 800bfe2:	e7d7      	b.n	800bf94 <_puts_r+0x3c>
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f000 f857 	bl	800c09a <__swbuf_r>
 800bfec:	3001      	adds	r0, #1
 800bfee:	d1e7      	bne.n	800bfc0 <_puts_r+0x68>
 800bff0:	e7ce      	b.n	800bf90 <_puts_r+0x38>
 800bff2:	3e01      	subs	r6, #1
 800bff4:	e7e4      	b.n	800bfc0 <_puts_r+0x68>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	6022      	str	r2, [r4, #0]
 800bffc:	220a      	movs	r2, #10
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	e7ee      	b.n	800bfe0 <_puts_r+0x88>
	...

0800c004 <puts>:
 800c004:	4b02      	ldr	r3, [pc, #8]	@ (800c010 <puts+0xc>)
 800c006:	4601      	mov	r1, r0
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	f7ff bfa5 	b.w	800bf58 <_puts_r>
 800c00e:	bf00      	nop
 800c010:	20000018 	.word	0x20000018

0800c014 <__sread>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01c:	f000 f8fc 	bl	800c218 <_read_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	bfab      	itete	ge
 800c024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c026:	89a3      	ldrhlt	r3, [r4, #12]
 800c028:	181b      	addge	r3, r3, r0
 800c02a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c02e:	bfac      	ite	ge
 800c030:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c032:	81a3      	strhlt	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__swrite>:
 800c036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03a:	461f      	mov	r7, r3
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	05db      	lsls	r3, r3, #23
 800c040:	4605      	mov	r5, r0
 800c042:	460c      	mov	r4, r1
 800c044:	4616      	mov	r6, r2
 800c046:	d505      	bpl.n	800c054 <__swrite+0x1e>
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	2302      	movs	r3, #2
 800c04e:	2200      	movs	r2, #0
 800c050:	f000 f8d0 	bl	800c1f4 <_lseek_r>
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	4632      	mov	r2, r6
 800c062:	463b      	mov	r3, r7
 800c064:	4628      	mov	r0, r5
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	f000 b8f7 	b.w	800c25c <_write_r>

0800c06e <__sseek>:
 800c06e:	b510      	push	{r4, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 f8bd 	bl	800c1f4 <_lseek_r>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	bf15      	itete	ne
 800c080:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c08a:	81a3      	strheq	r3, [r4, #12]
 800c08c:	bf18      	it	ne
 800c08e:	81a3      	strhne	r3, [r4, #12]
 800c090:	bd10      	pop	{r4, pc}

0800c092 <__sclose>:
 800c092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c096:	f000 b89d 	b.w	800c1d4 <_close_r>

0800c09a <__swbuf_r>:
 800c09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09c:	460e      	mov	r6, r1
 800c09e:	4614      	mov	r4, r2
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	b118      	cbz	r0, 800c0ac <__swbuf_r+0x12>
 800c0a4:	6a03      	ldr	r3, [r0, #32]
 800c0a6:	b90b      	cbnz	r3, 800c0ac <__swbuf_r+0x12>
 800c0a8:	f7ff ff20 	bl	800beec <__sinit>
 800c0ac:	69a3      	ldr	r3, [r4, #24]
 800c0ae:	60a3      	str	r3, [r4, #8]
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	071a      	lsls	r2, r3, #28
 800c0b4:	d501      	bpl.n	800c0ba <__swbuf_r+0x20>
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	b943      	cbnz	r3, 800c0cc <__swbuf_r+0x32>
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f000 f82b 	bl	800c118 <__swsetup_r>
 800c0c2:	b118      	cbz	r0, 800c0cc <__swbuf_r+0x32>
 800c0c4:	f04f 37ff 	mov.w	r7, #4294967295
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	6922      	ldr	r2, [r4, #16]
 800c0d0:	1a98      	subs	r0, r3, r2
 800c0d2:	6963      	ldr	r3, [r4, #20]
 800c0d4:	b2f6      	uxtb	r6, r6
 800c0d6:	4283      	cmp	r3, r0
 800c0d8:	4637      	mov	r7, r6
 800c0da:	dc05      	bgt.n	800c0e8 <__swbuf_r+0x4e>
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f000 f9ca 	bl	800c478 <_fflush_r>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d1ed      	bne.n	800c0c4 <__swbuf_r+0x2a>
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	60a3      	str	r3, [r4, #8]
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	6022      	str	r2, [r4, #0]
 800c0f4:	701e      	strb	r6, [r3, #0]
 800c0f6:	6962      	ldr	r2, [r4, #20]
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d004      	beq.n	800c108 <__swbuf_r+0x6e>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	07db      	lsls	r3, r3, #31
 800c102:	d5e1      	bpl.n	800c0c8 <__swbuf_r+0x2e>
 800c104:	2e0a      	cmp	r6, #10
 800c106:	d1df      	bne.n	800c0c8 <__swbuf_r+0x2e>
 800c108:	4621      	mov	r1, r4
 800c10a:	4628      	mov	r0, r5
 800c10c:	f000 f9b4 	bl	800c478 <_fflush_r>
 800c110:	2800      	cmp	r0, #0
 800c112:	d0d9      	beq.n	800c0c8 <__swbuf_r+0x2e>
 800c114:	e7d6      	b.n	800c0c4 <__swbuf_r+0x2a>
	...

0800c118 <__swsetup_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4b29      	ldr	r3, [pc, #164]	@ (800c1c0 <__swsetup_r+0xa8>)
 800c11c:	4605      	mov	r5, r0
 800c11e:	6818      	ldr	r0, [r3, #0]
 800c120:	460c      	mov	r4, r1
 800c122:	b118      	cbz	r0, 800c12c <__swsetup_r+0x14>
 800c124:	6a03      	ldr	r3, [r0, #32]
 800c126:	b90b      	cbnz	r3, 800c12c <__swsetup_r+0x14>
 800c128:	f7ff fee0 	bl	800beec <__sinit>
 800c12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c130:	0719      	lsls	r1, r3, #28
 800c132:	d422      	bmi.n	800c17a <__swsetup_r+0x62>
 800c134:	06da      	lsls	r2, r3, #27
 800c136:	d407      	bmi.n	800c148 <__swsetup_r+0x30>
 800c138:	2209      	movs	r2, #9
 800c13a:	602a      	str	r2, [r5, #0]
 800c13c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	f04f 30ff 	mov.w	r0, #4294967295
 800c146:	e033      	b.n	800c1b0 <__swsetup_r+0x98>
 800c148:	0758      	lsls	r0, r3, #29
 800c14a:	d512      	bpl.n	800c172 <__swsetup_r+0x5a>
 800c14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c14e:	b141      	cbz	r1, 800c162 <__swsetup_r+0x4a>
 800c150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c154:	4299      	cmp	r1, r3
 800c156:	d002      	beq.n	800c15e <__swsetup_r+0x46>
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 f8bf 	bl	800c2dc <_free_r>
 800c15e:	2300      	movs	r3, #0
 800c160:	6363      	str	r3, [r4, #52]	@ 0x34
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	2300      	movs	r3, #0
 800c16c:	6063      	str	r3, [r4, #4]
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	f043 0308 	orr.w	r3, r3, #8
 800c178:	81a3      	strh	r3, [r4, #12]
 800c17a:	6923      	ldr	r3, [r4, #16]
 800c17c:	b94b      	cbnz	r3, 800c192 <__swsetup_r+0x7a>
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c188:	d003      	beq.n	800c192 <__swsetup_r+0x7a>
 800c18a:	4621      	mov	r1, r4
 800c18c:	4628      	mov	r0, r5
 800c18e:	f000 f9c1 	bl	800c514 <__smakebuf_r>
 800c192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c196:	f013 0201 	ands.w	r2, r3, #1
 800c19a:	d00a      	beq.n	800c1b2 <__swsetup_r+0x9a>
 800c19c:	2200      	movs	r2, #0
 800c19e:	60a2      	str	r2, [r4, #8]
 800c1a0:	6962      	ldr	r2, [r4, #20]
 800c1a2:	4252      	negs	r2, r2
 800c1a4:	61a2      	str	r2, [r4, #24]
 800c1a6:	6922      	ldr	r2, [r4, #16]
 800c1a8:	b942      	cbnz	r2, 800c1bc <__swsetup_r+0xa4>
 800c1aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1ae:	d1c5      	bne.n	800c13c <__swsetup_r+0x24>
 800c1b0:	bd38      	pop	{r3, r4, r5, pc}
 800c1b2:	0799      	lsls	r1, r3, #30
 800c1b4:	bf58      	it	pl
 800c1b6:	6962      	ldrpl	r2, [r4, #20]
 800c1b8:	60a2      	str	r2, [r4, #8]
 800c1ba:	e7f4      	b.n	800c1a6 <__swsetup_r+0x8e>
 800c1bc:	2000      	movs	r0, #0
 800c1be:	e7f7      	b.n	800c1b0 <__swsetup_r+0x98>
 800c1c0:	20000018 	.word	0x20000018

0800c1c4 <memset>:
 800c1c4:	4402      	add	r2, r0
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d100      	bne.n	800c1ce <memset+0xa>
 800c1cc:	4770      	bx	lr
 800c1ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c1d2:	e7f9      	b.n	800c1c8 <memset+0x4>

0800c1d4 <_close_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d06      	ldr	r5, [pc, #24]	@ (800c1f0 <_close_r+0x1c>)
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4608      	mov	r0, r1
 800c1de:	602b      	str	r3, [r5, #0]
 800c1e0:	f7fc fb17 	bl	8008812 <_close>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_close_r+0x1a>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_close_r+0x1a>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	200005b0 	.word	0x200005b0

0800c1f4 <_lseek_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d07      	ldr	r5, [pc, #28]	@ (800c214 <_lseek_r+0x20>)
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	4608      	mov	r0, r1
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	2200      	movs	r2, #0
 800c200:	602a      	str	r2, [r5, #0]
 800c202:	461a      	mov	r2, r3
 800c204:	f7fc fb2c 	bl	8008860 <_lseek>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_lseek_r+0x1e>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_lseek_r+0x1e>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	200005b0 	.word	0x200005b0

0800c218 <_read_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d07      	ldr	r5, [pc, #28]	@ (800c238 <_read_r+0x20>)
 800c21c:	4604      	mov	r4, r0
 800c21e:	4608      	mov	r0, r1
 800c220:	4611      	mov	r1, r2
 800c222:	2200      	movs	r2, #0
 800c224:	602a      	str	r2, [r5, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	f7fc faba 	bl	80087a0 <_read>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_read_r+0x1e>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_read_r+0x1e>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	200005b0 	.word	0x200005b0

0800c23c <_sbrk_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d06      	ldr	r5, [pc, #24]	@ (800c258 <_sbrk_r+0x1c>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	f7fc fb18 	bl	800887c <_sbrk>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_sbrk_r+0x1a>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_sbrk_r+0x1a>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	200005b0 	.word	0x200005b0

0800c25c <_write_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d07      	ldr	r5, [pc, #28]	@ (800c27c <_write_r+0x20>)
 800c260:	4604      	mov	r4, r0
 800c262:	4608      	mov	r0, r1
 800c264:	4611      	mov	r1, r2
 800c266:	2200      	movs	r2, #0
 800c268:	602a      	str	r2, [r5, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	f7fc fab5 	bl	80087da <_write>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_write_r+0x1e>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	b103      	cbz	r3, 800c27a <_write_r+0x1e>
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	200005b0 	.word	0x200005b0

0800c280 <__errno>:
 800c280:	4b01      	ldr	r3, [pc, #4]	@ (800c288 <__errno+0x8>)
 800c282:	6818      	ldr	r0, [r3, #0]
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	20000018 	.word	0x20000018

0800c28c <__libc_init_array>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	4d0d      	ldr	r5, [pc, #52]	@ (800c2c4 <__libc_init_array+0x38>)
 800c290:	4c0d      	ldr	r4, [pc, #52]	@ (800c2c8 <__libc_init_array+0x3c>)
 800c292:	1b64      	subs	r4, r4, r5
 800c294:	10a4      	asrs	r4, r4, #2
 800c296:	2600      	movs	r6, #0
 800c298:	42a6      	cmp	r6, r4
 800c29a:	d109      	bne.n	800c2b0 <__libc_init_array+0x24>
 800c29c:	4d0b      	ldr	r5, [pc, #44]	@ (800c2cc <__libc_init_array+0x40>)
 800c29e:	4c0c      	ldr	r4, [pc, #48]	@ (800c2d0 <__libc_init_array+0x44>)
 800c2a0:	f000 f996 	bl	800c5d0 <_init>
 800c2a4:	1b64      	subs	r4, r4, r5
 800c2a6:	10a4      	asrs	r4, r4, #2
 800c2a8:	2600      	movs	r6, #0
 800c2aa:	42a6      	cmp	r6, r4
 800c2ac:	d105      	bne.n	800c2ba <__libc_init_array+0x2e>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2b4:	4798      	blx	r3
 800c2b6:	3601      	adds	r6, #1
 800c2b8:	e7ee      	b.n	800c298 <__libc_init_array+0xc>
 800c2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2be:	4798      	blx	r3
 800c2c0:	3601      	adds	r6, #1
 800c2c2:	e7f2      	b.n	800c2aa <__libc_init_array+0x1e>
 800c2c4:	0800c624 	.word	0x0800c624
 800c2c8:	0800c624 	.word	0x0800c624
 800c2cc:	0800c624 	.word	0x0800c624
 800c2d0:	0800c628 	.word	0x0800c628

0800c2d4 <__retarget_lock_init_recursive>:
 800c2d4:	4770      	bx	lr

0800c2d6 <__retarget_lock_acquire_recursive>:
 800c2d6:	4770      	bx	lr

0800c2d8 <__retarget_lock_release_recursive>:
 800c2d8:	4770      	bx	lr
	...

0800c2dc <_free_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4605      	mov	r5, r0
 800c2e0:	2900      	cmp	r1, #0
 800c2e2:	d041      	beq.n	800c368 <_free_r+0x8c>
 800c2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2e8:	1f0c      	subs	r4, r1, #4
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bfb8      	it	lt
 800c2ee:	18e4      	addlt	r4, r4, r3
 800c2f0:	f7ff fd64 	bl	800bdbc <__malloc_lock>
 800c2f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c36c <_free_r+0x90>)
 800c2f6:	6813      	ldr	r3, [r2, #0]
 800c2f8:	b933      	cbnz	r3, 800c308 <_free_r+0x2c>
 800c2fa:	6063      	str	r3, [r4, #4]
 800c2fc:	6014      	str	r4, [r2, #0]
 800c2fe:	4628      	mov	r0, r5
 800c300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c304:	f7ff bd60 	b.w	800bdc8 <__malloc_unlock>
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d908      	bls.n	800c31e <_free_r+0x42>
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	1821      	adds	r1, r4, r0
 800c310:	428b      	cmp	r3, r1
 800c312:	bf01      	itttt	eq
 800c314:	6819      	ldreq	r1, [r3, #0]
 800c316:	685b      	ldreq	r3, [r3, #4]
 800c318:	1809      	addeq	r1, r1, r0
 800c31a:	6021      	streq	r1, [r4, #0]
 800c31c:	e7ed      	b.n	800c2fa <_free_r+0x1e>
 800c31e:	461a      	mov	r2, r3
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	b10b      	cbz	r3, 800c328 <_free_r+0x4c>
 800c324:	42a3      	cmp	r3, r4
 800c326:	d9fa      	bls.n	800c31e <_free_r+0x42>
 800c328:	6811      	ldr	r1, [r2, #0]
 800c32a:	1850      	adds	r0, r2, r1
 800c32c:	42a0      	cmp	r0, r4
 800c32e:	d10b      	bne.n	800c348 <_free_r+0x6c>
 800c330:	6820      	ldr	r0, [r4, #0]
 800c332:	4401      	add	r1, r0
 800c334:	1850      	adds	r0, r2, r1
 800c336:	4283      	cmp	r3, r0
 800c338:	6011      	str	r1, [r2, #0]
 800c33a:	d1e0      	bne.n	800c2fe <_free_r+0x22>
 800c33c:	6818      	ldr	r0, [r3, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	6053      	str	r3, [r2, #4]
 800c342:	4408      	add	r0, r1
 800c344:	6010      	str	r0, [r2, #0]
 800c346:	e7da      	b.n	800c2fe <_free_r+0x22>
 800c348:	d902      	bls.n	800c350 <_free_r+0x74>
 800c34a:	230c      	movs	r3, #12
 800c34c:	602b      	str	r3, [r5, #0]
 800c34e:	e7d6      	b.n	800c2fe <_free_r+0x22>
 800c350:	6820      	ldr	r0, [r4, #0]
 800c352:	1821      	adds	r1, r4, r0
 800c354:	428b      	cmp	r3, r1
 800c356:	bf04      	itt	eq
 800c358:	6819      	ldreq	r1, [r3, #0]
 800c35a:	685b      	ldreq	r3, [r3, #4]
 800c35c:	6063      	str	r3, [r4, #4]
 800c35e:	bf04      	itt	eq
 800c360:	1809      	addeq	r1, r1, r0
 800c362:	6021      	streq	r1, [r4, #0]
 800c364:	6054      	str	r4, [r2, #4]
 800c366:	e7ca      	b.n	800c2fe <_free_r+0x22>
 800c368:	bd38      	pop	{r3, r4, r5, pc}
 800c36a:	bf00      	nop
 800c36c:	20000470 	.word	0x20000470

0800c370 <__sflush_r>:
 800c370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	0716      	lsls	r6, r2, #28
 800c37a:	4605      	mov	r5, r0
 800c37c:	460c      	mov	r4, r1
 800c37e:	d454      	bmi.n	800c42a <__sflush_r+0xba>
 800c380:	684b      	ldr	r3, [r1, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	dc02      	bgt.n	800c38c <__sflush_r+0x1c>
 800c386:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dd48      	ble.n	800c41e <__sflush_r+0xae>
 800c38c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c38e:	2e00      	cmp	r6, #0
 800c390:	d045      	beq.n	800c41e <__sflush_r+0xae>
 800c392:	2300      	movs	r3, #0
 800c394:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c398:	682f      	ldr	r7, [r5, #0]
 800c39a:	6a21      	ldr	r1, [r4, #32]
 800c39c:	602b      	str	r3, [r5, #0]
 800c39e:	d030      	beq.n	800c402 <__sflush_r+0x92>
 800c3a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	0759      	lsls	r1, r3, #29
 800c3a6:	d505      	bpl.n	800c3b4 <__sflush_r+0x44>
 800c3a8:	6863      	ldr	r3, [r4, #4]
 800c3aa:	1ad2      	subs	r2, r2, r3
 800c3ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3ae:	b10b      	cbz	r3, 800c3b4 <__sflush_r+0x44>
 800c3b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3b2:	1ad2      	subs	r2, r2, r3
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3b8:	6a21      	ldr	r1, [r4, #32]
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	47b0      	blx	r6
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	d106      	bne.n	800c3d2 <__sflush_r+0x62>
 800c3c4:	6829      	ldr	r1, [r5, #0]
 800c3c6:	291d      	cmp	r1, #29
 800c3c8:	d82b      	bhi.n	800c422 <__sflush_r+0xb2>
 800c3ca:	4a2a      	ldr	r2, [pc, #168]	@ (800c474 <__sflush_r+0x104>)
 800c3cc:	40ca      	lsrs	r2, r1
 800c3ce:	07d6      	lsls	r6, r2, #31
 800c3d0:	d527      	bpl.n	800c422 <__sflush_r+0xb2>
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	6062      	str	r2, [r4, #4]
 800c3d6:	04d9      	lsls	r1, r3, #19
 800c3d8:	6922      	ldr	r2, [r4, #16]
 800c3da:	6022      	str	r2, [r4, #0]
 800c3dc:	d504      	bpl.n	800c3e8 <__sflush_r+0x78>
 800c3de:	1c42      	adds	r2, r0, #1
 800c3e0:	d101      	bne.n	800c3e6 <__sflush_r+0x76>
 800c3e2:	682b      	ldr	r3, [r5, #0]
 800c3e4:	b903      	cbnz	r3, 800c3e8 <__sflush_r+0x78>
 800c3e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3ea:	602f      	str	r7, [r5, #0]
 800c3ec:	b1b9      	cbz	r1, 800c41e <__sflush_r+0xae>
 800c3ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3f2:	4299      	cmp	r1, r3
 800c3f4:	d002      	beq.n	800c3fc <__sflush_r+0x8c>
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f7ff ff70 	bl	800c2dc <_free_r>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800c400:	e00d      	b.n	800c41e <__sflush_r+0xae>
 800c402:	2301      	movs	r3, #1
 800c404:	4628      	mov	r0, r5
 800c406:	47b0      	blx	r6
 800c408:	4602      	mov	r2, r0
 800c40a:	1c50      	adds	r0, r2, #1
 800c40c:	d1c9      	bne.n	800c3a2 <__sflush_r+0x32>
 800c40e:	682b      	ldr	r3, [r5, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d0c6      	beq.n	800c3a2 <__sflush_r+0x32>
 800c414:	2b1d      	cmp	r3, #29
 800c416:	d001      	beq.n	800c41c <__sflush_r+0xac>
 800c418:	2b16      	cmp	r3, #22
 800c41a:	d11e      	bne.n	800c45a <__sflush_r+0xea>
 800c41c:	602f      	str	r7, [r5, #0]
 800c41e:	2000      	movs	r0, #0
 800c420:	e022      	b.n	800c468 <__sflush_r+0xf8>
 800c422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c426:	b21b      	sxth	r3, r3
 800c428:	e01b      	b.n	800c462 <__sflush_r+0xf2>
 800c42a:	690f      	ldr	r7, [r1, #16]
 800c42c:	2f00      	cmp	r7, #0
 800c42e:	d0f6      	beq.n	800c41e <__sflush_r+0xae>
 800c430:	0793      	lsls	r3, r2, #30
 800c432:	680e      	ldr	r6, [r1, #0]
 800c434:	bf08      	it	eq
 800c436:	694b      	ldreq	r3, [r1, #20]
 800c438:	600f      	str	r7, [r1, #0]
 800c43a:	bf18      	it	ne
 800c43c:	2300      	movne	r3, #0
 800c43e:	eba6 0807 	sub.w	r8, r6, r7
 800c442:	608b      	str	r3, [r1, #8]
 800c444:	f1b8 0f00 	cmp.w	r8, #0
 800c448:	dde9      	ble.n	800c41e <__sflush_r+0xae>
 800c44a:	6a21      	ldr	r1, [r4, #32]
 800c44c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c44e:	4643      	mov	r3, r8
 800c450:	463a      	mov	r2, r7
 800c452:	4628      	mov	r0, r5
 800c454:	47b0      	blx	r6
 800c456:	2800      	cmp	r0, #0
 800c458:	dc08      	bgt.n	800c46c <__sflush_r+0xfc>
 800c45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46c:	4407      	add	r7, r0
 800c46e:	eba8 0800 	sub.w	r8, r8, r0
 800c472:	e7e7      	b.n	800c444 <__sflush_r+0xd4>
 800c474:	20400001 	.word	0x20400001

0800c478 <_fflush_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	690b      	ldr	r3, [r1, #16]
 800c47c:	4605      	mov	r5, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	b913      	cbnz	r3, 800c488 <_fflush_r+0x10>
 800c482:	2500      	movs	r5, #0
 800c484:	4628      	mov	r0, r5
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	b118      	cbz	r0, 800c492 <_fflush_r+0x1a>
 800c48a:	6a03      	ldr	r3, [r0, #32]
 800c48c:	b90b      	cbnz	r3, 800c492 <_fflush_r+0x1a>
 800c48e:	f7ff fd2d 	bl	800beec <__sinit>
 800c492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d0f3      	beq.n	800c482 <_fflush_r+0xa>
 800c49a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c49c:	07d0      	lsls	r0, r2, #31
 800c49e:	d404      	bmi.n	800c4aa <_fflush_r+0x32>
 800c4a0:	0599      	lsls	r1, r3, #22
 800c4a2:	d402      	bmi.n	800c4aa <_fflush_r+0x32>
 800c4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4a6:	f7ff ff16 	bl	800c2d6 <__retarget_lock_acquire_recursive>
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	f7ff ff5f 	bl	800c370 <__sflush_r>
 800c4b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4b4:	07da      	lsls	r2, r3, #31
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	d4e4      	bmi.n	800c484 <_fflush_r+0xc>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	059b      	lsls	r3, r3, #22
 800c4be:	d4e1      	bmi.n	800c484 <_fflush_r+0xc>
 800c4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4c2:	f7ff ff09 	bl	800c2d8 <__retarget_lock_release_recursive>
 800c4c6:	e7dd      	b.n	800c484 <_fflush_r+0xc>

0800c4c8 <__swhatbuf_r>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	b096      	sub	sp, #88	@ 0x58
 800c4d4:	4615      	mov	r5, r2
 800c4d6:	461e      	mov	r6, r3
 800c4d8:	da0d      	bge.n	800c4f6 <__swhatbuf_r+0x2e>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4e0:	f04f 0100 	mov.w	r1, #0
 800c4e4:	bf14      	ite	ne
 800c4e6:	2340      	movne	r3, #64	@ 0x40
 800c4e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	6031      	str	r1, [r6, #0]
 800c4f0:	602b      	str	r3, [r5, #0]
 800c4f2:	b016      	add	sp, #88	@ 0x58
 800c4f4:	bd70      	pop	{r4, r5, r6, pc}
 800c4f6:	466a      	mov	r2, sp
 800c4f8:	f000 f848 	bl	800c58c <_fstat_r>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	dbec      	blt.n	800c4da <__swhatbuf_r+0x12>
 800c500:	9901      	ldr	r1, [sp, #4]
 800c502:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c506:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c50a:	4259      	negs	r1, r3
 800c50c:	4159      	adcs	r1, r3
 800c50e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c512:	e7eb      	b.n	800c4ec <__swhatbuf_r+0x24>

0800c514 <__smakebuf_r>:
 800c514:	898b      	ldrh	r3, [r1, #12]
 800c516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c518:	079d      	lsls	r5, r3, #30
 800c51a:	4606      	mov	r6, r0
 800c51c:	460c      	mov	r4, r1
 800c51e:	d507      	bpl.n	800c530 <__smakebuf_r+0x1c>
 800c520:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	2301      	movs	r3, #1
 800c52a:	6163      	str	r3, [r4, #20]
 800c52c:	b003      	add	sp, #12
 800c52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c530:	ab01      	add	r3, sp, #4
 800c532:	466a      	mov	r2, sp
 800c534:	f7ff ffc8 	bl	800c4c8 <__swhatbuf_r>
 800c538:	9f00      	ldr	r7, [sp, #0]
 800c53a:	4605      	mov	r5, r0
 800c53c:	4639      	mov	r1, r7
 800c53e:	4630      	mov	r0, r6
 800c540:	f7ff fbbc 	bl	800bcbc <_malloc_r>
 800c544:	b948      	cbnz	r0, 800c55a <__smakebuf_r+0x46>
 800c546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54a:	059a      	lsls	r2, r3, #22
 800c54c:	d4ee      	bmi.n	800c52c <__smakebuf_r+0x18>
 800c54e:	f023 0303 	bic.w	r3, r3, #3
 800c552:	f043 0302 	orr.w	r3, r3, #2
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	e7e2      	b.n	800c520 <__smakebuf_r+0xc>
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	6020      	str	r0, [r4, #0]
 800c55e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	9b01      	ldr	r3, [sp, #4]
 800c566:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c56a:	b15b      	cbz	r3, 800c584 <__smakebuf_r+0x70>
 800c56c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c570:	4630      	mov	r0, r6
 800c572:	f000 f81d 	bl	800c5b0 <_isatty_r>
 800c576:	b128      	cbz	r0, 800c584 <__smakebuf_r+0x70>
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	f023 0303 	bic.w	r3, r3, #3
 800c57e:	f043 0301 	orr.w	r3, r3, #1
 800c582:	81a3      	strh	r3, [r4, #12]
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	431d      	orrs	r5, r3
 800c588:	81a5      	strh	r5, [r4, #12]
 800c58a:	e7cf      	b.n	800c52c <__smakebuf_r+0x18>

0800c58c <_fstat_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d07      	ldr	r5, [pc, #28]	@ (800c5ac <_fstat_r+0x20>)
 800c590:	2300      	movs	r3, #0
 800c592:	4604      	mov	r4, r0
 800c594:	4608      	mov	r0, r1
 800c596:	4611      	mov	r1, r2
 800c598:	602b      	str	r3, [r5, #0]
 800c59a:	f7fc f946 	bl	800882a <_fstat>
 800c59e:	1c43      	adds	r3, r0, #1
 800c5a0:	d102      	bne.n	800c5a8 <_fstat_r+0x1c>
 800c5a2:	682b      	ldr	r3, [r5, #0]
 800c5a4:	b103      	cbz	r3, 800c5a8 <_fstat_r+0x1c>
 800c5a6:	6023      	str	r3, [r4, #0]
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
 800c5aa:	bf00      	nop
 800c5ac:	200005b0 	.word	0x200005b0

0800c5b0 <_isatty_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d06      	ldr	r5, [pc, #24]	@ (800c5cc <_isatty_r+0x1c>)
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4608      	mov	r0, r1
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	f7fc f945 	bl	800884a <_isatty>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d102      	bne.n	800c5ca <_isatty_r+0x1a>
 800c5c4:	682b      	ldr	r3, [r5, #0]
 800c5c6:	b103      	cbz	r3, 800c5ca <_isatty_r+0x1a>
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	200005b0 	.word	0x200005b0

0800c5d0 <_init>:
 800c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d2:	bf00      	nop
 800c5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d6:	bc08      	pop	{r3}
 800c5d8:	469e      	mov	lr, r3
 800c5da:	4770      	bx	lr

0800c5dc <_fini>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	bf00      	nop
 800c5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e2:	bc08      	pop	{r3}
 800c5e4:	469e      	mov	lr, r3
 800c5e6:	4770      	bx	lr
